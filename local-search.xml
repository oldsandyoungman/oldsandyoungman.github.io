<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>【冲】labuladong的21天算法挑战Day15_回溯算法核心原理</title>
    <link href="/2022/01/19/2022-01-19-labuladong%E7%9A%8421%E5%A4%A9%E7%AE%97%E6%B3%95%E6%8C%91%E6%88%98Day15_%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86/"/>
    <url>/2022/01/19/2022-01-19-labuladong%E7%9A%8421%E5%A4%A9%E7%AE%97%E6%B3%95%E6%8C%91%E6%88%98Day15_%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86/</url>
    
    <content type="html"><![CDATA[<p>东哥的21天算法挑战，第14天，嗷呜~~</p><h1 id="Day15：回溯算法核心原理"><a href="#Day15：回溯算法核心原理" class="headerlink" title="Day15：回溯算法核心原理"></a>Day15：回溯算法核心原理</h1><p>打卡地：<a href="https://github.com/labuladong/challenge/issues/40">东哥 Github</a></p><p>专题详解内容：<a href="https://labuladong.gitee.io/plugin-v3/?qno=752"><a href="https://labuladong.gitee.io/plugin-v3/?qno=51">回溯算法核心原理</a></a></p><h3 id="46-全排列"><a href="#46-全排列" class="headerlink" title="46. 全排列"></a><a href="https://leetcode-cn.com/problems/permutations/">46. 全排列</a></h3><blockquote><p>给定一个不含重复数字的数组 <code>nums</code> ，返回其 <strong>所有可能的全排列</strong> 。你可以 <strong>按任意顺序</strong> 返回答案。</p><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 6</code></li><li><code>-10 &lt;= nums[i] &lt;= 10</code></li><li><code>nums</code> 中的所有整数 <strong>互不相同</strong></li></ul></blockquote><h5 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h5><p>回溯法的基本使用流程：</p><ol><li>主函数里，初始化存出结果变量，路径变量，调用一次回溯函数</li><li>回溯函数里，先判断是否满足终止条件。如果需要先在路径里加入值的话，返回前记得remove（即add和remove无论从哪条路退出，都要次数一致）</li><li>然后循环遍历选择列表，满足条件的话，加入当前值，进入下一层回溯函数，删除当前值</li></ol><h5 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h5><p>很久不写，一开始在纠结主函数里要不要先遍历选择加值，其实不用，全部都在回溯函数里完成即可</p><h5 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> List&lt;List&lt;Integer&gt;&gt; permute(<span class="hljs-keyword">int</span>[] nums) &#123;<br>        res = <span class="hljs-keyword">new</span> LinkedList&lt;&gt;();<br>        List&lt;Integer&gt; path = <span class="hljs-keyword">new</span> LinkedList&lt;&gt;();<br>        <br>        traverse(nums, path);<br><br>        <span class="hljs-keyword">return</span> res;<br><br>    &#125;<br><br>    List&lt;List&lt;Integer&gt;&gt; res;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">traverse</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums, List&lt;Integer&gt; path)</span></span>&#123;<br>        <span class="hljs-keyword">int</span> n = nums.length;<br>        <span class="hljs-keyword">if</span>(n==path.size())&#123;<br>            res.add(<span class="hljs-keyword">new</span> LinkedList&lt;&gt;(path));<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> num : nums)&#123;<br>            <span class="hljs-keyword">if</span>(!path.contains(num))&#123;<br>                path.add(num);<br>                traverse(nums, path);<br>                path.remove(path.size()-<span class="hljs-number">1</span>);<br>            &#125;<br>        &#125;<br><br>    &#125;<br><br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="51-N-皇后"><a href="#51-N-皇后" class="headerlink" title="51. N 皇后"></a><a href="https://leetcode-cn.com/problems/n-queens/">51. N 皇后</a></h3><blockquote><p>n 皇后问题 研究的是如何将 n 个皇后放置在 n×n 的棋盘上，并且使皇后彼此之间不能相互攻击。</p><p>给你一个整数 n ，返回所有不同的 n 皇后问题 的解决方案。</p><p>每一种解法包含一个不同的 n 皇后问题 的棋子放置方案，该方案中 ‘Q’ 和 ‘.’ 分别代表了皇后和空位。</p><p><strong>提示：</strong></p><ul><li><code>1 &lt;= n &lt;= 9</code></li></ul></blockquote><h5 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h5><p>回溯的思路没有变化，不过这道题在进入下一层回溯前的判断条件写的东西有点多，要另外再写个函数</p><h5 id="注意点-1"><a href="#注意点-1" class="headerlink" title="注意点"></a>注意点</h5><p>n这个东西用的比较多，不如加入函数的参数</p><h5 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> List&lt;List&lt;String&gt;&gt; solveNQueens(<span class="hljs-keyword">int</span> n) &#123;<br>        res = <span class="hljs-keyword">new</span> LinkedList&lt;&gt;();<br>        List&lt;String&gt; path = <span class="hljs-keyword">new</span> LinkedList&lt;&gt;();<br><br>        traverse(path, <span class="hljs-number">0</span>, n);<br><br>        <span class="hljs-keyword">return</span> res;<br><br>    &#125;<br>    <br>    List&lt;List&lt;String&gt;&gt; res;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">traverse</span><span class="hljs-params">(List&lt;String&gt; path, <span class="hljs-keyword">int</span> row, <span class="hljs-keyword">int</span> n)</span></span>&#123;<br>        <span class="hljs-keyword">if</span>(row==n)&#123;<br>            res.add(<span class="hljs-keyword">new</span> LinkedList&lt;&gt;(path));<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>; i&lt;n; i++)&#123;<br>            <span class="hljs-keyword">if</span>(isValid(path, row, i, n))&#123;<br>                StringBuilder sb = <span class="hljs-keyword">new</span> StringBuilder();<br>                <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>; j&lt;i; j++)&#123;<br>                    sb.append(<span class="hljs-string">&quot;.&quot;</span>);<br>                &#125;<br>                sb.append(<span class="hljs-string">&quot;Q&quot;</span>);<br>                <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=i+<span class="hljs-number">1</span>; j&lt;n; j++)&#123;<br>                    sb.append(<span class="hljs-string">&quot;.&quot;</span>);<br>                &#125;<br>                path.add(sb.toString());<br><br>                traverse(path, row+<span class="hljs-number">1</span>, n);<br><br>                path.remove(path.size()-<span class="hljs-number">1</span>);<br><br>            &#125;<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isValid</span><span class="hljs-params">(List&lt;String&gt; path, <span class="hljs-keyword">int</span> row, <span class="hljs-keyword">int</span> col, <span class="hljs-keyword">int</span> n)</span></span>&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>; i&lt;row; i++)&#123;<br>            <span class="hljs-keyword">if</span>(path.get(i).charAt(col)==<span class="hljs-string">&#x27;Q&#x27;</span>)&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">int</span> i = row-<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">int</span> j = col-<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span>(i&gt;=<span class="hljs-number">0</span> &amp;&amp; j&gt;=<span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">if</span>(path.get(i).charAt(j)==<span class="hljs-string">&#x27;Q&#x27;</span>)&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>            &#125;<br>            i--;<br>            j--;<br>        &#125;<br><br>        i = row-<span class="hljs-number">1</span>;<br>        j = col+<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span>(i&gt;=<span class="hljs-number">0</span> &amp;&amp; j&lt;n)&#123;<br>            <span class="hljs-keyword">if</span>(path.get(i).charAt(j)==<span class="hljs-string">&#x27;Q&#x27;</span>)&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>            &#125;<br>            i--;<br>            j++;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br><br><br>    &#125;<br><br><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>21天挑战第15天，别人已经放假回家，但我们的战斗还要继续，冲冲冲！</p><h2 id="渡何处"><a href="#渡何处" class="headerlink" title="渡何处"></a>渡何处</h2><blockquote><p>错把陈醋当成墨，写尽半生纸上酸<br>更怕醋墨两相掺，半生苦涩半生酸</p></blockquote><p>没找到出处，从一个b站视频下面看到的，写得很有味道</p>]]></content>
    
    
    <categories>
      
      <category>程序缘的内功修炼</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>labuladong</tag>
      
      <tag>回溯法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【冲】labuladong的21天算法挑战Day14_BFS算法基础</title>
    <link href="/2022/01/18/2022-01-18-labuladong%E7%9A%8421%E5%A4%A9%E7%AE%97%E6%B3%95%E6%8C%91%E6%88%98Day14_BFS%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80/"/>
    <url>/2022/01/18/2022-01-18-labuladong%E7%9A%8421%E5%A4%A9%E7%AE%97%E6%B3%95%E6%8C%91%E6%88%98Day14_BFS%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<p>东哥的21天算法挑战，第14天，嗷呜~~</p><h1 id="Day14：BFS算法基础"><a href="#Day14：BFS算法基础" class="headerlink" title="Day14：BFS算法基础"></a>Day14：BFS算法基础</h1><p>打卡地：<a href="https://github.com/labuladong/challenge/issues/39">东哥 Github</a></p><p>专题详解内容：<a href="https://labuladong.gitee.io/plugin-v3/?qno=752">BFS 算法基础</a></p><h3 id="111-二叉树的最小深度"><a href="#111-二叉树的最小深度" class="headerlink" title="111. 二叉树的最小深度"></a><a href="https://leetcode-cn.com/problems/minimum-depth-of-binary-tree/">111. 二叉树的最小深度</a></h3><blockquote><p>给定一个二叉树，找出其最小深度。</p><p>最小深度是从根节点到最近叶子节点的最短路径上的节点数量。</p><p><strong>说明：</strong>叶子节点是指没有子节点的节点</p><p><strong>提示：</strong></p><ul><li>树中节点数的范围在 <code>[0, 105]</code> 内</li><li><code>-1000 &lt;= Node.val &lt;= 1000</code></li></ul></blockquote><h5 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h5><p>BFS的基本框架，因为需要用到深度信息，所以需要在while循环里加入for循环，进而记录更新深度信息</p><h5 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h5><p>应该木有</p><h5 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for a binary tree node.</span><br><span class="hljs-comment"> * public class TreeNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     TreeNode left;</span><br><span class="hljs-comment"> *     TreeNode right;</span><br><span class="hljs-comment"> *     TreeNode() &#123;&#125;</span><br><span class="hljs-comment"> *     TreeNode(int val) &#123; this.val = val; &#125;</span><br><span class="hljs-comment"> *     TreeNode(int val, TreeNode left, TreeNode right) &#123;</span><br><span class="hljs-comment"> *         this.val = val;</span><br><span class="hljs-comment"> *         this.left = left;</span><br><span class="hljs-comment"> *         this.right = right;</span><br><span class="hljs-comment"> *     &#125;</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">minDepth</span><span class="hljs-params">(TreeNode root)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span>(root==<span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br><br>        ArrayDeque&lt;TreeNode&gt; q = <span class="hljs-keyword">new</span> ArrayDeque&lt;&gt;();<br>        q.addLast(root);<br>        <span class="hljs-keyword">int</span> dep = <span class="hljs-number">1</span>;<br><br>        <span class="hljs-keyword">while</span>(!q.isEmpty())&#123;<br>            <span class="hljs-keyword">int</span> n = q.size();<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>; i&lt;n; i++)&#123;<br>                TreeNode cur = q.removeFirst();<br>                <span class="hljs-keyword">if</span>(cur.left==<span class="hljs-keyword">null</span> &amp;&amp; cur.right==<span class="hljs-keyword">null</span>)&#123;<br>                    <span class="hljs-keyword">return</span> dep;<br>                &#125;<br>                <span class="hljs-keyword">if</span>(cur.left!=<span class="hljs-keyword">null</span>)&#123;<br>                    q.addLast(cur.left);<br>                &#125;<br>                <span class="hljs-keyword">if</span>(cur.right!=<span class="hljs-keyword">null</span>)&#123;<br>                    q.addLast(cur.right);<br>                &#125;<br>            &#125;<br>            dep++;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="752-打开转盘锁"><a href="#752-打开转盘锁" class="headerlink" title="752. 打开转盘锁"></a><a href="https://leetcode-cn.com/problems/open-the-lock/">752. 打开转盘锁</a></h3><blockquote><p>你有一个带有四个圆形拨轮的转盘锁。每个拨轮都有10个数字： ‘0’, ‘1’, ‘2’, ‘3’, ‘4’, ‘5’, ‘6’, ‘7’, ‘8’, ‘9’ 。每个拨轮可以自由旋转：例如把 ‘9’ 变为 ‘0’，’0’ 变为 ‘9’ 。每次旋转都只能旋转一个拨轮的一位数字。</p><p>锁的初始数字为 ‘0000’ ，一个代表四个拨轮的数字的字符串。</p><p>列表 deadends 包含了一组死亡数字，一旦拨轮的数字和列表里的任何一个元素相同，这个锁将会被永久锁定，无法再被旋转。</p><p>字符串 target 代表可以解锁的数字，你需要给出解锁需要的最小旋转次数，如果无论如何不能解锁，返回 -1 。</p><p>提示：</p><ul><li>1 &lt;= deadends.length &lt;= 500</li><li>deadends[i].length == 4</li><li>target.length == 4</li><li>target 不在 deadends 之中</li><li>target 和 deadends[i] 仅由若干位数字组成</li></ul></blockquote><h5 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h5><p>需要联想到密码锁的转动，也是一种BFS，但可能成环，所以需要额外的HashSet来记录访问过的节点</p><h5 id="注意点-1"><a href="#注意点-1" class="headerlink" title="注意点"></a>注意点</h5><ul><li>对于deadends和visited，可以共用</li><li>Java中更改字符串，转成char[]，再用new String(char[])转回来</li></ul><h5 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">openLock</span><span class="hljs-params">(String[] deadends, String target)</span> </span>&#123;<br><br>        HashSet visited = <span class="hljs-keyword">new</span> HashSet&lt;&gt;();<br>        <span class="hljs-keyword">for</span>(String tmp : deadends)&#123;<br>            visited.add(tmp);<br>        &#125;<br><br>        <span class="hljs-keyword">if</span>(visited.contains(<span class="hljs-string">&quot;0000&quot;</span>))&#123;<br>            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(target.equals(<span class="hljs-string">&quot;0000&quot;</span>))&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>        visited.add(<span class="hljs-string">&quot;0000&quot;</span>);<br><br>        ArrayDeque&lt;String&gt; q = <span class="hljs-keyword">new</span> ArrayDeque&lt;&gt;();<br>        q.addLast(<span class="hljs-string">&quot;0000&quot;</span>);<br>        <span class="hljs-keyword">int</span> dep = <span class="hljs-number">0</span>;<br><br>        <span class="hljs-keyword">while</span>(!q.isEmpty())&#123;<br>            <span class="hljs-keyword">int</span> n = q.size();<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>; j&lt;n; j++)&#123;<br><br>                String cur = q.removeFirst();<br><br>                <span class="hljs-keyword">if</span>(cur.equals(target))&#123;<br>                    <span class="hljs-keyword">return</span> dep;<br>                &#125;<br>                <br>                <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">4</span>; i++)&#123;<br>                    String up = upp(cur, i);<br>                    <span class="hljs-keyword">if</span>(!visited.contains(up))&#123;<br>                        q.addLast(up);<br>                        visited.add(up);<br>                    &#125;<br>                    String down = downn(cur, i);<br>                    <span class="hljs-keyword">if</span>(!visited.contains(down))&#123;<br>                        q.addLast(down);<br>                        visited.add(down);<br>                    &#125;<br>                &#125;<br><br>            &#125;<br>            dep++;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br><br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">upp</span><span class="hljs-params">(String s, <span class="hljs-keyword">int</span> index)</span></span>&#123;<br>        <span class="hljs-keyword">char</span>[] ss = s.toCharArray();<br>        <span class="hljs-keyword">if</span>(ss[index]==<span class="hljs-string">&#x27;9&#x27;</span>)&#123;<br>            ss[index] = <span class="hljs-string">&#x27;0&#x27;</span>;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            ss[index]++;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> String(ss);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">downn</span><span class="hljs-params">(String s, <span class="hljs-keyword">int</span> index)</span></span>&#123;<br>        <span class="hljs-keyword">char</span>[] ss = s.toCharArray();<br>        <span class="hljs-keyword">if</span>(ss[index]==<span class="hljs-string">&#x27;0&#x27;</span>)&#123;<br>            ss[index] = <span class="hljs-string">&#x27;9&#x27;</span>;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            ss[index]--;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> String(ss);<br>    &#125;<br><br><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>21天挑战第14天，已经过了2/3，继续加油</p><h2 id="渡何处"><a href="#渡何处" class="headerlink" title="渡何处"></a>渡何处</h2><blockquote><p>翁彪</p><p>我是使爸妈衰老的诸多事件之一</p><p>职称、房贷、牛肉的价格</p><p>我跻身其中，最为持久</p><p>我是这对中年夫妻唯一相符的病症、共同的疾患</p><p>二十三年来无时不在考验他们的婚姻</p><p>我差不多就是耐性本身</p><p>我是疲惫的侧面、谩骂的间歇</p><p>我是流水中较大的那块石头</p><p>将眼泪分成两份</p></blockquote><p>敏锐，叙事感节奏感抽象感超好，厉害</p>]]></content>
    
    
    <categories>
      
      <category>程序缘的内功修炼</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>labuladong</tag>
      
      <tag>BFS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【冲】labuladong的21天算法挑战Day13_二分图判定算法</title>
    <link href="/2022/01/17/2022-01-17-labuladong%E7%9A%8421%E5%A4%A9%E7%AE%97%E6%B3%95%E6%8C%91%E6%88%98Day13_%E4%BA%8C%E5%88%86%E5%9B%BE%E5%88%A4%E5%AE%9A%E7%AE%97%E6%B3%95/"/>
    <url>/2022/01/17/2022-01-17-labuladong%E7%9A%8421%E5%A4%A9%E7%AE%97%E6%B3%95%E6%8C%91%E6%88%98Day13_%E4%BA%8C%E5%88%86%E5%9B%BE%E5%88%A4%E5%AE%9A%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>东哥的21天算法挑战，第13天，开始回血！</p><h1 id="Day13：二分图判定算法"><a href="#Day13：二分图判定算法" class="headerlink" title="Day13：二分图判定算法"></a>Day13：二分图判定算法</h1><p>打卡地：<a href="https://github.com/labuladong/challenge/issues/38">东哥 Github</a></p><p>专题详解内容：<a href="https://labuladong.gitee.io/plugin-v3/?qno=785&target=gitee&_=1642389518965">二分图判定算法</a></p><h3 id="785-判断二分图"><a href="#785-判断二分图" class="headerlink" title="785. 判断二分图"></a><a href="https://leetcode-cn.com/problems/is-graph-bipartite/">785. 判断二分图</a></h3><blockquote><p>存在一个 无向图 ，图中有 n 个节点。其中每个节点都有一个介于 0 到 n - 1 之间的唯一编号。给你一个二维数组 graph ，其中 graph[u] 是一个节点数组，由节点 u 的邻接节点组成。形式上，对于 graph[u] 中的每个 v ，都存在一条位于节点 u 和节点 v 之间的无向边。该无向图同时具有以下属性：</p><ul><li>不存在自环（graph[u] 不包含 u）。</li><li>不存在平行边（graph[u] 不包含重复值）。</li><li>如果 v 在 graph[u] 内，那么 u 也应该在 graph[v] 内（该图是无向图）</li><li>这个图可能不是连通图，也就是说两个节点 u 和 v 之间可能不存在一条连通彼此的路径。</li></ul><p>二分图 定义：如果能将一个图的节点集合分割成两个独立的子集 A 和 B ，并使图中的每一条边的两个节点一个来自 A 集合，一个来自 B 集合，就将这个图称为 二分图 。</p><p>如果图是二分图，返回 true ；否则，返回 false 。</p><p>提示：</p><ul><li>graph.length == n</li><li>1 &lt;= n &lt;= 100</li><li>0 &lt;= graph[u].length &lt; n</li><li>0 &lt;= graph[u][i] &lt;= n - 1</li><li>graph[u] 不会包含 u</li><li>graph[u] 的所有值 互不相同</li><li>如果 graph[u] 包含 v，那么 graph[v] 也会包含 u</li></ul></blockquote><h5 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h5><p>二分图的思路，遍历所有未访问过的节点，再遍历它的周围节点，如果周围节点已经访问过，判断两者是否同色；如果没有访问过，将其染色为反色</p><h5 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h5><ul><li>即使traverse函数返回值为void，也可以通过全局变量的boolean来剪枝，刚进入函数就判断boolean是否为false</li><li>每次进入traverse，直接将当前节点记为访问过</li></ul><h5 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isBipartite</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[][] graph)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> n = graph.length;<br><br>        color = <span class="hljs-keyword">new</span> <span class="hljs-keyword">boolean</span>[n];<br>        visited = <span class="hljs-keyword">new</span> <span class="hljs-keyword">boolean</span>[n];<br>        isok = <span class="hljs-keyword">true</span>;<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>; i&lt;n; i++)&#123;<br>            <span class="hljs-keyword">if</span>(!visited[i])&#123;<br>                traverse(graph, i);<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> isok;<br>    &#125;<br><br>    <span class="hljs-keyword">boolean</span>[] color;<br>    <span class="hljs-keyword">boolean</span>[] visited;<br>    <span class="hljs-keyword">boolean</span> isok;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">traverse</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[][] graph, <span class="hljs-keyword">int</span> src)</span></span>&#123;<br><br>        <span class="hljs-keyword">if</span>(!isok)&#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        visited[src] = <span class="hljs-keyword">true</span>;<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> next : graph[src])&#123;<br>            <span class="hljs-keyword">if</span>(!visited[next])&#123;<br>                color[next] = !color[src];<br>                traverse(graph, next);<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-keyword">if</span>(color[src]==color[next])&#123;<br>                    isok = <span class="hljs-keyword">false</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="886-可能的二分法"><a href="#886-可能的二分法" class="headerlink" title="886. 可能的二分法"></a><a href="https://leetcode-cn.com/problems/possible-bipartition/">886. 可能的二分法</a></h3><blockquote><p>给定一组 N 人（编号为 1, 2, …, N）， 我们想把每个人分进任意大小的两组。</p><p>每个人都可能不喜欢其他人，那么他们不应该属于同一组。</p><p>形式上，如果 dislikes[i] = [a, b]，表示不允许将编号为 a 和 b 的人归入同一组。</p><p>当可以用这种方法将所有人分进两组时，返回 true；否则返回 false。</p><p>提示：</p><ul><li>1 &lt;= N &lt;= 2000</li><li>0 &lt;= dislikes.length &lt;= 10000</li><li>dislikes[i].length == 2</li><li>1 &lt;= dislikes[i][j] &lt;= N</li><li>dislikes[i][0] &lt; dislikes[i][1]</li><li>对于 dislikes[i] == dislikes[j] 不存在 i != j</li></ul></blockquote><h5 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h5><p>第一步联想到dislike关系就是邻边反色关系，这步很难，难想到以后之后就很简单了，同785即可</p><h5 id="注意点-1"><a href="#注意点-1" class="headerlink" title="注意点"></a>注意点</h5><ul><li>本题需要额外将dislike转化成一个graph</li><li>本题编号是从1开始，因此List&lt; Integer &gt;[] graph大小+1，初始化从1开始，travers的遍历从1开始，visited和color的大小+1</li></ul><h5 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">possibleBipartition</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n, <span class="hljs-keyword">int</span>[][] dislikes)</span> </span>&#123;<br>        List&lt;Integer&gt;[] graph = <span class="hljs-keyword">new</span> LinkedList[n+<span class="hljs-number">1</span>];<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>; i&lt;=n; i++)&#123;<br>            graph[i] = <span class="hljs-keyword">new</span> LinkedList&lt;&gt;();<br>        &#125;<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span>[] tmp : dislikes)&#123;<br>            <span class="hljs-keyword">int</span> src = tmp[<span class="hljs-number">0</span>];<br>            <span class="hljs-keyword">int</span> tar = tmp[<span class="hljs-number">1</span>];<br><br>            graph[src].add(tar);<br>            graph[tar].add(src);<br><br>        &#125;<br><br>        visited = <span class="hljs-keyword">new</span> <span class="hljs-keyword">boolean</span>[n+<span class="hljs-number">1</span>];<br>        color = <span class="hljs-keyword">new</span> <span class="hljs-keyword">boolean</span>[n+<span class="hljs-number">1</span>];<br>        ok = <span class="hljs-keyword">true</span>;<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>; i&lt;=n; i++)&#123;<br>            <span class="hljs-keyword">if</span>(!visited[i])&#123;<br>                traverse(graph, i);<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> ok;<br><br>    &#125;<br><br>    <span class="hljs-keyword">boolean</span>[] visited;<br>    <span class="hljs-keyword">boolean</span>[] color;<br>    <span class="hljs-keyword">boolean</span> ok;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">traverse</span><span class="hljs-params">(List&lt;Integer&gt;[] graph, <span class="hljs-keyword">int</span> src)</span></span>&#123;<br>        <span class="hljs-keyword">if</span>(!ok)&#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        visited[src] = <span class="hljs-keyword">true</span>;<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> next : graph[src])&#123;<br>            <span class="hljs-keyword">if</span>(!visited[next])&#123;<br>                color[next] = !color[src];<br>                traverse(graph, next);<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-keyword">if</span>(color[src]==color[next])&#123;<br>                    ok = <span class="hljs-keyword">false</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>21天挑战第13天，慢慢调整恢复状态~~</p><h2 id="渡何处"><a href="#渡何处" class="headerlink" title="渡何处"></a>渡何处</h2><blockquote><p>黄梅戏《女驸马》</p><p>我也曾赴过琼林宴，我也曾打马御街前</p></blockquote><p>查了下，“琼林宴”为皇上为殿试后录取的进士（天子门生）所设。两句歌词的大概意思是：我曾经参加国皇上为新科进士所举行的宴会，我也曾经在皇城的街道上骑马游街。算是人生得意之时的畅快之语</p>]]></content>
    
    
    <categories>
      
      <category>程序缘的内功修炼</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>labuladong</tag>
      
      <tag>二分图</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【冲】labuladong的21天算法挑战Day12_图论算法基础</title>
    <link href="/2022/01/16/2022-01-16-labuladong%E7%9A%8421%E5%A4%A9%E7%AE%97%E6%B3%95%E6%8C%91%E6%88%98Day12_%E5%9B%BE%E8%AE%BA%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80/"/>
    <url>/2022/01/16/2022-01-16-labuladong%E7%9A%8421%E5%A4%A9%E7%AE%97%E6%B3%95%E6%8C%91%E6%88%98Day12_%E5%9B%BE%E8%AE%BA%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<p>东哥的21天算法挑战，第12天，开始回血！</p><h1 id="Day12：图论算法基础"><a href="#Day12：图论算法基础" class="headerlink" title="Day12：图论算法基础"></a>Day12：图论算法基础</h1><p>打卡地：<a href="https://github.com/labuladong/challenge/issues/37">东哥 Github</a></p><p>专题详解内容：<a href="https://labuladong.gitee.io/plugin-v3/?qno=797&target=gitee&_=1642288864543">图论算法基础</a></p><h3 id="797-所有可能的路径"><a href="#797-所有可能的路径" class="headerlink" title="797. 所有可能的路径"></a><a href="https://leetcode-cn.com/problems/all-paths-from-source-to-target/">797. 所有可能的路径</a></h3><blockquote><p>给你一个有 n 个节点的 有向无环图（DAG），请你找出所有从节点 0 到节点 n-1 的路径并输出（不要求按特定顺序）</p><p>二维数组的第 i 个数组中的单元都表示有向图中 i 号节点所能到达的下一些节点，空就是没有下一个结点了。</p><p>译者注：有向图是有方向的，即规定了 a→b 你就不能从 b→a 。</p><p>提示：</p><ul><li>n == graph.length</li><li>2 &lt;= n &lt;= 15</li><li>0 &lt;= graph[i][j] &lt; n</li><li>graph[i][j] != i（即，不存在自环）</li><li>graph[i] 中的所有元素 互不相同</li><li>保证输入为 有向无环图（DAG）</li></ul></blockquote><h5 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h5><p>图论的题目思路类似BFS，但本题更类似于回溯法的变形（其实只用回溯法也是可以做出来的）</p><h5 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h5><ul><li>如果用回溯法，因为回溯法是不记录开头节点，所以需要额外添加头结点到路径中</li><li>如果用图的遍历方法，注意到达终点处的return前，要先remove（或者说只要进入当前的递归，不管从哪个地方return出去，都要path.add和path.remove数量相等）</li></ul><h5 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h5><ol><li>纯回溯版本</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> List&lt;List&lt;Integer&gt;&gt; allPathsSourceTarget(<span class="hljs-keyword">int</span>[][] graph) &#123;<br>        <span class="hljs-keyword">int</span> n = graph.length;<br>        res = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        LinkedList&lt;Integer&gt; path = <span class="hljs-keyword">new</span> LinkedList&lt;&gt;();<br>        path.addLast(<span class="hljs-number">0</span>);<br>        backtrack(graph, path, n);<br>        <br>        <span class="hljs-keyword">return</span> res;<br><br><br>    &#125;<br><br>    List&lt;List&lt;Integer&gt;&gt; res;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">backtrack</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[][] graph, LinkedList&lt;Integer&gt; path, <span class="hljs-keyword">int</span> n)</span></span>&#123;<br>        <span class="hljs-keyword">int</span> cur = path.getLast();<br>        <span class="hljs-keyword">if</span>(cur==n-<span class="hljs-number">1</span>)&#123;<br>            res.add(<span class="hljs-keyword">new</span> LinkedList&lt;&gt;(path));<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> next : graph[cur])&#123;<br>            path.addLast(next);<br>            backtrack(graph, path, n);<br>            path.removeLast();<br>        &#125;<br><br>    &#125;<br><br><br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>图的遍历版本</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> List&lt;List&lt;Integer&gt;&gt; allPathsSourceTarget(<span class="hljs-keyword">int</span>[][] graph) &#123;<br>        res = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        LinkedList&lt;Integer&gt; path = <span class="hljs-keyword">new</span> LinkedList&lt;&gt;();<br>        backtrack(graph, <span class="hljs-number">0</span>, path);<br>        <span class="hljs-keyword">return</span> res;<br><br>    &#125;<br>    List&lt;List&lt;Integer&gt;&gt; res;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">backtrack</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[][] graph, <span class="hljs-keyword">int</span> src, LinkedList&lt;Integer&gt; path)</span></span>&#123;<br><br>        path.addLast(src);<br><br>        <span class="hljs-keyword">int</span> n = graph.length;<br>        <span class="hljs-keyword">if</span>(src==n-<span class="hljs-number">1</span>)&#123;<br>            res.add(<span class="hljs-keyword">new</span> ArrayList&lt;&gt;(path));<br>            path.removeLast();<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> next : graph[src])&#123;<br>            backtrack(graph, next, path);<br>        &#125;<br><br>        path.removeLast();<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>21天挑战第12天，看完医生，开了些药，向我的肠胃菌开战~~</p><h2 id="渡何处"><a href="#渡何处" class="headerlink" title="渡何处"></a>渡何处</h2><blockquote><p>确认成见 Confirmation Bias</p><p>个人无论合乎事实与否，偏好支持自己的成见、猜想的倾向。人们在脑中选择性地回忆、搜集有利细节，忽略矛盾的信息，并加以片面诠释</p></blockquote><p>挺矛盾的，一方面我们的人性天性，会要求我们用一套逻辑自洽的理论，解释分析身边的世界，不然我们会迷茫无所适从。但当我们真正分析起来，世界的复杂性、我们可收集信息的有限性、认知的狭隘性，最终导致我们找不到一个完美的理论，而在不完美的压迫下为了躲避这种痛苦，我们就会使用了确认成见。所以真正的成长成熟，其实是要我们克服很多痛苦违背些人性</p>]]></content>
    
    
    <categories>
      
      <category>程序缘的内功修炼</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>labuladong</tag>
      
      <tag>图论</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【冲】labuladong的21天算法挑战Day11_二叉搜索树基础操作</title>
    <link href="/2022/01/15/2022-01-15-labuladong%E7%9A%8421%E5%A4%A9%E7%AE%97%E6%B3%95%E6%8C%91%E6%88%98Day11_%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C/"/>
    <url>/2022/01/15/2022-01-15-labuladong%E7%9A%8421%E5%A4%A9%E7%AE%97%E6%B3%95%E6%8C%91%E6%88%98Day11_%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<p>东哥的21天算法挑战，第11天，爬！</p><h1 id="Day11：二叉搜索树基础操作"><a href="#Day11：二叉搜索树基础操作" class="headerlink" title="Day11：二叉搜索树基础操作"></a>Day11：二叉搜索树基础操作</h1><p>打卡地：<a href="https://github.com/labuladong/challenge/issues/36">东哥 Github</a></p><p>专题详解内容：<a href="https://labuladong.gitee.io/plugin-v3/?qno=450">二叉搜索树基础操作</a></p><h3 id="450-删除二叉搜索树中的节点"><a href="#450-删除二叉搜索树中的节点" class="headerlink" title="450. 删除二叉搜索树中的节点"></a><a href="https://leetcode-cn.com/problems/delete-node-in-a-bst/">450. 删除二叉搜索树中的节点</a></h3><blockquote><p>给定一个二叉搜索树的根节点 root 和一个值 key，删除二叉搜索树中的 key 对应的节点，并保证二叉搜索树的性质不变。返回二叉搜索树（有可能被更新）的根节点的引用。</p><p>一般来说，删除节点可分为两个步骤：</p><ol><li>首先找到需要删除的节点；</li><li>如果找到了，删除它。</li></ol><p>提示:</p><ul><li>节点数的范围 [0, 104].</li><li>-105 &lt;= Node.val &lt;= 105</li><li>节点值唯一</li><li>root 是合法的二叉搜索树</li><li>-105 &lt;= key &lt;= 105</li></ul></blockquote><h5 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h5><p>分三类讨论：</p><ul><li>如果要删除节点没有左右子树，那么直接删除即可（返回null）</li><li>如果要删除节点只有一棵子树，那么直接用子树代替即可（返回那棵子树）</li><li>如果要删除节点左右子树都存在，那么找到左子树的最大值或者右子树的最小值节点，进而代替即可（将找到的节点的左右子树分别指向root的左右子树，再返回自己即可）</li></ul><h5 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h5><ul><li>对于返回节点类型的递归函数而言，多利用root.left=traverse(root.left)，这样就省去了存储父节点的操作</li><li>对于<code>思路</code>中的情况3，不用管root被替换以后，它的左右子树指针要不要置空，没有必要</li></ul><h5 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for a binary tree node.</span><br><span class="hljs-comment"> * public class TreeNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     TreeNode left;</span><br><span class="hljs-comment"> *     TreeNode right;</span><br><span class="hljs-comment"> *     TreeNode() &#123;&#125;</span><br><span class="hljs-comment"> *     TreeNode(int val) &#123; this.val = val; &#125;</span><br><span class="hljs-comment"> *     TreeNode(int val, TreeNode left, TreeNode right) &#123;</span><br><span class="hljs-comment"> *         this.val = val;</span><br><span class="hljs-comment"> *         this.left = left;</span><br><span class="hljs-comment"> *         this.right = right;</span><br><span class="hljs-comment"> *     &#125;</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> TreeNode <span class="hljs-title">deleteNode</span><span class="hljs-params">(TreeNode root, <span class="hljs-keyword">int</span> key)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> traverse(root, key);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> TreeNode <span class="hljs-title">traverse</span><span class="hljs-params">(TreeNode root, <span class="hljs-keyword">int</span> key)</span></span>&#123;<br>        <span class="hljs-keyword">if</span>(root==<span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(root.val&gt;key)&#123;<br>            root.left = traverse(root.left, key);<br>            <span class="hljs-keyword">return</span> root;<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(root.val&lt;key)&#123;<br>            root.right = traverse(root.right, key);<br>            <span class="hljs-keyword">return</span> root;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">if</span>(root.left!=<span class="hljs-keyword">null</span> &amp;&amp; root.right!=<span class="hljs-keyword">null</span>)&#123;<br>                TreeNode small = root.right;<br>                <span class="hljs-keyword">while</span>(small.left!=<span class="hljs-keyword">null</span>)&#123;<br>                    small = small.left;<br>                &#125;<br>                root.right = traverse(root.right, small.val);<br>                small.left = root.left;<br>                small.right = root.right;<br>                <span class="hljs-keyword">return</span> small;<br><br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-keyword">if</span>(root.left==<span class="hljs-keyword">null</span>)&#123;<br>                    <span class="hljs-keyword">return</span> root.right;<br>                &#125;<br>                <span class="hljs-keyword">return</span> root.left;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="701-二叉搜索树中的插入操作"><a href="#701-二叉搜索树中的插入操作" class="headerlink" title="701. 二叉搜索树中的插入操作"></a><a href="https://leetcode-cn.com/problems/insert-into-a-binary-search-tree/">701. 二叉搜索树中的插入操作</a></h3><blockquote><p>给定二叉搜索树（BST）的根节点和要插入树中的值，将值插入二叉搜索树。 返回插入后二叉搜索树的根节点。 输入数据 保证 ，新值和原始二叉搜索树中的任意节点值都不同。</p><p>注意，可能存在多种有效的插入方式，只要树在插入后仍保持为二叉搜索树即可。 你可以返回 任意有效的结果 。</p><p>提示：</p><ul><li>给定的树上的节点数介于 0 和 10^4 之间</li><li>每个节点都有一个唯一整数值，取值范围从 0 到 10^8</li><li>-10^8 &lt;= val &lt;= 10^8</li><li>新值和原始二叉搜索树中的任意节点值都不同</li></ul></blockquote><h5 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h5><p>因为不必保持平衡性，所以可以一直遍历到空节点，插入即可</p><h5 id="注意点-1"><a href="#注意点-1" class="headerlink" title="注意点"></a>注意点</h5><p>应该木有</p><h5 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h5><p>（1）while找尾结点</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for a binary tree node.</span><br><span class="hljs-comment"> * public class TreeNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     TreeNode left;</span><br><span class="hljs-comment"> *     TreeNode right;</span><br><span class="hljs-comment"> *     TreeNode() &#123;&#125;</span><br><span class="hljs-comment"> *     TreeNode(int val) &#123; this.val = val; &#125;</span><br><span class="hljs-comment"> *     TreeNode(int val, TreeNode left, TreeNode right) &#123;</span><br><span class="hljs-comment"> *         this.val = val;</span><br><span class="hljs-comment"> *         this.left = left;</span><br><span class="hljs-comment"> *         this.right = right;</span><br><span class="hljs-comment"> *     &#125;</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> TreeNode <span class="hljs-title">insertIntoBST</span><span class="hljs-params">(TreeNode root, <span class="hljs-keyword">int</span> val)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> traverse(root, val);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> TreeNode <span class="hljs-title">traverse</span><span class="hljs-params">(TreeNode root, <span class="hljs-keyword">int</span> val)</span></span>&#123;<br>        <span class="hljs-keyword">if</span>(root==<span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> TreeNode(val);<br>        &#125;<br>        <span class="hljs-keyword">if</span>(root.val&lt;val)&#123;<br>            root.right = traverse(root.right, val);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            root.left = traverse(root.left, val);<br>        &#125;<br>        <span class="hljs-keyword">return</span> root;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="700-二叉搜索树中的搜索"><a href="#700-二叉搜索树中的搜索" class="headerlink" title="700. 二叉搜索树中的搜索"></a><a href="https://leetcode-cn.com/problems/search-in-a-binary-search-tree/">700. 二叉搜索树中的搜索</a></h3><blockquote><p>给定二叉搜索树（BST）的根节点和一个值。 你需要在BST中找到节点值等于给定值的节点。 返回以该节点为根的子树。 如果节点不存在，则返回 NULL。</p></blockquote><h5 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h5><p>慢慢遍历即可</p><h5 id="注意点-2"><a href="#注意点-2" class="headerlink" title="注意点"></a>注意点</h5><p>木有</p><h5 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for a binary tree node.</span><br><span class="hljs-comment"> * public class TreeNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     TreeNode left;</span><br><span class="hljs-comment"> *     TreeNode right;</span><br><span class="hljs-comment"> *     TreeNode() &#123;&#125;</span><br><span class="hljs-comment"> *     TreeNode(int val) &#123; this.val = val; &#125;</span><br><span class="hljs-comment"> *     TreeNode(int val, TreeNode left, TreeNode right) &#123;</span><br><span class="hljs-comment"> *         this.val = val;</span><br><span class="hljs-comment"> *         this.left = left;</span><br><span class="hljs-comment"> *         this.right = right;</span><br><span class="hljs-comment"> *     &#125;</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> TreeNode <span class="hljs-title">searchBST</span><span class="hljs-params">(TreeNode root, <span class="hljs-keyword">int</span> val)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span>(root==<span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(root.val&lt;val)&#123;<br>            <span class="hljs-keyword">return</span> searchBST(root.right, val);<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(root.val&gt;val)&#123;<br>            <span class="hljs-keyword">return</span> searchBST(root.left, val);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">return</span> root;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="98-验证二叉搜索树"><a href="#98-验证二叉搜索树" class="headerlink" title="98. 验证二叉搜索树"></a><a href="https://leetcode-cn.com/problems/validate-binary-search-tree/">98. 验证二叉搜索树</a></h3><blockquote><p>给定二叉搜索树（BST）的根节点和一个值。 你需要在BST中找到节点值等于给定值的节点。 返回以该节点为根的子树。 如果节点不存在，则返回 NULL。</p></blockquote><h5 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h5><p>对于子树，要传递3样信息：</p><ul><li>是否为二叉搜索树</li><li>二叉搜索树的最大值</li><li>二叉搜索树的最小值</li></ul><p>可以自上而下，也可以自下而上</p><h5 id="注意点-3"><a href="#注意点-3" class="headerlink" title="注意点"></a>注意点</h5><p>如果自下而上的话，因为题目中的数值可能出现Integer.MAX_VALUE，所以对于空树置最小值为Integer.MAX_VALUE并不保险，还是老老实实用TreeNode 或者Integer类型的null来分类讨论</p><h5 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h5><p>（1）自下而上</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for a binary tree node.</span><br><span class="hljs-comment"> * public class TreeNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     TreeNode left;</span><br><span class="hljs-comment"> *     TreeNode right;</span><br><span class="hljs-comment"> *     TreeNode() &#123;&#125;</span><br><span class="hljs-comment"> *     TreeNode(int val) &#123; this.val = val; &#125;</span><br><span class="hljs-comment"> *     TreeNode(int val, TreeNode left, TreeNode right) &#123;</span><br><span class="hljs-comment"> *         this.val = val;</span><br><span class="hljs-comment"> *         this.left = left;</span><br><span class="hljs-comment"> *         this.right = right;</span><br><span class="hljs-comment"> *     &#125;</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isValidBST</span><span class="hljs-params">(TreeNode root)</span> </span>&#123;<br>        Integer[] res = traverse(root);<br>        <span class="hljs-keyword">return</span> res[<span class="hljs-number">0</span>]==<span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> Integer[] traverse(TreeNode root)&#123;<br>        <span class="hljs-keyword">if</span>(root==<span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Integer[]&#123;<span class="hljs-number">1</span>, <span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>&#125;;<br>        &#125;<br>        Integer[] l = traverse(root.left);<br>        Integer[] r = traverse(root.right);<br>        <span class="hljs-keyword">if</span>(l[<span class="hljs-number">0</span>]==<span class="hljs-number">0</span> || r[<span class="hljs-number">0</span>]==<span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Integer[]&#123;<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>&#125;;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(l[<span class="hljs-number">2</span>]!=<span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">if</span>(l[<span class="hljs-number">2</span>]&gt;=root.val)&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Integer[]&#123;<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>&#125;;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(r[<span class="hljs-number">1</span>]!=<span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">if</span>(r[<span class="hljs-number">1</span>]&lt;=root.val)&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Integer[]&#123;<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>&#125;;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Integer[]&#123;<span class="hljs-number">1</span>, l[<span class="hljs-number">1</span>]==<span class="hljs-keyword">null</span>?root.val:l[<span class="hljs-number">1</span>], r[<span class="hljs-number">2</span>]==<span class="hljs-keyword">null</span>?root.val:r[<span class="hljs-number">2</span>]&#125;;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>（2）自上而下+TreeNode版本</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for a binary tree node.</span><br><span class="hljs-comment"> * public class TreeNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     TreeNode left;</span><br><span class="hljs-comment"> *     TreeNode right;</span><br><span class="hljs-comment"> *     TreeNode() &#123;&#125;</span><br><span class="hljs-comment"> *     TreeNode(int val) &#123; this.val = val; &#125;</span><br><span class="hljs-comment"> *     TreeNode(int val, TreeNode left, TreeNode right) &#123;</span><br><span class="hljs-comment"> *         this.val = val;</span><br><span class="hljs-comment"> *         this.left = left;</span><br><span class="hljs-comment"> *         this.right = right;</span><br><span class="hljs-comment"> *     &#125;</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isValidBST</span><span class="hljs-params">(TreeNode root)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> traverse(root, <span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">traverse</span><span class="hljs-params">(TreeNode root, TreeNode min, TreeNode max)</span></span>&#123;<br>        <span class="hljs-keyword">if</span>(root==<span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(min!=<span class="hljs-keyword">null</span> &amp;&amp; root.val&lt;=min.val)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(max!=<span class="hljs-keyword">null</span> &amp;&amp; root.val&gt;=max.val)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> traverse(root.left, min, root) &amp;&amp; traverse(root.right, root, max);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>（3）自上而下+Integer版本</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for a binary tree node.</span><br><span class="hljs-comment"> * public class TreeNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     TreeNode left;</span><br><span class="hljs-comment"> *     TreeNode right;</span><br><span class="hljs-comment"> *     TreeNode() &#123;&#125;</span><br><span class="hljs-comment"> *     TreeNode(int val) &#123; this.val = val; &#125;</span><br><span class="hljs-comment"> *     TreeNode(int val, TreeNode left, TreeNode right) &#123;</span><br><span class="hljs-comment"> *         this.val = val;</span><br><span class="hljs-comment"> *         this.left = left;</span><br><span class="hljs-comment"> *         this.right = right;</span><br><span class="hljs-comment"> *     &#125;</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isValidBST</span><span class="hljs-params">(TreeNode root)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> traverse(root, <span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">traverse</span><span class="hljs-params">(TreeNode root, Integer min, Integer max)</span></span>&#123;<br>        <span class="hljs-keyword">if</span>(root==<span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(min!=<span class="hljs-keyword">null</span> &amp;&amp; root.val&lt;=min)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(max!=<span class="hljs-keyword">null</span> &amp;&amp; root.val&gt;=max)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> traverse(root.left, min, root.val) &amp;&amp; traverse(root.right, root.val, max);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>21天挑战第11天，肚子继续疼，沙哥我继续忍~~</p><h2 id="渡何处"><a href="#渡何处" class="headerlink" title="渡何处"></a>渡何处</h2><blockquote><p><a href="https://www.bilibili.com/video/BV1om4y1X7Cx">梁永安《脱单为何那么难？恋爱到底怎么谈？【梁永安爱情问答】》</a></p><p>高质量的孤独，是意识到自己的唯一性，自己的特别性</p></blockquote><p>这句话的情境是在讨论 “我们可不可以一辈子不结婚” 这个话题下讲的，梁老师举了很多名人不结婚的例子，来说明没有婚姻是可以用兴趣来作为一生的依靠（甚至可以说，如果只把婚姻来当做对抗孤独的武器，那肯定是无法得到理想中的婚姻的），进而提及了高质量的孤独。希望自己也能慢慢达到那个境界吧，在自己有了足够坚定的心之所向时，便不惧怕任何世俗所要求的东西了</p>]]></content>
    
    
    <categories>
      
      <category>程序缘的内功修炼</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>labuladong</tag>
      
      <tag>二叉搜索树</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【冲】labuladong的21天算法挑战Day10_二叉树算法入门</title>
    <link href="/2022/01/14/2022-01-14-labuladong%E7%9A%8421%E5%A4%A9%E7%AE%97%E6%B3%95%E6%8C%91%E6%88%98Day10_%E4%BA%8C%E5%8F%89%E6%A0%91%E7%AE%97%E6%B3%95%E5%85%A5%E9%97%A8/"/>
    <url>/2022/01/14/2022-01-14-labuladong%E7%9A%8421%E5%A4%A9%E7%AE%97%E6%B3%95%E6%8C%91%E6%88%98Day10_%E4%BA%8C%E5%8F%89%E6%A0%91%E7%AE%97%E6%B3%95%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<p>东哥的21天算法挑战，第10天，rua！</p><h1 id="Day10：二叉树算法入门"><a href="#Day10：二叉树算法入门" class="headerlink" title="Day10：二叉树算法入门"></a>Day10：二叉树算法入门</h1><p>打卡地：<a href="https://github.com/labuladong/challenge/issues/35">东哥 Github</a></p><p>专题详解内容：<a href="https://labuladong.gitee.io/plugin-v3/?qno=116&target=gitee">二叉树算法入门</a></p><h3 id="226-翻转二叉树"><a href="#226-翻转二叉树" class="headerlink" title="226. 翻转二叉树"></a><a href="https://leetcode-cn.com/problems/invert-binary-tree/">226. 翻转二叉树</a></h3><blockquote><p>翻转一棵二叉树。</p></blockquote><h5 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h5><p>正常操作即可</p><h5 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h5><p>要单独用变量表示root.left或者root.right，类似交换两个变量的值</p><h5 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for a binary tree node.</span><br><span class="hljs-comment"> * public class TreeNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     TreeNode left;</span><br><span class="hljs-comment"> *     TreeNode right;</span><br><span class="hljs-comment"> *     TreeNode() &#123;&#125;</span><br><span class="hljs-comment"> *     TreeNode(int val) &#123; this.val = val; &#125;</span><br><span class="hljs-comment"> *     TreeNode(int val, TreeNode left, TreeNode right) &#123;</span><br><span class="hljs-comment"> *         this.val = val;</span><br><span class="hljs-comment"> *         this.left = left;</span><br><span class="hljs-comment"> *         this.right = right;</span><br><span class="hljs-comment"> *     &#125;</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> TreeNode <span class="hljs-title">invertTree</span><span class="hljs-params">(TreeNode root)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> traverse(root);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> TreeNode <span class="hljs-title">traverse</span><span class="hljs-params">(TreeNode root)</span></span>&#123;<br>        <span class="hljs-keyword">if</span>(root==<span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        &#125;<br>        TreeNode l = traverse(root.left);<br>        TreeNode r = traverse(root.right);<br>        root.left = r;<br>        root.right = l;<br>        <span class="hljs-keyword">return</span> root;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="114-二叉树展开为链表"><a href="#114-二叉树展开为链表" class="headerlink" title="114. 二叉树展开为链表"></a><a href="https://leetcode-cn.com/problems/flatten-binary-tree-to-linked-list/">114. 二叉树展开为链表</a></h3><blockquote><p>给你二叉树的根结点 root ，请你将它展开为一个单链表：</p><ul><li>展开后的单链表应该同样使用 TreeNode ，其中 right 子指针指向链表中下一个结点，而左子指针始终为 null 。</li><li>展开后的单链表应该与二叉树 先序遍历 顺序相同。</li></ul><p><strong>提示：</strong></p><ul><li>树中结点数在范围 <code>[0, 2000]</code> 内</li><li><code>-100 &lt;= Node.val &lt;= 100</code></li></ul></blockquote><h5 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h5><p>对于左子树的尾结点，用while找即可，也可以在traverse里返回两者，但逻辑处理有点复杂，看需求</p><h5 id="注意点-1"><a href="#注意点-1" class="headerlink" title="注意点"></a>注意点</h5><p>当左节点为空时，啥操作不用做即可，不要多此一举（血的教训233）</p><h5 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h5><p>（1）while找尾结点</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for a binary tree node.</span><br><span class="hljs-comment"> * public class TreeNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     TreeNode left;</span><br><span class="hljs-comment"> *     TreeNode right;</span><br><span class="hljs-comment"> *     TreeNode() &#123;&#125;</span><br><span class="hljs-comment"> *     TreeNode(int val) &#123; this.val = val; &#125;</span><br><span class="hljs-comment"> *     TreeNode(int val, TreeNode left, TreeNode right) &#123;</span><br><span class="hljs-comment"> *         this.val = val;</span><br><span class="hljs-comment"> *         this.left = left;</span><br><span class="hljs-comment"> *         this.right = right;</span><br><span class="hljs-comment"> *     &#125;</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">flatten</span><span class="hljs-params">(TreeNode root)</span> </span>&#123;<br>        traverse(root);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> TreeNode <span class="hljs-title">traverse</span><span class="hljs-params">(TreeNode root)</span></span>&#123;<br>        <span class="hljs-keyword">if</span>(root==<span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        &#125;<br><br>        TreeNode l = traverse(root.left);<br>        TreeNode r = traverse(root.right);<br>        <br>        TreeNode last = root.left;<br>        <span class="hljs-keyword">if</span>(last!=<span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">while</span>(last.right!=<span class="hljs-keyword">null</span>)&#123;<br>                last = last.right;<br>            &#125;<br>            root.left = <span class="hljs-keyword">null</span>;<br>            root.right = l;<br>            last.right = r;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> root;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>（2）traverse里返回首尾两节点</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for a binary tree node.</span><br><span class="hljs-comment"> * public class TreeNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     TreeNode left;</span><br><span class="hljs-comment"> *     TreeNode right;</span><br><span class="hljs-comment"> *     TreeNode() &#123;&#125;</span><br><span class="hljs-comment"> *     TreeNode(int val) &#123; this.val = val; &#125;</span><br><span class="hljs-comment"> *     TreeNode(int val, TreeNode left, TreeNode right) &#123;</span><br><span class="hljs-comment"> *         this.val = val;</span><br><span class="hljs-comment"> *         this.left = left;</span><br><span class="hljs-comment"> *         this.right = right;</span><br><span class="hljs-comment"> *     &#125;</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">flatten</span><span class="hljs-params">(TreeNode root)</span> </span>&#123;<br>        traverse(root);<br>    &#125;<br>    <span class="hljs-keyword">public</span> TreeNode[] traverse(TreeNode root)&#123;<br>        <span class="hljs-keyword">if</span>(root==<span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> TreeNode[]&#123;<span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>&#125;;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(root.left==<span class="hljs-keyword">null</span> &amp;&amp; root.right==<span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> TreeNode[]&#123;root, root&#125;;<br>        &#125;<br>        TreeNode[] l = traverse(root.left);<br>        TreeNode[] r = traverse(root.right);<br>        <br>        <span class="hljs-keyword">if</span>(l[<span class="hljs-number">1</span>]!=<span class="hljs-keyword">null</span>)&#123;<br>            root.left = <span class="hljs-keyword">null</span>;<br>            root.right = l[<span class="hljs-number">0</span>];<br>            l[<span class="hljs-number">1</span>].right = r[<span class="hljs-number">0</span>];<br>        &#125;<br>        <br>        <br>        <span class="hljs-keyword">if</span>(r[<span class="hljs-number">1</span>]!=<span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> TreeNode[]&#123;root, r[<span class="hljs-number">1</span>]&#125;;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(l[<span class="hljs-number">1</span>]!=<span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> TreeNode[]&#123;root, l[<span class="hljs-number">1</span>]&#125;;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> TreeNode[]&#123;root, root&#125;;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="116-填充每个节点的下一个右侧节点指针"><a href="#116-填充每个节点的下一个右侧节点指针" class="headerlink" title="116. 填充每个节点的下一个右侧节点指针"></a><a href="https://leetcode-cn.com/problems/populating-next-right-pointers-in-each-node/">116. 填充每个节点的下一个右侧节点指针</a></h3><blockquote><p>给定一个 完美二叉树 ，其所有叶子节点都在同一层，每个父节点都有两个子节点。二叉树定义如下：</p><p>struct Node {<br>  int val;<br>  Node *left;<br>  Node *right;<br>  Node *next;<br>}<br>填充它的每个 next 指针，让这个指针指向其下一个右侧节点。如果找不到下一个右侧节点，则将 next 指针设置为 NULL。</p><p>初始状态下，所有 next 指针都被设置为 NULL。</p><p>进阶：</p><ul><li><p>你只能使用常量级额外空间。</p></li><li><p>使用递归解题也符合要求，本题中递归程序占用的栈空间不算做额外的空间复杂度。</p></li></ul><p><strong>提示：</strong></p><ul><li>树中节点的数量少于 <code>4096</code></li><li><code>-1000 &lt;= node.val &lt;= 1000</code></li></ul></blockquote><h5 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h5><p>找到左子树的最右侧节点和右子树的最左侧节点，连接即可</p><h5 id="注意点-2"><a href="#注意点-2" class="headerlink" title="注意点"></a>注意点</h5><p>木有</p><h5 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">// Definition for a Node.</span><br><span class="hljs-comment">class Node &#123;</span><br><span class="hljs-comment">    public int val;</span><br><span class="hljs-comment">    public Node left;</span><br><span class="hljs-comment">    public Node right;</span><br><span class="hljs-comment">    public Node next;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    public Node() &#123;&#125;</span><br><span class="hljs-comment">    </span><br><span class="hljs-comment">    public Node(int _val) &#123;</span><br><span class="hljs-comment">        val = _val;</span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    public Node(int _val, Node _left, Node _right, Node _next) &#123;</span><br><span class="hljs-comment">        val = _val;</span><br><span class="hljs-comment">        left = _left;</span><br><span class="hljs-comment">        right = _right;</span><br><span class="hljs-comment">        next = _next;</span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment">&#125;;</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Node <span class="hljs-title">connect</span><span class="hljs-params">(Node root)</span> </span>&#123;<br>        traverse(root);<br>        <span class="hljs-keyword">return</span> root;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">traverse</span><span class="hljs-params">(Node root)</span></span>&#123;<br>        <span class="hljs-keyword">if</span>(root==<span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        traverse(root.left);<br>        traverse(root.right);<br>        Node l = root.left;<br>        Node r = root.right;<br>        <span class="hljs-keyword">while</span>(l!=<span class="hljs-keyword">null</span>)&#123;<br>            l.next = r;<br>            l = l.right;<br>            r = r.left;<br>        &#125;<br>        <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>21天挑战第10天，肚子疼，很难受，隐忍~~</p><h2 id="渡何处"><a href="#渡何处" class="headerlink" title="渡何处"></a>渡何处</h2><blockquote><p>洛莉·摩尔</p><p>好比浣熊进了你家的烟囱，着了火，横冲直撞掉落在客厅里，浑身烧焦，带着火苗疯狂地到处乱窜，直到一命呜呼，恋爱就像那样，全都如此</p></blockquote><p>很西式的比喻，很有情绪力量</p>]]></content>
    
    
    <categories>
      
      <category>程序缘的内功修炼</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>labuladong</tag>
      
      <tag>LRU</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【冲】labuladong的21天算法挑战Day9_LRU算法设计</title>
    <link href="/2022/01/13/2022-01-13-labuladong%E7%9A%8421%E5%A4%A9%E7%AE%97%E6%B3%95%E6%8C%91%E6%88%98Day9_LRU%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1/"/>
    <url>/2022/01/13/2022-01-13-labuladong%E7%9A%8421%E5%A4%A9%E7%AE%97%E6%B3%95%E6%8C%91%E6%88%98Day9_LRU%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1/</url>
    
    <content type="html"><![CDATA[<p>东哥的21天算法挑战，第9天，嗷呜！</p><h1 id="Day9：LRU算法设计"><a href="#Day9：LRU算法设计" class="headerlink" title="Day9：LRU算法设计"></a>Day9：LRU算法设计</h1><p>打卡地：<a href="https://github.com/labuladong/challenge/issues/34">东哥 Github</a></p><p>专题详解内容：<a href="https://labuladong.gitee.io/algo/2/20/45/">如何在数组中以 O(1) 删除元素</a></p><h3 id="146-LRU-缓存"><a href="#146-LRU-缓存" class="headerlink" title="146. LRU 缓存"></a><a href="https://leetcode-cn.com/problems/lru-cache/">146. LRU 缓存</a></h3><blockquote><p>请你设计并实现一个满足  LRU (最近最少使用) 缓存 约束的数据结构。<br>实现 LRUCache 类：</p><ul><li>LRUCache(int capacity) 以 正整数 作为容量 capacity 初始化 LRU 缓存</li><li>int get(int key) 如果关键字 key 存在于缓存中，则返回关键字的值，否则返回 -1 。</li><li>void put(int key, int value) 如果关键字 key 已经存在，则变更其数据值 value ；如果不存在，则向缓存中插入该组 key-value 。如果插入操作导致关键字数量超过 capacity ，则应该 逐出 最久未使用的关键字。</li></ul><p>函数 get 和 put 必须以 O(1) 的平均时间复杂度运行。</p><p>提示：</p><ul><li>1 &lt;= capacity &lt;= 3000</li><li>0 &lt;= key &lt;= 10000</li><li>0 &lt;= value &lt;= 105</li><li>最多调用 2 * 105 次 get 和 put</li></ul></blockquote><h5 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h5><ol><li>因为要删除最久未使用的元素，所以必然需要有时序关系;</li><li>又因为O(1)时间删除头节点元素，所以只能用链表而非数组；</li><li>因为每次使用要更新当前元素，即涉及到删除指定的元素，所以需要双向链表（找到前驱节点再删除）；</li><li>因为要 O(1) 时间找到元素，所以需要HashMap记录Key和链表节点的对应关系信息；</li></ol><h5 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h5><ol><li>因为HashMap删除元素只能通过key，所以在从链表得到头结点时，头结点中需要额外加入key值，而不能只有val</li><li>LinkedHashMap除了Map所具有的各种函数，可以通过keySet().iterator().next()来获得头结点</li></ol><h5 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h5><p>（1）自己构造：双向链表+HashMap</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LRUCache</span> </span>&#123;<br><br>    <span class="hljs-keyword">public</span> DoubleLinkedList l;<br>    <span class="hljs-keyword">public</span> HashMap&lt;Integer, Node&gt; m;<br>    <span class="hljs-keyword">int</span> cap;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">LRUCache</span><span class="hljs-params">(<span class="hljs-keyword">int</span> capacity)</span> </span>&#123;<br>        l = <span class="hljs-keyword">new</span> DoubleLinkedList();<br>        m = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>        cap = capacity;<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">get</span><span class="hljs-params">(<span class="hljs-keyword">int</span> key)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span>(!m.containsKey(key))&#123;<br>            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>        &#125;<br>        makeRecently(key);<br>        <span class="hljs-keyword">return</span> m.get(key).val;<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">put</span><span class="hljs-params">(<span class="hljs-keyword">int</span> key, <span class="hljs-keyword">int</span> value)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span>(m.containsKey(key))&#123;<br>            deleteKey(key);<br>            addRecently(key, value);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">if</span>(cap&lt;=m.size())&#123;<br>                removeLeastUsed();<br>            &#125;<br>            addRecently(key, value);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">makeRecently</span><span class="hljs-params">(<span class="hljs-keyword">int</span> key)</span></span>&#123;<br>        Node n = m.get(key);<br>        l.remove(n);<br>        l.addLast(n);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addRecently</span><span class="hljs-params">(<span class="hljs-keyword">int</span> key, <span class="hljs-keyword">int</span> val)</span></span>&#123;<br>        Node n = <span class="hljs-keyword">new</span> Node(key, val);<br>        m.put(key, n);<br>        l.addLast(n);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">deleteKey</span><span class="hljs-params">(<span class="hljs-keyword">int</span> key)</span></span>&#123;<br>        Node n = m.get(key);<br>        m.remove(key);<br>        l.remove(n);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">removeLeastUsed</span><span class="hljs-params">()</span></span>&#123;<br>        Node n = l.removeFirst();<br>        <span class="hljs-keyword">int</span> key = n.key;<br>        m.remove(key);<br>    &#125;<br><br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Your LRUCache object will be instantiated and called as such:</span><br><span class="hljs-comment"> * LRUCache obj = new LRUCache(capacity);</span><br><span class="hljs-comment"> * int param_1 = obj.get(key);</span><br><span class="hljs-comment"> * obj.put(key,value);</span><br><span class="hljs-comment"> */</span><br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Node</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> key;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> val;<br>    Node pre;<br>    Node next;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Node</span><span class="hljs-params">(<span class="hljs-keyword">int</span> key, <span class="hljs-keyword">int</span> val)</span></span>&#123;<br>        <span class="hljs-keyword">this</span>.key = key;<br>        <span class="hljs-keyword">this</span>.val = val;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DoubleLinkedList</span></span>&#123;<br><br>    Node head;<br>    Node tail;<br>    <span class="hljs-keyword">int</span> size;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">DoubleLinkedList</span><span class="hljs-params">()</span></span>&#123;<br>        head = <span class="hljs-keyword">new</span> Node(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>        tail = <span class="hljs-keyword">new</span> Node(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>        head.next = tail;<br>        tail.pre = head;<br>        size = <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addLast</span><span class="hljs-params">(Node x)</span></span>&#123;<br>        x.next = tail;<br>        x.pre = tail.pre;<br>        tail.pre.next = x;<br>        tail.pre = x;<br>        size++;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">remove</span><span class="hljs-params">(Node x)</span></span>&#123;<br>        x.pre.next = x.next;<br>        x.next.pre = x.pre;<br>        size--;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Node <span class="hljs-title">removeFirst</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">if</span>(head.next==tail)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        &#125;<br>        Node first = head.next;<br>        remove(first);<br>        <span class="hljs-comment">// size--;</span><br>        <span class="hljs-keyword">return</span> first;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">size</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> size;<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p>（2）Java自带的LinkedHashMap</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LRUCache</span> </span>&#123;<br><br>    LinkedHashMap&lt;Integer, Integer&gt; m;<br>    <span class="hljs-keyword">int</span> cap;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">LRUCache</span><span class="hljs-params">(<span class="hljs-keyword">int</span> capacity)</span> </span>&#123;<br>        cap = capacity;<br>        m = <span class="hljs-keyword">new</span> LinkedHashMap&lt;&gt;();<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">get</span><span class="hljs-params">(<span class="hljs-keyword">int</span> key)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span>(!m.containsKey(key))&#123;<br>            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>        &#125;<br>        makeRecently(key);<br>        <span class="hljs-keyword">return</span> m.get(key);<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">put</span><span class="hljs-params">(<span class="hljs-keyword">int</span> key, <span class="hljs-keyword">int</span> value)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span>(m.containsKey(key))&#123;<br>            m.put(key, value);<br>            makeRecently(key);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">if</span>(cap&lt;=m.size())&#123;<br>                <span class="hljs-keyword">int</span> old = m.keySet().iterator().next();<br>                m.remove(old);<br>            &#125;<br>            m.put(key, value);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">makeRecently</span><span class="hljs-params">(<span class="hljs-keyword">int</span> key)</span></span>&#123;<br>        <span class="hljs-keyword">int</span> val = m.remove(key);<br>        m.put(key, val);<br>    &#125;<br><br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Your LRUCache object will be instantiated and called as such:</span><br><span class="hljs-comment"> * LRUCache obj = new LRUCache(capacity);</span><br><span class="hljs-comment"> * int param_1 = obj.get(key);</span><br><span class="hljs-comment"> * obj.put(key,value);</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></table></figure><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>21天挑战第9天，今天因为采访一个选调生，所以搞得有点晚，苟住</p><h2 id="渡何处"><a href="#渡何处" class="headerlink" title="渡何处"></a>渡何处</h2><blockquote><p><a href="https://www.bilibili.com/video/BV1Rb4y1e7s4">王中左右《如果王家卫拍火影忍者》</a></p><p>世事无常，那么爱吃甜食的人，最终吃了一辈子的苦</p></blockquote><p>听听妙语，放松下身心</p>]]></content>
    
    
    <categories>
      
      <category>程序缘的内功修炼</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>labuladong</tag>
      
      <tag>LRU</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【冲】labuladong的21天算法挑战Day8_O1时间返回数组元素</title>
    <link href="/2022/01/12/2022-01-12-labuladong%E7%9A%8421%E5%A4%A9%E7%AE%97%E6%B3%95%E6%8C%91%E6%88%98Day8_O1%E6%97%B6%E9%97%B4%E8%BF%94%E5%9B%9E%E6%95%B0%E7%BB%84%E5%85%83%E7%B4%A0/"/>
    <url>/2022/01/12/2022-01-12-labuladong%E7%9A%8421%E5%A4%A9%E7%AE%97%E6%B3%95%E6%8C%91%E6%88%98Day8_O1%E6%97%B6%E9%97%B4%E8%BF%94%E5%9B%9E%E6%95%B0%E7%BB%84%E5%85%83%E7%B4%A0/</url>
    
    <content type="html"><![CDATA[<p>东哥的21天算法挑战，第8天，狗！</p><h1 id="Day8：O-1-时间返回数组元素"><a href="#Day8：O-1-时间返回数组元素" class="headerlink" title="Day8：O(1)时间返回数组元素"></a>Day8：O(1)时间返回数组元素</h1><p>打卡地：<a href="https://github.com/labuladong/challenge/issues/33">东哥 Github</a></p><p>专题详解内容：<a href="https://labuladong.gitee.io/algo/2/20/61/">如何在数组中以 O(1) 删除元素</a></p><h3 id="380-O-1-时间插入、删除和获取随机元素"><a href="#380-O-1-时间插入、删除和获取随机元素" class="headerlink" title="380. O(1) 时间插入、删除和获取随机元素"></a><a href="https://leetcode-cn.com/problems/insert-delete-getrandom-o1/">380. O(1) 时间插入、删除和获取随机元素</a></h3><blockquote><p>实现RandomizedSet 类：</p><ul><li>RandomizedSet() 初始化 RandomizedSet 对象</li><li>bool insert(int val) 当元素 val 不存在时，向集合中插入该项，并返回 true ；否则，返回 false 。</li><li>bool remove(int val) 当元素 val 存在时，从集合中移除该项，并返回 true ；否则，返回 false 。</li><li>int getRandom() 随机返回现有集合中的一项（测试用例保证调用此方法时集合中至少存在一个元素）。每个元素应该有 相同的概率 被返回。<br>你必须实现类的所有函数，并满足每个函数的 平均 时间复杂度为 O(1) </li></ul><p>提示：</p><ul><li>-231 &lt;= val &lt;= 231 - 1</li><li>最多调用 insert、remove 和 getRandom 函数 2 * 105 次</li><li>在调用 getRandom 方法时，数据结构中 至少存在一个 元素。</li></ul></blockquote><h5 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h5><ol><li>因为需要O(1)时间返回集合中的一项，所以必然是数组（利用下表）</li><li>因为需要O(1)时间插入元素，必然是动态数组+插在尾部</li><li>因为需要O(1)时间删除元素，只能将要删除元素交换至尾部删除（不然中间删除需要将后面统一前移）</li><li>因为涉及到交换尾部元素，所以得用Map记录值和索引的对应关系</li></ol><h5 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h5><p>删除元素时，除了删除数组里的元素，Map也要记得删除</p><h5 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RandomizedSet</span> </span>&#123;<br>    <span class="hljs-comment">// val -&gt; index</span><br>    HashMap&lt;Integer, Integer&gt; m;<br>    ArrayList&lt;Integer&gt; nums;<br>    Random rd;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">RandomizedSet</span><span class="hljs-params">()</span> </span>&#123;<br>        m = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>        nums = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        rd = <span class="hljs-keyword">new</span> Random();<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-keyword">int</span> val)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span>(m.containsKey(val))&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        &#125;<br>        <br>        m.put(val, nums.size());<br>        nums.add(val);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">remove</span><span class="hljs-params">(<span class="hljs-keyword">int</span> val)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span>(!m.containsKey(val))&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        &#125;<br>        <br>        <span class="hljs-keyword">int</span> index = m.get(val);<br>        <span class="hljs-keyword">int</span> lastVal = nums.get(nums.size()-<span class="hljs-number">1</span>);<br>        m.put(lastVal, index);<br>        nums.set(index, lastVal);<br>        nums.remove(nums.size()-<span class="hljs-number">1</span>);<br>        m.remove(val);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getRandom</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> nums.get(rd.nextInt(nums.size()));<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Your RandomizedSet object will be instantiated and called as such:</span><br><span class="hljs-comment"> * RandomizedSet obj = new RandomizedSet();</span><br><span class="hljs-comment"> * boolean param_1 = obj.insert(val);</span><br><span class="hljs-comment"> * boolean param_2 = obj.remove(val);</span><br><span class="hljs-comment"> * int param_3 = obj.getRandom();</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></table></figure><h3 id="710-黑名单中的随机数"><a href="#710-黑名单中的随机数" class="headerlink" title="710. 黑名单中的随机数"></a><a href="https://leetcode-cn.com/problems/random-pick-with-blacklist/">710. 黑名单中的随机数</a></h3><blockquote><p>给定一个包含 [0，n) 中不重复整数的黑名单 blacklist ，写一个函数从 [0, n) 中返回一个不在 blacklist 中的随机整数。</p><p>对它进行优化使其尽量少调用系统方法 Math.random() 。</p><p>提示:</p><ul><li>1 &lt;= n &lt;= 1000000000</li><li>0 &lt;= blacklist.length &lt; min(100000, N)</li><li>[0, n) 不包含 n ，详细参见 interval notation 。</li></ul></blockquote><h5 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h5><p>因为要少调用random，所以在构造函数里，就要把黑名单的位置映射成白名单的，所以需要添加Map，记录可能抽到的黑名单元素，和白名单元素的对应关系：</p><ol><li><p>定义sz为去除黑名单后的元素数量</p></li><li><p>遍历黑名单的元素</p><ul><li>如果是在[sz, n-1)，就跳过</li><li>如果在[0, sz)，从尾部开始往前找到不在黑名单的元素，Map中加入对应关系</li></ul></li><li><p>调用pick时，如果random出的数在黑名单，就返回Map中的对应元素，否则直接返回就行</p></li></ol><h5 id="注意点-1"><a href="#注意点-1" class="headerlink" title="注意点"></a>注意点</h5><p>先遍历黑名单存到Map里，方便之后判断</p><h5 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <br>    <span class="hljs-keyword">int</span> sz;<br>    HashMap&lt;Integer, Integer&gt; m;<br>    Random rd = <span class="hljs-keyword">new</span> Random();<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Solution</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n, <span class="hljs-keyword">int</span>[] blacklist)</span> </span>&#123;<br>        sz = n-blacklist.length;<br>        m = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>        <br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> tmp : blacklist)&#123;<br>            m.put(tmp, <span class="hljs-number">666</span>);<br>        &#125;<br>        <br>        <span class="hljs-keyword">int</span> last = n-<span class="hljs-number">1</span>;<br>        <br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> tmp : blacklist)&#123;<br>            <span class="hljs-keyword">if</span>(tmp&gt;=sz)&#123;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            <span class="hljs-keyword">while</span>(m.containsKey(last))&#123;<br>                last--;<br>            &#125;<br>            m.put(tmp, last);<br>            last--;<br>        &#125;<br>        <br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">pick</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> cur = rd.nextInt(sz);<br>        <span class="hljs-keyword">if</span>(m.containsKey(cur))&#123;<br>            <span class="hljs-keyword">return</span> m.get(cur);<br>        &#125;<br>        <span class="hljs-keyword">return</span> cur;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Your Solution object will be instantiated and called as such:</span><br><span class="hljs-comment"> * Solution obj = new Solution(n, blacklist);</span><br><span class="hljs-comment"> * int param_1 = obj.pick();</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></table></figure><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>21天挑战第8天，最近因为申实习加了一些群，看到群里的大佬们的履历自惭形秽，情绪有点小波动，得赶紧调整回来</p><h2 id="渡何处"><a href="#渡何处" class="headerlink" title="渡何处"></a>渡何处</h2><blockquote><p>《人与永恒》</p><p>爱情常常把人抽空，留下一具空躯壳，然后扬长而去。所以，聪明人始终对爱情有戒心，三思而后行，甚至于干脆不行</p></blockquote><p>不稳定因素并不为聪明人所喜，相比于相信别人，依靠自己是风险更低的选择，只是过得清苦些罢了</p>]]></content>
    
    
    <categories>
      
      <category>程序缘的内功修炼</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>labuladong</tag>
      
      <tag>O(1)时间</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【冲】labuladong的21天算法挑战Day7_递归翻转链表</title>
    <link href="/2022/01/11/2022-01-11-labuladong%E7%9A%8421%E5%A4%A9%E7%AE%97%E6%B3%95%E6%8C%91%E6%88%98Day7_%E9%80%92%E5%BD%92%E7%BF%BB%E8%BD%AC%E9%93%BE%E8%A1%A8/"/>
    <url>/2022/01/11/2022-01-11-labuladong%E7%9A%8421%E5%A4%A9%E7%AE%97%E6%B3%95%E6%8C%91%E6%88%98Day7_%E9%80%92%E5%BD%92%E7%BF%BB%E8%BD%AC%E9%93%BE%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<p>东哥的21天算法挑战，第7天，忍！</p><h1 id="Day7：二分搜索"><a href="#Day7：二分搜索" class="headerlink" title="Day7：二分搜索"></a>Day7：二分搜索</h1><p>打卡地：<a href="https://github.com/labuladong/challenge/issues/32">东哥 Github</a></p><p>专题详解内容：<a href="https://labuladong.gitee.io/algo/2/16/16/">递归反转链表：如何拆解复杂问题</a></p><h3 id="206-反转链表"><a href="#206-反转链表" class="headerlink" title="206. 反转链表"></a><a href="https://leetcode-cn.com/problems/reverse-linked-list/">206. 反转链表</a></h3><blockquote><p>给你单链表的头节点 <code>head</code> ，请你反转链表，并返回反转后的链表。</p><p><strong>提示：</strong></p><ul><li>链表中节点的数目范围是 <code>[0, 5000]</code></li><li><code>-5000 &lt;= Node.val &lt;= 5000</code></li></ul></blockquote><h5 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h5><p>递归反转链表，几步走：</p><ol><li>调用递归，得到子链表翻转后的头结点 last</li><li>子链表的尾结点 head.next，需要指向 head</li><li>head 要指向null</li></ol><h5 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h5><p>终止条件有两种：head==null || head.next==null</p><h5 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> * public class ListNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     ListNode next;</span><br><span class="hljs-comment"> *     ListNode() &#123;&#125;</span><br><span class="hljs-comment"> *     ListNode(int val) &#123; this.val = val; &#125;</span><br><span class="hljs-comment"> *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title">reverseList</span><span class="hljs-params">(ListNode head)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> traverse(head);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title">traverse</span><span class="hljs-params">(ListNode head)</span></span>&#123;<br>        <span class="hljs-keyword">if</span>(head==<span class="hljs-keyword">null</span> || head.next==<span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">return</span> head;<br>        &#125;<br>        ListNode last = traverse(head.next);<br>        head.next.next = head;<br>        head.next = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">return</span> last;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>另外附迭代方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> * public class ListNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     ListNode next;</span><br><span class="hljs-comment"> *     ListNode() &#123;&#125;</span><br><span class="hljs-comment"> *     ListNode(int val) &#123; this.val = val; &#125;</span><br><span class="hljs-comment"> *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title">reverseList</span><span class="hljs-params">(ListNode head)</span> </span>&#123;<br>        ListNode pre = <span class="hljs-keyword">null</span>;<br>        ListNode cur = head;<br>        ListNode nxt = head;<br>        <span class="hljs-keyword">while</span>(cur!=<span class="hljs-keyword">null</span>)&#123;<br>            nxt = nxt.next;<br>            cur.next = pre;<br>            pre = cur;<br>            cur = nxt;<br>        &#125;<br>        <span class="hljs-keyword">return</span> pre;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="92-反转链表-II"><a href="#92-反转链表-II" class="headerlink" title="92. 反转链表 II"></a><a href="https://leetcode-cn.com/problems/reverse-linked-list-ii/">92. 反转链表 II</a></h3><blockquote><p>给你单链表的头指针 head 和两个整数 left 和 right ，其中 left &lt;= right 。请你反转从位置 left 到位置 right 的链表节点，返回 反转后的链表 。</p><p><strong>提示：</strong></p><ul><li>链表中节点数目为 <code>n</code></li><li><code>1 &lt;= n &lt;= 500</code></li><li><code>-500 &lt;= Node.val &lt;= 500</code></li><li><code>1 &lt;= left &lt;= right &lt;= n</code></li></ul></blockquote><h5 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h5><p>206的加强版，但需要额外记录前驱节点，记录流程如下：</p><ol><li><p>left不为1时，递归 head.next 到 left-1</p></li><li><p>left为1时，递归 head.next，几步走：</p><ul><li><p>终止条件 k==1时，记录前驱节点 successor</p></li><li><p>调用递归，得到子链表翻转后的头结点 last</p></li><li><p>子链表的尾结点 head.next，需要指向 head</p></li><li><p>head 要指向 successor</p></li></ul></li></ol><h5 id="注意点-1"><a href="#注意点-1" class="headerlink" title="注意点"></a>注意点</h5><p>reverseAB里，除了调用reverseAB递归以外，需要另外将head指向子链表</p><blockquote><p>head.next = reverseAB(head.next, left-1, right-1);</p></blockquote><h5 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> * public class ListNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     ListNode next;</span><br><span class="hljs-comment"> *     ListNode() &#123;&#125;</span><br><span class="hljs-comment"> *     ListNode(int val) &#123; this.val = val; &#125;</span><br><span class="hljs-comment"> *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title">reverseBetween</span><span class="hljs-params">(ListNode head, <span class="hljs-keyword">int</span> left, <span class="hljs-keyword">int</span> right)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> reverseAB(head, left, right);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title">reverseAB</span><span class="hljs-params">(ListNode head, <span class="hljs-keyword">int</span> left, <span class="hljs-keyword">int</span> right)</span></span>&#123;<br>        <span class="hljs-keyword">if</span>(left&gt;<span class="hljs-number">1</span>)&#123;<br>            head.next = reverseAB(head.next, left-<span class="hljs-number">1</span>, right-<span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">return</span> head;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">return</span> reverseK(head, right);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> ListNode successor = <span class="hljs-keyword">null</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title">reverseK</span><span class="hljs-params">(ListNode head, <span class="hljs-keyword">int</span> k)</span></span>&#123;<br>        <span class="hljs-keyword">if</span>(k==<span class="hljs-number">1</span>)&#123;<br>            successor = head.next;<br>            <span class="hljs-keyword">return</span> head;<br>        &#125;<br>        ListNode last = reverseK(head.next, k-<span class="hljs-number">1</span>);<br>        head.next.next = head;<br>        head.next = successor;<br>        <span class="hljs-keyword">return</span> last;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>另附迭代方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> * public class ListNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     ListNode next;</span><br><span class="hljs-comment"> *     ListNode() &#123;&#125;</span><br><span class="hljs-comment"> *     ListNode(int val) &#123; this.val = val; &#125;</span><br><span class="hljs-comment"> *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title">reverseBetween</span><span class="hljs-params">(ListNode head, <span class="hljs-keyword">int</span> left, <span class="hljs-keyword">int</span> right)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> reverseAB(head, left, right);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title">reverseAB</span><span class="hljs-params">(ListNode head, <span class="hljs-keyword">int</span> left, <span class="hljs-keyword">int</span> right)</span></span>&#123;<br>        <span class="hljs-keyword">if</span>(left&gt;<span class="hljs-number">1</span>)&#123;<br>            head.next = reverseAB(head.next, left-<span class="hljs-number">1</span>, right-<span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">return</span> head;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">return</span> reverseK(head, right);<br>        &#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title">reverseK</span><span class="hljs-params">(ListNode head, <span class="hljs-keyword">int</span> k)</span></span>&#123;<br>        ListNode pre = <span class="hljs-keyword">null</span>;<br>        ListNode cur = head;<br>        ListNode nxt = head;<br>        <span class="hljs-keyword">while</span>(k&gt;<span class="hljs-number">0</span>)&#123;<br>            nxt = nxt.next;<br>            cur.next = pre;<br>            pre = cur;<br>            cur = nxt;<br>            k--;<br>        &#125;<br>        head.next = cur;<br>        <span class="hljs-keyword">return</span> pre;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>21天挑战第7天，加油~~</p><h2 id="渡何处"><a href="#渡何处" class="headerlink" title="渡何处"></a>渡何处</h2><blockquote><p>马塞尔·普鲁斯特《追忆似水流年》</p><p>任何一样东西，当你渴望拥有它，它就盛开。一旦你拥有它，它就凋谢</p></blockquote><p>呜呜呜，呜呜呜</p>]]></content>
    
    
    <categories>
      
      <category>程序缘的内功修炼</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>labuladong</tag>
      
      <tag>链表</tag>
      
      <tag>递归</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【冲】labuladong的21天算法挑战Day6_二分搜索</title>
    <link href="/2022/01/10/2022-01-10-labuladong%E7%9A%8421%E5%A4%A9%E7%AE%97%E6%B3%95%E6%8C%91%E6%88%98Day6_%E4%BA%8C%E5%88%86%E6%90%9C%E7%B4%A2/"/>
    <url>/2022/01/10/2022-01-10-labuladong%E7%9A%8421%E5%A4%A9%E7%AE%97%E6%B3%95%E6%8C%91%E6%88%98Day6_%E4%BA%8C%E5%88%86%E6%90%9C%E7%B4%A2/</url>
    
    <content type="html"><![CDATA[<p>东哥的21天算法挑战，第6天，苟！</p><h1 id="Day6：二分搜索"><a href="#Day6：二分搜索" class="headerlink" title="Day6：二分搜索"></a>Day6：二分搜索</h1><p>打卡地：<a href="https://github.com/labuladong/challenge/issues/31">东哥 Github</a></p><p>专题详解内容：<a href="https://labuladong.gitee.io/algo/1/9/">二分搜索技巧</a></p><h3 id="704-二分查找"><a href="#704-二分查找" class="headerlink" title="704. 二分查找"></a><a href="https://leetcode-cn.com/problems/binary-search/">704. 二分查找</a></h3><blockquote><p>给定一个 n 个元素有序的（升序）整型数组 nums 和一个目标值 target  ，写一个函数搜索 nums 中的 target，如果目标值存在返回下标，否则返回 -1。</p><p><strong>提示：</strong></p><ol><li>你可以假设 <code>nums</code> 中的所有元素是不重复的。</li><li><code>n</code> 将在 <code>[1, 10000]</code>之间。</li><li><code>nums</code> 的每个元素都将在 <code>[-9999, 9999]</code>之间。</li></ol></blockquote><h5 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h5><p>二分搜索的基本用法，暂时自己习惯用下面的风格，就一直沿袭吧：</p><ol><li><p>while(left&lt;=right)，取的是小于等于号</p></li><li><p>每次更新，都是mid+1 / mid-1</p></li><li><p>如果是寻找左右边界，那么在跳出循环之后，要再判断两个例外：</p><blockquote><p>左边界：</p><ul><li>left &gt; nums.length - 1</li><li>nums[left] != target</li></ul><p>右边界：</p><ul><li>right &lt; 0</li><li>nums[right] != target</li></ul></blockquote></li></ol><h5 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h5><p>这道题木有，找得到的话，循环内部return；找不到的话，循环外return</p><h5 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">search</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums, <span class="hljs-keyword">int</span> target)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> n = nums.length;<br>        <span class="hljs-keyword">int</span> left = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> right = n-<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span>(left&lt;=right)&#123;<br>            <span class="hljs-keyword">int</span> mid = left + (right-left)/<span class="hljs-number">2</span>;<br>            <span class="hljs-keyword">if</span>(nums[mid]&gt;target)&#123;<br>                right = mid - <span class="hljs-number">1</span>;<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(nums[mid]&lt;target)&#123;<br>                left = mid + <span class="hljs-number">1</span>;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-keyword">return</span> mid;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="34-在排序数组中查找元素的第一个和最后一个位置"><a href="#34-在排序数组中查找元素的第一个和最后一个位置" class="headerlink" title="34. 在排序数组中查找元素的第一个和最后一个位置"></a><a href="https://leetcode-cn.com/problems/find-first-and-last-position-of-element-in-sorted-array/">34. 在排序数组中查找元素的第一个和最后一个位置</a></h3><blockquote><p>给定一个按照升序排列的整数数组 nums，和一个目标值 target。找出给定目标值在数组中的开始位置和结束位置。</p><p>如果数组中不存在目标值 target，返回 [-1, -1]。</p><p>进阶：</p><ul><li>你可以设计并实现时间复杂度为 O(log n) 的算法解决此问题吗？</li></ul><p>提示：</p><ul><li>0 &lt;= nums.length &lt;= 105</li><li>-109 &lt;= nums[i] &lt;= 109</li><li>nums 是一个非递减数组</li><li>-109 &lt;= target &lt;= 109</li></ul></blockquote><h5 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h5><p>对于二分搜索的所有情况集成，具体而言：</p><ol><li>先找到任意一个目标值，如果没找到，返回[-1, -1]；如果找到了，记录最后一步的left，right，mid</li><li>再从1中的left，right开始，向左找左边界，记录左边界值left1</li><li>再从1中的left，right开始，向右找右边界，记录右边界值right2</li><li>返回left1和right2</li></ol><h5 id="注意点-1"><a href="#注意点-1" class="headerlink" title="注意点"></a>注意点</h5><p>记得先判断第一步能不能找得到任意一个值，找不到的话直接返回</p><h5 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span>[] searchRange(<span class="hljs-keyword">int</span>[] nums, <span class="hljs-keyword">int</span> target) &#123;<br>        <span class="hljs-keyword">int</span> n = nums.length;<br>        <span class="hljs-keyword">int</span> left = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> right = n-<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">int</span> mid = -<span class="hljs-number">1</span>;<br>        <br>        <span class="hljs-keyword">while</span>(left&lt;=right)&#123;<br>            mid = left + (right-left)/<span class="hljs-number">2</span>;<br>            <span class="hljs-keyword">if</span>(nums[mid]&gt;target)&#123;<br>                right = mid - <span class="hljs-number">1</span>;         <br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(nums[mid]&lt;target)&#123;<br>                left = mid + <span class="hljs-number">1</span>;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <br>        <span class="hljs-keyword">if</span>(left&gt;right)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[]&#123;-<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>&#125;;<br>        &#125;<br>        <br>        <span class="hljs-keyword">int</span> left1 = left;<br>        <span class="hljs-keyword">int</span> right1 = right;<br>        <span class="hljs-keyword">int</span> mid1 = -<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span>(left1&lt;=right1)&#123;<br>            mid1 = left1 + (right1-left1)/<span class="hljs-number">2</span>;<br>            <span class="hljs-keyword">if</span>(nums[mid1]&lt;target)&#123;<br>                left1 = mid1 + <span class="hljs-number">1</span>;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                right1 = mid1 - <span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>        <br>        <span class="hljs-keyword">int</span> left2 = left;<br>        <span class="hljs-keyword">int</span> right2 = right;<br>        <span class="hljs-keyword">int</span> mid2 = -<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span>(left2&lt;=right2)&#123;<br>            mid2 = left2 + (right2-left2)/<span class="hljs-number">2</span>;<br>            <span class="hljs-keyword">if</span>(nums[mid2]&gt;target)&#123;<br>                right2 = mid2 - <span class="hljs-number">1</span>;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                left2 = mid2 + <span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>        <br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[]&#123;left1, right2&#125;;<br>               <br>        <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>21天挑战第6天，公司任务可能要多花些时间，但还是抽空把每天任务做掉，加油~~</p><h2 id="渡何处"><a href="#渡何处" class="headerlink" title="渡何处"></a>渡何处</h2><blockquote><p>汉娜 · 阿伦特</p><p>当一个人不可诱惑，不可冒犯，不可动摇的时候，他身上就具备了某些迷人的东西</p></blockquote><p>1、3感觉可行，2感觉分寸感不好把握，可能我段位还不够，不过确实总结得好，很敏锐</p>]]></content>
    
    
    <categories>
      
      <category>程序缘的内功修炼</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>labuladong</tag>
      
      <tag>二分搜索</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【冲】labuladong的21天算法挑战Day5_滑动窗口</title>
    <link href="/2022/01/09/2022-01-09-labuladong%E7%9A%8421%E5%A4%A9%E7%AE%97%E6%B3%95%E6%8C%91%E6%88%98Day5_%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/"/>
    <url>/2022/01/09/2022-01-09-labuladong%E7%9A%8421%E5%A4%A9%E7%AE%97%E6%B3%95%E6%8C%91%E6%88%98Day5_%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/</url>
    
    <content type="html"><![CDATA[<p>东哥的21天算法挑战，第5天，润！</p><h1 id="Day5：二维数组花式遍历技巧"><a href="#Day5：二维数组花式遍历技巧" class="headerlink" title="Day5：二维数组花式遍历技巧"></a>Day5：二维数组花式遍历技巧</h1><p>打卡地：<a href="https://github.com/labuladong/challenge/issues/30">东哥 Github</a></p><p>专题详解内容：<a href="https://mp.weixin.qq.com/s/ioKXTMZufDECBUwRRp3zaA">滑动窗口技巧</a></p><h3 id="76-最小覆盖子串"><a href="#76-最小覆盖子串" class="headerlink" title="76. 最小覆盖子串"></a><a href="https://leetcode-cn.com/problems/minimum-window-substring/">76. 最小覆盖子串</a></h3><blockquote><p>给你一个字符串 s 、一个字符串 t 。返回 s 中涵盖 t 所有字符的最小子串。如果 s 中不存在涵盖 t 所有字符的子串，则返回空字符串 “” 。</p><p>注意：</p><ul><li><p>对于 t 中重复字符，我们寻找的子字符串中该字符数量必须不少于 t 中该字符数量。</p></li><li><p>如果 s 中存在这样的子串，我们保证它是唯一的答案。</p></li></ul><p><strong>提示：</strong></p><ul><li><code>1 &lt;= s.length, t.length &lt;= 105</code></li><li><code>s</code> 和 <code>t</code> 由英文字母组成</li></ul></blockquote><h5 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h5><p>滑动窗口的基本方法，4个要填充的代码块：</p><ol><li>窗口右边界移动的代码</li><li>窗口左边界移动的代码</li><li>右边界移动变成左边界移动的判定条件</li><li>更新答案的代码</li></ol><h5 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h5><p>最小长度minlen，初始化的时候要为取不到的s.length()+1，不然对于“a”+“a”的case会报错</p><h5 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">minWindow</span><span class="hljs-params">(String s, String t)</span> </span>&#123;<br>        HashMap&lt;Character, Integer&gt; need = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>        HashMap&lt;Character, Integer&gt; window = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>        <span class="hljs-keyword">char</span>[] tt = t.toCharArray();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">char</span> tmp : tt)&#123;<br>            need.put(tmp, need.getOrDefault(tmp, <span class="hljs-number">0</span>)+<span class="hljs-number">1</span>);<br>        &#125;<br>        <br>        <span class="hljs-keyword">char</span>[] ss = s.toCharArray();<br>        <span class="hljs-keyword">int</span> n = ss.length;<br>        <span class="hljs-keyword">int</span> left = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> right = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> valid = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> minlen = s.length()+<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">int</span> resl = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> resr = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span>(right&lt;n)&#123;<br>            <span class="hljs-keyword">char</span> cur = ss[right];<br>            <span class="hljs-keyword">if</span>(need.containsKey(cur))&#123;<br>                window.put(cur, window.getOrDefault(cur, <span class="hljs-number">0</span>)+<span class="hljs-number">1</span>);<br>                <span class="hljs-keyword">if</span>(need.get(cur).equals(window.get(cur)))&#123;<br>                    valid++;<br>                &#125;<br>            &#125;<br>            right++;<br>            <br>            <span class="hljs-keyword">while</span>(valid&gt;=need.size())&#123;<br>                <span class="hljs-keyword">if</span>(right-left&lt;minlen)&#123;<br>                    minlen = right - left;<br>                    resl = left;<br>                    resr = right;<br>                &#125;<br>                <br>                cur = ss[left];<br>                <span class="hljs-keyword">if</span>(need.containsKey(cur))&#123;                  <br>                    <span class="hljs-keyword">if</span>(need.get(cur).equals(window.get(cur)))&#123;<br>                        valid--;<br>                    &#125;<br>                    window.put(cur, window.get(cur)-<span class="hljs-number">1</span>);<br>                &#125;<br>                left++;<br>            &#125;       <br>        &#125;<br>        <br>        <span class="hljs-keyword">return</span> (minlen==s.length()+<span class="hljs-number">1</span>)?<span class="hljs-string">&quot;&quot;</span>:s.substring(resl, resr);<br>        <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="567-字符串的排列"><a href="#567-字符串的排列" class="headerlink" title="567. 字符串的排列"></a><a href="https://leetcode-cn.com/problems/permutation-in-string/">567. 字符串的排列</a></h3><blockquote><p>给你两个字符串 s1 和 s2 ，写一个函数来判断 s2 是否包含 s1 的排列。如果是，返回 true ；否则，返回 false 。</p><p>换句话说，s1 的排列之一是 s2 的 子串 </p><p><strong>提示：</strong></p><ul><li><code>1 &lt;= s1.length, s2.length &lt;= 104</code></li><li><code>s1</code> 和 <code>s2</code> 仅包含小写字母</li></ul></blockquote><h5 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h5><p>同76，不过右边界移动变成左边界移动的判定条件可以有多种：</p><ol><li>（同76），窗口内的元素全部包含目标元素</li><li>窗口长度等于目标长度</li></ol><h5 id="注意点-1"><a href="#注意点-1" class="headerlink" title="注意点"></a>注意点</h5><p>判断当前长度和目标长度是否相等时，注意right是++之后的，即right-left就是当前窗口的长度</p><h5 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">checkInclusion</span><span class="hljs-params">(String s1, String s2)</span> </span>&#123;<br>        HashMap&lt;Character, Integer&gt; need = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>        HashMap&lt;Character, Integer&gt; window = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>        <br>        <span class="hljs-keyword">char</span>[] ss1 = s1.toCharArray();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">char</span> tmp : ss1)&#123;<br>            need.put(tmp, need.getOrDefault(tmp, <span class="hljs-number">0</span>)+<span class="hljs-number">1</span>);<br>        &#125;<br>        <br>        <span class="hljs-keyword">int</span> left = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> right = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> valid = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">char</span>[] ss2 = s2.toCharArray();<br>        <span class="hljs-keyword">int</span> n = ss2.length;<br>        <span class="hljs-keyword">while</span>(right&lt;n)&#123;<br>            <span class="hljs-keyword">char</span> cur = ss2[right];<br>            <span class="hljs-keyword">if</span>(need.containsKey(cur))&#123;<br>                window.put(cur, window.getOrDefault(cur, <span class="hljs-number">0</span>)+<span class="hljs-number">1</span>);<br>                <span class="hljs-keyword">if</span>(need.get(cur).equals(window.get(cur)))&#123;<br>                    valid++;<br>                &#125;<br>            &#125;<br>            right++;<br>            <br>            <span class="hljs-keyword">while</span>(valid&gt;=need.size())&#123;<br>                <span class="hljs-keyword">if</span>(right-left==s1.length())&#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>                &#125;<br>                cur = ss2[left];<br>                <span class="hljs-keyword">if</span>(need.containsKey(cur))&#123;<br>                    <span class="hljs-keyword">if</span>(need.get(cur).equals(window.get(cur)))&#123;<br>                        valid--;<br>                    &#125;<br>                    window.put(cur, window.get(cur)-<span class="hljs-number">1</span>);<br>                &#125;<br>                left++;<br>            &#125;         <br>        &#125;<br>        <br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="438-找到字符串中所有字母异位词"><a href="#438-找到字符串中所有字母异位词" class="headerlink" title="438. 找到字符串中所有字母异位词"></a><a href="https://leetcode-cn.com/problems/find-all-anagrams-in-a-string/">438. 找到字符串中所有字母异位词</a></h3><blockquote><p>给定两个字符串 s 和 p，找到 s 中所有 p 的 异位词 的子串，返回这些子串的起始索引。不考虑答案输出的顺序。</p><p>异位词 指由相同字母重排列形成的字符串（包括相同的字符串）。</p><p><strong>提示:</strong></p><ul><li><code>1 &lt;= s.length, p.length &lt;= 3 * 104</code></li><li><code>s</code> 和 <code>p</code> 仅包含小写字母</li></ul></blockquote><h5 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h5><p>同567，只是答案要求输出所有种类，而不是简单的true/false</p><h5 id="注意点-2"><a href="#注意点-2" class="headerlink" title="注意点"></a>注意点</h5><p>木有</p><h5 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Integer&gt; <span class="hljs-title">findAnagrams</span><span class="hljs-params">(String s, String p)</span> </span>&#123;<br>        HashMap&lt;Character, Integer&gt; need = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>        HashMap&lt;Character, Integer&gt; window = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>        <br>        <span class="hljs-keyword">char</span>[] pp = p.toCharArray();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">char</span> tmp : pp)&#123;<br>            need.put(tmp, need.getOrDefault(tmp, <span class="hljs-number">0</span>)+<span class="hljs-number">1</span>);<br>        &#125;<br>        <br>        <span class="hljs-keyword">char</span>[] ss = s.toCharArray();<br>        <span class="hljs-keyword">int</span> n = ss.length;<br>        <span class="hljs-keyword">int</span> left = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> right = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> valid = <span class="hljs-number">0</span>;<br>        List&lt;Integer&gt; res = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        <br>        <span class="hljs-keyword">while</span>(right&lt;n)&#123;<br>            <span class="hljs-keyword">char</span> cur = ss[right];<br>            <span class="hljs-keyword">if</span>(need.containsKey(cur))&#123;<br>                window.put(cur, window.getOrDefault(cur, <span class="hljs-number">0</span>)+<span class="hljs-number">1</span>);<br>                <span class="hljs-keyword">if</span>(window.get(cur).equals(need.get(cur)))&#123;<br>                    valid++;<br>                &#125;<br>            &#125;<br>            right++;<br>            <br>            <span class="hljs-keyword">while</span>(valid&gt;=need.size())&#123;<br>                <span class="hljs-keyword">if</span>(right-left==pp.length)&#123;<br>                    res.add(left);<br>                &#125;<br>                cur = ss[left];<br>                <span class="hljs-keyword">if</span>(need.containsKey(cur))&#123;<br>                    <span class="hljs-keyword">if</span>(window.get(cur).equals(need.get(cur)))&#123;<br>                        valid--;<br>                    &#125;<br>                    window.put(cur, window.get(cur)-<span class="hljs-number">1</span>);<br>                &#125;<br>                left++;          <br>            &#125;         <br>        &#125;<br>        <br>        <span class="hljs-keyword">return</span> res;<br>        <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-无重复字符的最长子串"><a href="#3-无重复字符的最长子串" class="headerlink" title="3. 无重复字符的最长子串"></a><a href="https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/">3. 无重复字符的最长子串</a></h3><blockquote><p>给定一个字符串 <code>s</code> ，请你找出其中不含有重复字符的 <strong>最长子串</strong> 的长度。</p><p><strong>提示：</strong></p><ul><li><code>0 &lt;= s.length &lt;= 5 * 104</code></li><li><code>s</code> 由英文字母、数字、符号和空格组成</li></ul></blockquote><h5 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h5><p>只有一个字符串，因此只需要定义一个HashMap，较之前的题目更为简单。</p><blockquote><p> 更新答案的代码移动至循环最后</p></blockquote><h5 id="注意点-3"><a href="#注意点-3" class="headerlink" title="注意点"></a>注意点</h5><p>目标是返回最大的长度，因此maxlen初始化为0（可能为空）</p><h5 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">lengthOfLongestSubstring</span><span class="hljs-params">(String s)</span> </span>&#123;<br>        HashMap&lt;Character, Integer&gt; window = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>        <span class="hljs-keyword">char</span>[] ss = s.toCharArray();<br>        <br>        <span class="hljs-keyword">int</span> n = ss.length;<br>        <span class="hljs-keyword">int</span> left = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> right = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> maxlen = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> dup = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span>(right&lt;n)&#123;<br>            <span class="hljs-keyword">char</span> cur = ss[right];<br>            window.put(cur, window.getOrDefault(cur, <span class="hljs-number">0</span>)+<span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">if</span>(window.getOrDefault(cur, <span class="hljs-number">0</span>)==<span class="hljs-number">2</span>)&#123;<br>                dup++;<br>            &#125;<br>            right++;<br>            <br>            <span class="hljs-keyword">while</span>(dup&gt;<span class="hljs-number">0</span>)&#123;<br>                cur = ss[left];                <br>                <span class="hljs-keyword">if</span>(window.getOrDefault(cur, <span class="hljs-number">0</span>)==<span class="hljs-number">2</span>)&#123;<br>                    dup--;<br>                &#125;<br>                window.put(cur, window.get(cur)-<span class="hljs-number">1</span>);<br>                left++;<br>            &#125;<br>        <br>            <span class="hljs-keyword">if</span>(right-left&gt;maxlen)&#123;<br>                maxlen = right - left;<br>            &#125;            <br>        &#125;<br>        <br>        <span class="hljs-keyword">return</span> maxlen;       <br>        <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>21天挑战第5天，因为之前刷过几遍滑动窗口，整个过程较为顺利，明天加油~~</p><h2 id="渡何处"><a href="#渡何处" class="headerlink" title="渡何处"></a>渡何处</h2><blockquote><p>《功夫熊猫》</p><p>Yesterday is history. </p><p>Tomorrow is a mystery. </p><p>But today is a gift.</p><p>That is why it is called present.</p></blockquote><p>一开始看到的是这个句子的中文版，后来才看到英文版，很有味道~~</p><p>结合下罗翔语录食用味道更佳：</p><blockquote><p>古希腊哲学家艾比赫泰德说过：对于不可控的事情，我们要保持乐观和自信；对于可控的事情，我们要保持谨慎和节制。对于不可控的事情，说白了你的焦虑和恐惧于事无补，你焦虑改变不了明天，反而会影响今天的心情；你的恐惧也改变不了明天，因为人生唯一应该恐惧的就是恐惧本身。但是对于可控的事情，能不能好好利用时间，这是可控的，你要谨慎，你要节制，因为如果不谨慎不节制，就会乐极生悲。今天是一个礼物，大家好好把握今天</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>程序缘的内功修炼</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>labuladong</tag>
      
      <tag>滑动窗口</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【冲】labuladong的21天算法挑战Day4_二维数组花式遍历技巧</title>
    <link href="/2022/01/08/2022-01-08-labuladong%E7%9A%8421%E5%A4%A9%E7%AE%97%E6%B3%95%E6%8C%91%E6%88%98Day4_%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E8%8A%B1%E5%BC%8F%E9%81%8D%E5%8E%86%E6%8A%80%E5%B7%A7/"/>
    <url>/2022/01/08/2022-01-08-labuladong%E7%9A%8421%E5%A4%A9%E7%AE%97%E6%B3%95%E6%8C%91%E6%88%98Day4_%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E8%8A%B1%E5%BC%8F%E9%81%8D%E5%8E%86%E6%8A%80%E5%B7%A7/</url>
    
    <content type="html"><![CDATA[<p>东哥的21天算法挑战，第4天，爬！</p><h1 id="Day4：二维数组花式遍历技巧"><a href="#Day4：二维数组花式遍历技巧" class="headerlink" title="Day4：二维数组花式遍历技巧"></a>Day4：二维数组花式遍历技巧</h1><p>打卡地：<a href="https://github.com/labuladong/challenge/issues/29">东哥 Github</a></p><p>专题详解内容：<a href="https://mp.weixin.qq.com/s/8jkzRKLNT-6CnEkvHp0ztA">二维数组花式遍历技巧盘点</a></p><h3 id="48-旋转图像"><a href="#48-旋转图像" class="headerlink" title="48. 旋转图像"></a><a href="https://leetcode-cn.com/problems/rotate-image/">48. 旋转图像</a></h3><blockquote><p>给定一个 n × n 的二维矩阵 matrix 表示一个图像。请你将图像顺时针旋转 90 度。</p><p>你必须在 原地 旋转图像，这意味着你需要直接修改输入的二维矩阵。请不要 使用另一个矩阵来旋转图像。</p><p>提示：</p><ul><li>matrix.length == n</li><li>matrix[i].length == n</li><li>1 &lt;= n &lt;= 20</li><li>-1000 &lt;= matrix[i][j] &lt;= 1000</li></ul></blockquote><h5 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h5><p>一些线性代数的处理思路，旋转 = 对角线翻转 + 水平翻转</p><blockquote><p>顺时针旋转 = 主对角线翻转 + 水平翻转</p><p>逆时针旋转 = 副对角线翻转 + 水平翻转</p></blockquote><h5 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h5><p>思路对了应该木有</p><h5 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">rotate</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[][] matrix)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> n = matrix.length;<br>        <br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>; i&lt;n; i++)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j =i+<span class="hljs-number">1</span>; j&lt;n; j++)&#123;<br>                <span class="hljs-keyword">int</span> tmp = matrix[i][j];<br>                matrix[i][j] = matrix[j][i];<br>                matrix[j][i] = tmp;<br>            &#125;<br>        &#125;<br>        <br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span>[] tmp : matrix)&#123;<br>            <span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">int</span> j=n-<span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">while</span>(j&gt;i)&#123;<br>                <span class="hljs-keyword">int</span> t = tmp[i];<br>                tmp[i] = tmp[j];<br>                tmp[j] = t;<br>                i++;<br>                j--;<br>            &#125;<br>        &#125;      <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="54-螺旋矩阵"><a href="#54-螺旋矩阵" class="headerlink" title="54. 螺旋矩阵"></a><a href="https://leetcode-cn.com/problems/spiral-matrix/">54. 螺旋矩阵</a></h3><blockquote><p>给你一个 <code>m</code> 行 <code>n</code> 列的矩阵 <code>matrix</code> ，请按照 <strong>顺时针螺旋顺序</strong> ，返回矩阵中的所有元素。</p><p>提示：</p><ul><li>m == matrix.length</li><li>n == matrix[i].length</li><li>1 &lt;= m, n &lt;= 10</li><li>-100 &lt;= matrix[i][j] &lt;= 100</li></ul></blockquote><h5 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h5><p>设定上下左右边界，while循环里面 →↓←↑ 一遍</p><h5 id="注意点-1"><a href="#注意点-1" class="headerlink" title="注意点"></a>注意点</h5><ol><li>外层循环虽然设定了跳出条件，但是内部的四小循环，还是另外需要设定 if 条件：小循环的固定的行/列，需要存在（eg. 小循环 matrix[left_bound] [i]，那么left_bound&lt;=right_bound）</li></ol><h5 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Integer&gt; <span class="hljs-title">spiralOrder</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[][] matrix)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> m = matrix.length;<br>        <span class="hljs-keyword">int</span> n = matrix[<span class="hljs-number">0</span>].length;<br>        List&lt;Integer&gt; res = <span class="hljs-keyword">new</span> LinkedList&lt;&gt;();<br>        <br>        <span class="hljs-keyword">int</span> ll = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> rr = n-<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">int</span> tt = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> bb = m-<span class="hljs-number">1</span>;<br>        <br>        <span class="hljs-keyword">while</span>(res.size()&lt;m*n)&#123;<br>            <br>            <span class="hljs-keyword">if</span>(tt&lt;=bb)&#123;<br>                <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=ll; i&lt;=rr; i++)&#123;<br>                    res.add(matrix[tt][i]);<br>                &#125;<br>                tt++;<br>            &#125;<br>            <br>            <span class="hljs-keyword">if</span>(ll&lt;=rr)&#123;<br>                <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=tt; i&lt;=bb; i++)&#123;<br>                    res.add(matrix[i][rr]);<br>                &#125;<br>                rr--;                <br>            &#125;<br><br>            <span class="hljs-keyword">if</span>(tt&lt;=bb)&#123;<br>                <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=rr; i&gt;=ll; i--)&#123;<br>                    res.add(matrix[bb][i]);<br>                &#125;<br>                bb--;                <br>            &#125;<br><br>            <span class="hljs-keyword">if</span>(ll&lt;=rr)&#123;<br>                <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=bb; i&gt;=tt; i--)&#123;<br>                    res.add(matrix[i][ll]);<br>                &#125;<br>                ll++;                <br>            &#125;<br>      <br>        &#125;       <br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="59-螺旋矩阵-II"><a href="#59-螺旋矩阵-II" class="headerlink" title="59. 螺旋矩阵 II"></a><a href="https://leetcode-cn.com/problems/spiral-matrix-ii/">59. 螺旋矩阵 II</a></h3><blockquote><p>给你一个正整数 <code>n</code> ，生成一个包含 <code>1</code> 到 <code>n2</code> 所有元素，且元素按顺时针顺序螺旋排列的 <code>n x n</code> 正方形矩阵 <code>matrix</code> 。</p><p><strong>提示：</strong></p><ul><li><code>1 &lt;= n &lt;= 20</code></li></ul></blockquote><h5 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h5><p>同54</p><h5 id="注意点-2"><a href="#注意点-2" class="headerlink" title="注意点"></a>注意点</h5><ol><li>Math.sqrt(m)，输出的是double类型</li><li>保险起见，同54，内部四小循环也需要加个 if 条件</li></ol><h5 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span>[][] generateMatrix(<span class="hljs-keyword">int</span> n) &#123;<br>        <span class="hljs-keyword">int</span>[][] res = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[n][n];<br>        <br>        <span class="hljs-keyword">int</span> ll=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> rr=n-<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">int</span> tt=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> bb=n-<span class="hljs-number">1</span>;<br>        <br>        <span class="hljs-keyword">int</span> cur=<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">int</span> sum = n*n;<br>        <br>        <span class="hljs-keyword">while</span>(cur&lt;=sum)&#123;<br>            <span class="hljs-keyword">if</span>(cur&lt;=sum)&#123;<br>                <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=ll; i&lt;=rr; i++)&#123;<br>                    res[tt][i] = cur++;<br>                &#125;<br>                tt++;                <br>            &#125;<br>            <br>            <span class="hljs-keyword">if</span>(cur&lt;=sum)&#123;<br>                <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=tt; i&lt;=bb; i++)&#123;<br>                    res[i][rr] = cur++;<br>                &#125;<br>                rr--;                <br>            &#125;<br>            <br>            <span class="hljs-keyword">if</span>(cur&lt;=sum)&#123;<br>                <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=rr; i&gt;=ll; i--)&#123;<br>                    res[bb][i] = cur++;<br>                &#125;<br>                bb--;<br>            &#125;<br>            <br>            <span class="hljs-keyword">if</span>(cur&lt;=sum)&#123;<br>                <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=bb; i&gt;=tt; i--)&#123;<br>                    res[i][ll] = cur++;<br>                &#125;<br>                ll++;                <br>            &#125;<br>            <br>        &#125;<br>        <br>        <span class="hljs-keyword">return</span> res;<br>        <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>21天挑战第4天，今天题目相对简单点，剩下的日子里，苟住！</p><h2 id="渡何处"><a href="#渡何处" class="headerlink" title="渡何处"></a>渡何处</h2><blockquote><p>叔本华</p><p>没有相当程度的孤独，是不可能有内心的平和</p></blockquote><p>很惊艳。但是真正能熬得住孤独的人很少，大部分人只是拿着孤独当幌子，自我感动，陷在里面再也出不来了。要在孤独里，收心，审视，努力，旁观，破圈</p>]]></content>
    
    
    <categories>
      
      <category>程序缘的内功修炼</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>labuladong</tag>
      
      <tag>二维数组遍历</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【冲】labuladong的21天算法挑战Day3_差分数组</title>
    <link href="/2022/01/07/2022-01-07-labuladong%E7%9A%8421%E5%A4%A9%E7%AE%97%E6%B3%95%E6%8C%91%E6%88%98Day3_%E5%B7%AE%E5%88%86%E6%95%B0%E7%BB%84/"/>
    <url>/2022/01/07/2022-01-07-labuladong%E7%9A%8421%E5%A4%A9%E7%AE%97%E6%B3%95%E6%8C%91%E6%88%98Day3_%E5%B7%AE%E5%88%86%E6%95%B0%E7%BB%84/</url>
    
    <content type="html"><![CDATA[<p>东哥的21天算法挑战，第3天，gogogo！</p><h1 id="Day3：差分数组"><a href="#Day3：差分数组" class="headerlink" title="Day3：差分数组"></a>Day3：差分数组</h1><p>打卡地：<a href="https://github.com/labuladong/challenge/issues/27">东哥 Github</a></p><p>专题详解内容：<a href="https://mp.weixin.qq.com/s/123QujqVn3--gyeZRhxR-A">小而美的算法技巧：差分数组技巧</a></p><h3 id="370-区间加法"><a href="#370-区间加法" class="headerlink" title="370. 区间加法"></a><a href="https://leetcode-cn.com/problems/range-addition/">370. 区间加法</a></h3><blockquote><p>假设你有一个长度为n的数组，初始情况下所有的数字均为0，你将会被给出 k个更新的操作。</p><p>其中，每个操作会被表示为一个三元组:[startIndex, endIndex, inc]，你需要将子数<br>组A<a href="%E5%8C%85%E6%8B%ACstartlndex%E5%92%8CendIndex">startlndex … endIndex</a>增加inc。</p><p>请你返回k次操作后的数组。</p></blockquote><h5 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h5><p>差分数组的基本使用</p><h5 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h5><p>木有</p><h5 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">int</span>[] getModifiedArray(<span class="hljs-keyword">int</span> length, <span class="hljs-keyword">int</span>[][] updates) &#123;<br>    Difference df = <span class="hljs-keyword">new</span> Diference(<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[length]);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span>[] tmp : updates)&#123;<br>        <span class="hljs-keyword">int</span> left = tmp[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">int</span> right = tmp[<span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">int</span> val = tmp[<span class="hljs-number">2</span>];<br>        df.increment(left, right, val);<br>    &#125;<br>    <span class="hljs-keyword">return</span> df.result();<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Difference</span></span>&#123;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span>[] diff;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Difference</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums)</span></span>&#123;<br>        <span class="hljs-keyword">int</span> n = nums.length;<br>        diff = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[n];<br>        diff[<span class="hljs-number">0</span>] = nums[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>; i&lt;n; i++)&#123;<br>            diff[i] = nums[i] - nums[i-<span class="hljs-number">1</span>];<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">increment</span><span class="hljs-params">(<span class="hljs-keyword">int</span> left, <span class="hljs-keyword">int</span> right, <span class="hljs-keyword">int</span> val)</span></span>&#123;<br>        diff[left] += val;<br>        <span class="hljs-keyword">if</span>(right+<span class="hljs-number">1</span>&lt;diff.length)&#123;<br>            diff[right+<span class="hljs-number">1</span>] -= val;<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span>[] result()&#123;<br>        <span class="hljs-keyword">int</span> n = diff.length;<br>        <span class="hljs-keyword">int</span>[] res = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[n];<br>        res[<span class="hljs-number">0</span>] = diff[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>; i&lt;n; i++)&#123;<br>            res[i] = res[i-<span class="hljs-number">1</span>] + diff[i]; <br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>    <br>    <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1109-航班预订统计"><a href="#1109-航班预订统计" class="headerlink" title="1109. 航班预订统计"></a><a href="https://leetcode-cn.com/problems/corporate-flight-bookings/">1109. 航班预订统计</a></h3><blockquote><p>这里有 n 个航班，它们分别从 1 到 n 进行编号。</p><p>有一份航班预订表 bookings ，表中第 i 条预订记录 bookings[i] = [firsti, lasti, seatsi] 意味着在从 firsti 到 lasti （包含 firsti 和 lasti ）的 每个航班 上预订了 seatsi 个座位。</p><p>请你返回一个长度为 n 的数组 answer，里面的元素是每个航班预定的座位总数。</p><p>提示：</p><ul><li>1 &lt;= n &lt;= 2 * 104</li><li>1 &lt;= bookings.length &lt;= 2 * 104</li><li>bookings[i].length == 3</li><li>1 &lt;= firsti &lt;= lasti &lt;= n</li><li>1 &lt;= seatsi &lt;= 104</li></ul></blockquote><h5 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h5><p>差分数组的应用题</p><h5 id="注意点-1"><a href="#注意点-1" class="headerlink" title="注意点"></a>注意点</h5><ol><li>注意题目中航班是从1算起，所以每次进行increment操作时，left/right都要先 - 1</li><li>题目中提到右侧last也是包含的，所以不用额外-1操作</li></ol><h5 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span>[] corpFlightBookings(<span class="hljs-keyword">int</span>[][] bookings, <span class="hljs-keyword">int</span> n) &#123;<br>        Difference df = <span class="hljs-keyword">new</span> Difference(<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[n]);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span>[] tmp : bookings)&#123;<br>            <span class="hljs-keyword">int</span> left = tmp[<span class="hljs-number">0</span>]-<span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">int</span> right = tmp[<span class="hljs-number">1</span>]-<span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">int</span> val = tmp[<span class="hljs-number">2</span>];<br>            df.increment(left, right, val);<br>        &#125;<br>        <span class="hljs-keyword">return</span> df.result();<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Difference</span></span>&#123;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span>[] diff;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Difference</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums)</span></span>&#123;<br>        <span class="hljs-keyword">int</span> n = nums.length;<br>        diff = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[n];<br>        diff[<span class="hljs-number">0</span>] = nums[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>; i&lt;n; i++)&#123;<br>            diff[i] = nums[i] - nums[i-<span class="hljs-number">1</span>];<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">increment</span><span class="hljs-params">(<span class="hljs-keyword">int</span> left, <span class="hljs-keyword">int</span> right, <span class="hljs-keyword">int</span> val)</span></span>&#123;<br>        diff[left] += val;<br>        <span class="hljs-keyword">if</span>(right+<span class="hljs-number">1</span>&lt;diff.length)&#123;<br>            diff[right+<span class="hljs-number">1</span>] -= val;<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span>[] result()&#123;<br>        <span class="hljs-keyword">int</span> n = diff.length;<br>        <span class="hljs-keyword">int</span>[] res = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[n];<br>        res[<span class="hljs-number">0</span>] = diff[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>; i&lt;n; i++)&#123;<br>            res[i] = res[i-<span class="hljs-number">1</span>] + diff[i]; <br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1094-拼车"><a href="#1094-拼车" class="headerlink" title="1094. 拼车"></a><a href="https://leetcode-cn.com/problems/car-pooling/">1094. 拼车</a></h3><blockquote><p>假设你是一位顺风车司机，车上最初有 capacity 个空座位可以用来载客。由于道路的限制，车 只能 向一个方向行驶（也就是说，不允许掉头或改变方向，你可以将其想象为一个向量）。</p><p>这儿有一份乘客行程计划表 trips[][]，其中 trips[i] = [num_passengers, start_location, end_location] 包含了第 i 组乘客的行程信息：</p><p>必须接送的乘客数量；<br>乘客的上车地点；<br>以及乘客的下车地点。<br>这些给出的地点位置是从你的 初始 出发位置向前行驶到这些地点所需的距离（它们一定在你的行驶方向上）。</p><p>请你根据给出的行程计划表和车子的座位数，来判断你的车是否可以顺利完成接送所有乘客的任务（当且仅当你可以在所有给定的行程中接送所有乘客时，返回 true，否则请返回 false）</p><p>提示：</p><ul><li>你可以假设乘客会自觉遵守 “先下后上” 的良好素质</li><li>trips.length &lt;= 1000</li><li>trips[i].length == 3</li><li>1 &lt;= trips[i][0] &lt;= 100</li><li>0 &lt;= trips[i][1] &lt; trips[i][2] &lt;= 1000</li><li>1 &lt;= capacity &lt;= 100000</li></ul></blockquote><h5 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h5><p>差分数组的应用题，转化下题目意思，即车子所有时刻的人数数组，最大值会不会超过capacity</p><h5 id="注意点-2"><a href="#注意点-2" class="headerlink" title="注意点"></a>注意点</h5><ol><li>题目没有提及右侧区间包含，因此在调用increment时，right需要-1（毕竟站点都是先下车一波人，再上车一波人，所以在right站点要减掉一波人）</li></ol><h5 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">carPooling</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[][] trips, <span class="hljs-keyword">int</span> capacity)</span> </span>&#123;<br>        Difference df = <span class="hljs-keyword">new</span> Difference(<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">1001</span>]);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span>[] tmp : trips)&#123;<br>            <span class="hljs-keyword">int</span> left = tmp[<span class="hljs-number">1</span>];<br>            <span class="hljs-keyword">int</span> right = tmp[<span class="hljs-number">2</span>]-<span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">int</span> val = tmp[<span class="hljs-number">0</span>];<br>            df.increment(left, right, val);<br>        &#125;<br>        <span class="hljs-keyword">int</span>[] res = df.result();<br>        <span class="hljs-keyword">int</span> max = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i : res)&#123;<br>            max = Math.max(max, i);<br>        &#125;<br>        <span class="hljs-keyword">return</span> max&lt;=capacity;<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Difference</span></span>&#123;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span>[] diff;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Difference</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums)</span></span>&#123;<br>        <span class="hljs-keyword">int</span> n = nums.length;<br>        diff = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[n];<br>        diff[<span class="hljs-number">0</span>] = nums[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>; i&lt;n; i++)&#123;<br>            diff[i] = nums[i] - nums[i-<span class="hljs-number">1</span>];<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">increment</span><span class="hljs-params">(<span class="hljs-keyword">int</span> left, <span class="hljs-keyword">int</span> right, <span class="hljs-keyword">int</span> val)</span></span>&#123;<br>        diff[left] += val;<br>        <span class="hljs-keyword">if</span>(right+<span class="hljs-number">1</span>&lt;diff.length)&#123;<br>            diff[right+<span class="hljs-number">1</span>] -= val;<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span>[] result()&#123;<br>        <span class="hljs-keyword">int</span> n = diff.length;<br>        <span class="hljs-keyword">int</span>[] res = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[n];<br>        res[<span class="hljs-number">0</span>] = diff[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>; i&lt;n; i++)&#123;<br>            res[i] = res[i-<span class="hljs-number">1</span>] + diff[i];<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>21天挑战第3天，今天题目风格较为统一，思路和注意点都比较少，所以写得也比较快，坚持！</p><h2 id="渡何处"><a href="#渡何处" class="headerlink" title="渡何处"></a>渡何处</h2><blockquote><p>王中左右的视频<a href="https://www.bilibili.com/video/BV1fZ4y1U7Bx">《如果王家卫做春晚总导演》</a></p><p>听人说过，四十不惑，三十而已，而三十多岁的我，卡在了中间，困惑不已</p></blockquote><p>王家卫区up，虽然每次风格都很固定，但在同一风格下创造出很多金句，本身的文字功底很强，而且之前有一期孙悟空林黛玉混剪，编剧功力也不错，敲代码累了看看很享受</p>]]></content>
    
    
    <categories>
      
      <category>程序缘的内功修炼</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>labuladong</tag>
      
      <tag>差分数组</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【冲】labuladong的21天算法挑战Day2_前缀和</title>
    <link href="/2022/01/06/2022-01-06-labuladong%E7%9A%8421%E5%A4%A9%E7%AE%97%E6%B3%95%E6%8C%91%E6%88%98Day2_%E5%89%8D%E7%BC%80%E5%92%8C/"/>
    <url>/2022/01/06/2022-01-06-labuladong%E7%9A%8421%E5%A4%A9%E7%AE%97%E6%B3%95%E6%8C%91%E6%88%98Day2_%E5%89%8D%E7%BC%80%E5%92%8C/</url>
    
    <content type="html"><![CDATA[<p>东哥的21天算法挑战，第2天，冲！</p><h1 id="Day2：前缀和"><a href="#Day2：前缀和" class="headerlink" title="Day2：前缀和"></a>Day2：前缀和</h1><p>打卡地：<a href="https://github.com/labuladong/challenge/issues/26">东哥 Github</a></p><p>专题详解内容：<a href="https://mp.weixin.qq.com/s/EwAH3JDs5WFO6-LFmI3-2Q">小而美的算法技巧：前缀和数组</a></p><h3 id="303-区域和检索-数组不可变"><a href="#303-区域和检索-数组不可变" class="headerlink" title="303. 区域和检索 - 数组不可变"></a><a href="https://leetcode-cn.com/problems/range-sum-query-immutable/">303. 区域和检索 - 数组不可变</a></h3><blockquote><p>给定一个整数数组  nums，求出数组从索引 i 到 j（i ≤ j）范围内元素的总和，包含 i、j 两点。</p><p>实现 NumArray 类：</p><ul><li>NumArray(int[] nums) 使用数组 nums 初始化对象</li><li>int sumRange(int i, int j) 返回数组 nums 从索引 i 到 j（i ≤ j）范围内元素的总和，包含 i、j 两点（也就是 sum(nums[i], nums[i + 1], … , nums[j])）</li></ul><p>提示：</p><ul><li>0 &lt;= nums.length &lt;= 104</li><li>-105 &lt;= nums[i] &lt;= 105</li><li>0 &lt;= i &lt;= j &lt; nums.length</li><li>最多调用 104 次 sumRange 方法</li></ul></blockquote><h5 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h5><p>前缀和的基本使用，构造preSum来避免O(n^2)的复杂度</p><h5 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h5><ol><li>preSum的大小要+1，多了个base case：preSum[0]=0</li><li>最终输出的时候，右边界要+1</li></ol><h5 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NumArray</span> </span>&#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span>[] preSum;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">NumArray</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> n = nums.length;<br>        preSum = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[n+<span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">int</span> sum = <span class="hljs-number">0</span>;<br>        <span class="hljs-comment">// preSum[0] = 0;</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>; i&lt;=n; i++)&#123;<br>            sum += nums[i-<span class="hljs-number">1</span>];<br>            preSum[i] = sum;<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">sumRange</span><span class="hljs-params">(<span class="hljs-keyword">int</span> left, <span class="hljs-keyword">int</span> right)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> preSum[right+<span class="hljs-number">1</span>]-preSum[left];<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Your NumArray object will be instantiated and called as such:</span><br><span class="hljs-comment"> * NumArray obj = new NumArray(nums);</span><br><span class="hljs-comment"> * int param_1 = obj.sumRange(left,right);</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></table></figure><h3 id="304-二维区域和检索-矩阵不可变"><a href="#304-二维区域和检索-矩阵不可变" class="headerlink" title="304. 二维区域和检索 - 矩阵不可变"></a><a href="https://leetcode-cn.com/problems/range-sum-query-2d-immutable/">304. 二维区域和检索 - 矩阵不可变</a></h3><blockquote><p>给定一个二维矩阵 matrix，以下类型的多个请求：</p><ul><li>计算其子矩形范围内元素的总和，该子矩阵的 左上角 为 (row1, col1) ，右下角 为 (row2, col2) 。</li></ul><p>实现 NumMatrix 类：</p><ul><li>NumMatrix(int[][] matrix) 给定整数矩阵 matrix 进行初始化</li><li>int sumRegion(int row1, int col1, int row2, int col2) 返回 左上角 (row1, col1) 、右下角 (row2, col2) 所描述的子矩阵的元素 总和 。</li></ul><p><strong>提示：</strong></p><ul><li>m == matrix.length</li><li>n == matrix[i].length</li><li>1 &lt;= m, n &lt;= 200</li><li>-105 &lt;= matrix[i][j] &lt;= 105</li><li>0 &lt;= row1 &lt;= row2 &lt; m</li><li>0 &lt;= col1 &lt;= col2 &lt; n</li><li>最多调用 104 次 sumRegion 方法</li></ul></blockquote><h5 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h5><p>前缀和的二维版本，初始化preSum和最后输出都会稍微复杂点</p><h5 id="注意点-1"><a href="#注意点-1" class="headerlink" title="注意点"></a>注意点</h5><ol><li><p>同样preSum的大小要+1，多了个base case：preSum[0] [0] = 0;</p></li><li><p>初始化的操作：preSum[i] [j] = preSum[i-1] [j] + preSum[i] [j-1] + matrix[i-1] [j-1] - preSum[i-1] [j-1];</p><blockquote><p>注意：</p><p>matrix[i-1] [j-1] 普遍要比 preSum[i] [j]的序号要-1</p></blockquote></li><li><p>最后输出的操作：return preSum[row2+1] [co2+1] + preSum[row1] [col1] - preSum[row2+1] [col1]  - preSum[row1] [col2+1];</p><blockquote><p>注意：</p><p>大的边界row2/col2是要+1的，小的row1/col1是不需要的</p></blockquote></li></ol><h5 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NumMatrix</span> </span>&#123;<br>    <br>    <span class="hljs-keyword">int</span>[][] preSum;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">NumMatrix</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[][] matrix)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> m = matrix.length;<br>        <span class="hljs-keyword">int</span> n = matrix[<span class="hljs-number">0</span>].length;<br>        preSum = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[m+<span class="hljs-number">1</span>][n+<span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>; i&lt;=m; i++)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">1</span>; j&lt;=n; j++)&#123;<br>                preSum[i][j] = preSum[i-<span class="hljs-number">1</span>][j]+preSum[i][j-<span class="hljs-number">1</span>]+matrix[i-<span class="hljs-number">1</span>][j-<span class="hljs-number">1</span>]-preSum[i-<span class="hljs-number">1</span>][j-<span class="hljs-number">1</span>];<br>            &#125;<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">sumRegion</span><span class="hljs-params">(<span class="hljs-keyword">int</span> row1, <span class="hljs-keyword">int</span> col1, <span class="hljs-keyword">int</span> row2, <span class="hljs-keyword">int</span> col2)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> preSum[row2+<span class="hljs-number">1</span>][col2+<span class="hljs-number">1</span>]+preSum[row1][col1]-preSum[row1][col2+<span class="hljs-number">1</span>]-preSum[row2+<span class="hljs-number">1</span>][col1];<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Your NumMatrix object will be instantiated and called as such:</span><br><span class="hljs-comment"> * NumMatrix obj = new NumMatrix(matrix);</span><br><span class="hljs-comment"> * int param_1 = obj.sumRegion(row1,col1,row2,col2);</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></table></figure><h3 id="560-和为-K-的子数组"><a href="#560-和为-K-的子数组" class="headerlink" title="560. 和为 K 的子数组"></a><a href="https://leetcode-cn.com/problems/subarray-sum-equals-k/">560. 和为 K 的子数组</a></h3><blockquote><p>给你一个整数数组 <code>nums</code> 和一个整数 <code>k</code> ，请你统计并返回该数组中和为 <code>k</code> 的连续子数组的个数。</p><p><strong>提示：</strong></p><ul><li>1 &lt;= nums.length &lt;= 2 * 104</li><li>-1000 &lt;= nums[i] &lt;= 1000</li><li>-107 &lt;= k &lt;= 107</li></ul></blockquote><h5 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h5><p>使用前缀和后，最直觉的思路还是双层循环，但可以借助HashMap来记录sum为x的个数，这样就能减掉一层循环</p><p>综上，流程如下：</p><ol><li>初始化HashMap&lt;Integer, Integer&gt;，存一个(0,1)，这样如果左边界为0的sum就能res+1了</li><li>进入循环，每次先（1）计算当前的sum；（2）然后减去目标k，得到的target，去HashMap里取值，加入到res里；（3）将当前的sum也加入到HashMap中</li><li>最终返回res</li></ol><h5 id="注意点-2"><a href="#注意点-2" class="headerlink" title="注意点"></a>注意点</h5><ol><li><p>更新当前的sum到HashMap中时，要在(2)之后进行，不然答案会多加（对比双循环，双循环内部 j&lt;i，所以当前的sum不能先更新到哈希表中）</p><blockquote><p>例如：数组为{1}，k=0，显然最后的结果 res=0</p><p>那么进入循环，sum=1，然后将sum加入到HashMap中（目前HashMap中有(0,1)和(1,1)），计算 target = sum - k = 1，那么查询HashMap就会res+1了</p></blockquote></li><li><p>可以优化掉前缀和数组，因为循环每一轮得到的东西都会记录在HashMap中，所以没必要保留数组</p></li></ol><h5 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">subarraySum</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums, <span class="hljs-keyword">int</span> k)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> n = nums.length;<br>        <span class="hljs-keyword">int</span> sum = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> res = <span class="hljs-number">0</span>;<br>        HashMap&lt;Integer, Integer&gt; m = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>        m.put(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>; i&lt;=n; i++)&#123;<br>            sum += nums[i-<span class="hljs-number">1</span>];<br>            <br>            <span class="hljs-keyword">int</span> target = sum - k;<br>            <span class="hljs-keyword">if</span>(m.containsKey(target))&#123;<br>                res += m.get(target);<br>            &#125;<br>            <br>            m.put(sum, m.getOrDefault(sum, <span class="hljs-number">0</span>)+<span class="hljs-number">1</span>);<br>            <br>        &#125;<br>        <br>        <span class="hljs-keyword">return</span> res;<br>        <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>21天挑战第2天，学文章+做题+写总结，还是花了快2个小时（虽然只有3题），不过这个过程还是必要的，即使不一定能加深理解，但是至少能记录些我的一些手误点和思考积疾，坚持住~~</p><h2 id="渡何处"><a href="#渡何处" class="headerlink" title="渡何处"></a>渡何处</h2><blockquote><p>王村村的视频<a href="https://www.bilibili.com/video/BV1c34y1z7Pu">《中年男性的独居生活01（浪漫主义无聊）》</a></p><p>有一天我睡觉的时候，听到蚊子在我耳边噪响，我从被子里面伸手，扇自己耳朵，过了一会儿明显感觉到这个蚊子飞进了我的被窝，我拼命裹紧被子，在床上打滚，早上起来，床上有一小撮干了的血渍，后来我把那块带了血渍的床单裁了下来，做了个框，然后写了这么一句话，我说：我与生活搏斗过，那摊血，应该是我的，但流血的，不是我</p></blockquote><p>最近关注的一个up，这段很有感觉就抄下来了，希望多年以后自己的中年生活，也能在破碎中觅得诗意聊以慰藉</p>]]></content>
    
    
    <categories>
      
      <category>程序缘的内功修炼</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>labuladong</tag>
      
      <tag>前缀和</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【冲】labuladong的21天算法挑战Day1_链表基操</title>
    <link href="/2022/01/05/2022-01-05-labuladong%E7%9A%8421%E5%A4%A9%E7%AE%97%E6%B3%95%E6%8C%91%E6%88%98Day1_%E9%93%BE%E8%A1%A8%E5%9F%BA%E6%93%8D/"/>
    <url>/2022/01/05/2022-01-05-labuladong%E7%9A%8421%E5%A4%A9%E7%AE%97%E6%B3%95%E6%8C%91%E6%88%98Day1_%E9%93%BE%E8%A1%A8%E5%9F%BA%E6%93%8D/</url>
    
    <content type="html"><![CDATA[<p>参加了labuladong东哥的21天算法挑战，交了300元押金，为了把钱拿回来，冲冲冲！</p><h1 id="Day1：单链表解题技巧"><a href="#Day1：单链表解题技巧" class="headerlink" title="Day1：单链表解题技巧"></a>Day1：单链表解题技巧</h1><p>打卡地：<a href="https://github.com/labuladong/challenge/issues/25">东哥 Github</a></p><p>专题详解内容：<a href="https://mp.weixin.qq.com/s/dVqXEMKZ6_tuB7J-leLmtg">单链表的六大解题套路，你都见过么？</a></p><h3 id="21-合并两个有序链表"><a href="#21-合并两个有序链表" class="headerlink" title="21. 合并两个有序链表"></a><a href="https://leetcode-cn.com/problems/merge-two-sorted-lists/">21. 合并两个有序链表</a></h3><blockquote><p>将两个升序链表合并为一个新的 <strong>升序</strong> 链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。 </p><p><strong>提示：</strong></p><ul><li>两个链表的节点数目范围是 <code>[0, 50]</code></li><li><code>-100 &lt;= Node.val &lt;= 100</code></li><li><code>l1</code> 和 <code>l2</code> 均按 <strong>非递减顺序</strong> 排列</li></ul></blockquote><h5 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h5><ol><li>设定双指针分别指向两个链表头结点</li><li>另外设定指针指向要返回的结果链表</li><li>循环比较两个指针值的大小，将结果链表的指针指向较小值的指针，并将较小值指针向前移动</li><li>结果指针也向前移动</li></ol><h5 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h5><ol><li>设计哑节点，代码更简洁（最后返回dum.next，这样不用纠结是链表1的头还是链表2的头）</li><li>当一个链表为空时，直接将当前链表连到剩下没空的链表即可</li></ol><h5 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> * public class ListNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     ListNode next;</span><br><span class="hljs-comment"> *     ListNode() &#123;&#125;</span><br><span class="hljs-comment"> *     ListNode(int val) &#123; this.val = val; &#125;</span><br><span class="hljs-comment"> *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title">mergeTwoLists</span><span class="hljs-params">(ListNode list1, ListNode list2)</span> </span>&#123;<br>ListNode dum = <span class="hljs-keyword">new</span> ListNode(-<span class="hljs-number">1</span>);<br>        ListNode cur = dum;<br>        <span class="hljs-keyword">while</span>(list1!=<span class="hljs-keyword">null</span> &amp;&amp; list2!=<span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">if</span>(list1.val&gt;list2.val)&#123;<br>                cur.next = list2;<br>                list2 = list2.next;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                cur.next = list1;<br>                list1 = list1.next;<br>            &#125;<br>            cur = cur.next;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(list1==<span class="hljs-keyword">null</span>)&#123;<br>            cur.next = list2;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            cur.next = list1;<br>        &#125;<br>        <span class="hljs-keyword">return</span> dum.next;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="23-合并K个升序链表"><a href="#23-合并K个升序链表" class="headerlink" title="23. 合并K个升序链表"></a><a href="https://leetcode-cn.com/problems/merge-k-sorted-lists/">23. 合并K个升序链表</a></h3><blockquote><p>给你一个链表数组，每个链表都已经按升序排列。</p><p>请你将所有链表合并到一个升序链表中，返回合并后的链表。</p><p><strong>提示：</strong></p><ul><li>k == lists.length</li><li>0 &lt;= k &lt;= 10^4</li><li>0 &lt;= lists[i].length &lt;= 500</li><li>-10^4 &lt;= lists[i][j] &lt;= 10^4</li><li>lists[i] 按 升序 排列</li><li>lists[i].length 的总和不超过 10^4</li></ul></blockquote><h5 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h5><p>类似 Leetcode21，同样比较多个指针所在链表的值，将结果链表指针指向最小值所在链表，自身再前进</p><p>但是多个链表指针如何最高效比较大小，要借助优先级队列，复杂度为O(logK)，K为队列长度（在本题中即为链表个数k），整体复杂度即为O(NlogK)，其中N为所有节点个数</p><p>综上流程步骤为：</p><ol><li>将k个链表头结点存入优先级队列中</li><li>每次取出队列头结点（即为当前所有链表的最小值节点），将结果链表指针指向该节点，自身再前进</li><li>重复以上步骤，直至优先级队列为空</li></ol><h5 id="注意点-1"><a href="#注意点-1" class="headerlink" title="注意点"></a>注意点</h5><ol><li>优先级队列中定义大小的比较时，都用Integer/Double.compare(a, b)，封装类的比较函数会帮你处理边界问题（当然此题不会出现越界行为，仅是提醒）</li><li>边界case会有：**[[]]**，因此初始化优先级队列时，注意判断节点是否为null，不为null再加入优先级队列</li><li>同样因为边界case：**[[]]**，更新优先级队列内容时，也要先判断节点是否为null，不为null再加入优先级队列</li></ol><h5 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> * public class ListNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     ListNode next;</span><br><span class="hljs-comment"> *     ListNode() &#123;&#125;</span><br><span class="hljs-comment"> *     ListNode(int val) &#123; this.val = val; &#125;</span><br><span class="hljs-comment"> *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title">mergeKLists</span><span class="hljs-params">(ListNode[] lists)</span> </span>&#123;<br>ListNode dum = <span class="hljs-keyword">new</span> ListNode(-<span class="hljs-number">1</span>);<br>        PriorityQueue&lt;ListNode&gt; q = <span class="hljs-keyword">new</span> PriorityQueue&lt;&gt;((o1, o2) -&gt; &#123;<br>            <span class="hljs-keyword">return</span> Integer.compare(o1.val, o2.val);<br>        &#125;);<br>        <span class="hljs-keyword">for</span>(ListNode l : lists)&#123;<br>            <span class="hljs-keyword">if</span>(l!=<span class="hljs-keyword">null</span>)&#123;<br>                q.offer(l);<br>            &#125;<br>        &#125;<br>        ListNode cur = dum;<br>        <span class="hljs-keyword">while</span>(!q.isEmpty())&#123;<br>            ListNode tmp = q.poll();<br>            cur.next = tmp;<br>            cur = cur.next;<br>            <span class="hljs-keyword">if</span>(tmp.next!=<span class="hljs-keyword">null</span>)&#123;<br>                q.offer(tmp.next);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> dum.next;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="141-环形链表"><a href="#141-环形链表" class="headerlink" title="141. 环形链表"></a><a href="https://leetcode-cn.com/problems/linked-list-cycle/">141. 环形链表</a></h3><blockquote><p>给你一个链表的头节点 head ，判断链表中是否有环。</p><p>如果链表中有某个节点，可以通过连续跟踪 next 指针再次到达，则链表中存在环。 为了表示给定链表中的环，评测系统内部使用整数 pos 来表示链表尾连接到链表中的位置（索引从 0 开始）。如果 pos 是 -1，则在该链表中没有环。注意：pos 不作为参数进行传递，仅仅是为了标识链表的实际情况。</p><p>如果链表中存在环，则返回 true 。 否则，返回 false 。</p><p><strong>提示：</strong></p><ul><li>链表中节点的数目范围是 <code>[0, 104]</code></li><li><code>-105 &lt;= Node.val &lt;= 105</code></li><li><code>pos</code> 为 <code>-1</code> 或者链表中的一个 <strong>有效索引</strong> 。</li></ul></blockquote><h5 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h5><p>设定快慢指针，快指针每次走两步，慢指针每次走一步，当链表成环则双指针迟早相遇，不成环的话则快指针最终走到尽头。</p><p>综上，流程如下：</p><ol><li>设定快慢指针都指向头结点</li><li>每次快指针走两步，慢指针走一步，判断两指针是否相等，相等则返回true</li><li>当快指针走到尽头退出循环，返回false</li></ol><h5 id="注意点-2"><a href="#注意点-2" class="headerlink" title="注意点"></a>注意点</h5><ol><li>循环条件是快指针当前非null，并且&amp;&amp;，当前快指针的next也非null</li><li>内部break是快慢指针是否相等</li></ol><h5 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> * class ListNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     ListNode next;</span><br><span class="hljs-comment"> *     ListNode(int x) &#123;</span><br><span class="hljs-comment"> *         val = x;</span><br><span class="hljs-comment"> *         next = null;</span><br><span class="hljs-comment"> *     &#125;</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">hasCycle</span><span class="hljs-params">(ListNode head)</span> </span>&#123;<br>        ListNode slow = head;<br>        ListNode fast = head;<br>        <span class="hljs-keyword">while</span>(fast!=<span class="hljs-keyword">null</span> &amp;&amp; fast.next!=<span class="hljs-keyword">null</span>)&#123;<br>            slow = slow.next;<br>            fast = fast.next.next;<br>            <span class="hljs-keyword">if</span>(fast==slow)&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;   <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="142-环形链表-II"><a href="#142-环形链表-II" class="headerlink" title="142. 环形链表 II"></a><a href="https://leetcode-cn.com/problems/linked-list-cycle-ii/">142. 环形链表 II</a></h3><blockquote><p>给定一个链表，返回链表开始入环的第一个节点。 如果链表无环，则返回 null。</p><p>如果链表中有某个节点，可以通过连续跟踪 next 指针再次到达，则链表中存在环。 为了表示给定链表中的环，评测系统内部使用整数 pos 来表示链表尾连接到链表中的位置（索引从 0 开始）。如果 pos 是 -1，则在该链表中没有环。注意：pos 不作为参数进行传递，仅仅是为了标识链表的实际情况。</p><p>不允许修改 链表。</p><p><strong>提示：</strong></p><ul><li>链表中节点的数目范围在范围 <code>[0, 104]</code> 内</li><li><code>-105 &lt;= Node.val &lt;= 105</code></li><li><code>pos</code> 的值为 <code>-1</code> 或者链表中的一个有效索引</li></ul></blockquote><h5 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h5><p>类似 Leetcode141，在快慢指针相遇时，再将快指针拨回头结点，双指针都每次前进一步，它们就会在入环点相遇</p><ol><li>（同Leetcode141）</li><li>快指针重新设定为链表头结点，快慢指针同时前进，每次一步</li><li>重复上述步骤，直至两者再次相遇，相遇点即为入环点</li></ol><p>证明：</p><h5 id="注意点-3"><a href="#注意点-3" class="headerlink" title="注意点"></a>注意点</h5><ol><li>（个人手欠错误），fast指针老是多打一个next：fast.next.next != null</li></ol><h5 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> * class ListNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     ListNode next;</span><br><span class="hljs-comment"> *     ListNode(int x) &#123;</span><br><span class="hljs-comment"> *         val = x;</span><br><span class="hljs-comment"> *         next = null;</span><br><span class="hljs-comment"> *     &#125;</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title">detectCycle</span><span class="hljs-params">(ListNode head)</span> </span>&#123;<br>        ListNode fast = head;<br>        ListNode slow = head;<br>        <span class="hljs-keyword">while</span>(fast!=<span class="hljs-keyword">null</span> &amp;&amp; fast.next!=<span class="hljs-keyword">null</span>)&#123;<br>            fast = fast.next.next;<br>            slow = slow.next;<br>            <span class="hljs-keyword">if</span>(fast==slow)&#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(fast==<span class="hljs-keyword">null</span> || fast.next==<span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        &#125;<br>        fast = head;<br>        <span class="hljs-keyword">while</span>(fast!=slow)&#123;<br>            fast = fast.next;<br>            slow = slow.next;<br>        &#125;<br>        <span class="hljs-keyword">return</span> slow;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="876-链表的中间结点"><a href="#876-链表的中间结点" class="headerlink" title="876. 链表的中间结点"></a><a href="https://leetcode-cn.com/problems/middle-of-the-linked-list/">876. 链表的中间结点</a></h3><blockquote><p>给定一个头结点为 <code>head</code> 的非空单链表，返回链表的中间结点。</p><p>如果有两个中间结点，则返回第二个中间结点。</p><p><strong>提示：</strong></p><ul><li>给定链表的结点数介于 <code>1</code> 和 <code>100</code> 之间。</li></ul></blockquote><h5 id="思路-4"><a href="#思路-4" class="headerlink" title="思路"></a>思路</h5><p>快慢指针的基本操作，快指针前进两步，慢指针前进一步</p><h5 id="注意点-4"><a href="#注意点-4" class="headerlink" title="注意点"></a>注意点</h5><p>还是那个个人手欠错误，fast指针别多打一个next：</p><ol><li>fast.next.next != null</li><li>fast = fast.next.next.next;</li></ol><h5 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> * public class ListNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     ListNode next;</span><br><span class="hljs-comment"> *     ListNode() &#123;&#125;</span><br><span class="hljs-comment"> *     ListNode(int val) &#123; this.val = val; &#125;</span><br><span class="hljs-comment"> *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title">middleNode</span><span class="hljs-params">(ListNode head)</span> </span>&#123;<br>ListNode slow = head;<br>        ListNode fast = head;<br>        <span class="hljs-keyword">while</span>(fast!=<span class="hljs-keyword">null</span> &amp;&amp; fast.next!=<span class="hljs-keyword">null</span>)&#123;<br>            slow = slow.next;<br>            fast = fast.next.next;<br>        &#125;<br>        <span class="hljs-keyword">return</span> slow;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="160-相交链表"><a href="#160-相交链表" class="headerlink" title="160. 相交链表"></a><a href="https://leetcode-cn.com/problems/intersection-of-two-linked-lists/">160. 相交链表</a></h3><blockquote><p>给你两个单链表的头节点 headA 和 headB ，请你找出并返回两个单链表相交的起始节点。如果两个链表不存在相交节点，返回 null 。</p><p>题目数据 保证 整个链式结构中不存在环。</p><p>注意，函数返回结果后，链表必须 保持其原始结构 。</p><p>自定义评测：</p><p>评测系统 的输入如下（你设计的程序 不适用 此输入）：</p><ul><li>intersectVal - 相交的起始节点的值。如果不存在相交节点，这一值为 0</li><li>listA - 第一个链表</li><li>listB - 第二个链表</li><li>skipA - 在 listA 中（从头节点开始）跳到交叉节点的节点数</li><li>skipB - 在 listB 中（从头节点开始）跳到交叉节点的节点数</li></ul><p>评测系统将根据这些输入创建链式数据结构，并将两个头节点 headA 和 headB 传递给你的程序。如果程序能够正确返回相交节点，那么你的解决方案将被 视作正确答案 。</p><p>提示：</p><ul><li>listA 中节点数目为 m</li><li>listB 中节点数目为 n</li><li>1 &lt;= m, n &lt;= 3 * 104</li><li>1 &lt;= Node.val &lt;= 105</li><li>0 &lt;= skipA &lt;= m</li><li>0 &lt;= skipB &lt;= n</li><li>如果 listA 和 listB 没有交点，intersectVal 为 0</li><li>如果 listA 和 listB 有交点，intersectVal == listA[skipA] == listB[skipB]</li></ul><p>进阶：你能否设计一个时间复杂度 O(m + n) 、仅用 O(1) 内存的解决方案？</p></blockquote><h5 id="思路-5"><a href="#思路-5" class="headerlink" title="思路"></a>思路</h5><p>双指针分别指向两个链表，每次前进一步，当指针到达链表末尾，移动到另一个链表的头结点。这样两者的前进路径长度正好相等，如果链表相交就正好同时到达相交节点，如果不想交，如果不相交就同时到达null</p><h5 id="注意点-5"><a href="#注意点-5" class="headerlink" title="注意点"></a>注意点</h5><ol><li>来自东哥巧妙的设计，循环的判定条件为快慢指针不相等，因为不管相不相交，最终都会跳出循环（快慢指针要么都指向同一节点，要么都指向null，null也是相等）</li><li>循环内部，l1==null的情况只会进入一次，因为第二次进入前，while本身判断条件会先卡住退出</li></ol><h5 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a>代码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> * public class ListNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     ListNode next;</span><br><span class="hljs-comment"> *     ListNode(int x) &#123;</span><br><span class="hljs-comment"> *         val = x;</span><br><span class="hljs-comment"> *         next = null;</span><br><span class="hljs-comment"> *     &#125;</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title">getIntersectionNode</span><span class="hljs-params">(ListNode headA, ListNode headB)</span> </span>&#123;<br>        ListNode l1 = headA;<br>        ListNode l2 = headB;<br>        <span class="hljs-keyword">while</span>(l1!=l2)&#123;<br>            <span class="hljs-keyword">if</span>(l1!=<span class="hljs-keyword">null</span>)&#123;<br>                l1 = l1.next;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                l1 = headB;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(l2!=<span class="hljs-keyword">null</span>)&#123;<br>                l2 = l2.next;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                l2 = headA;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> l1;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="19-删除链表的倒数第-N-个结点"><a href="#19-删除链表的倒数第-N-个结点" class="headerlink" title="19. 删除链表的倒数第 N 个结点"></a><a href="https://leetcode-cn.com/problems/remove-nth-node-from-end-of-list/">19. 删除链表的倒数第 N 个结点</a></h3><h5 id="思路-6"><a href="#思路-6" class="headerlink" title="思路"></a>思路</h5><p>利用快慢指针，快慢指针都从头结点出发，快指针先走N步，然后快慢指针同时前进，每次前进一步，当快指针到达末尾时，慢指针正好到达倒数第N个节点</p><p>对于删除节点，需要第N+1个节点来修改跳过下一个指针，因此额外设定哑结点，并且快指针多走N+1步，这样就能到达倒数第N+1个节点</p><p>综上，流程如下：</p><ol><li>设定哑结点，哑结点的下个节点指向头结点</li><li>快指针起点设为哑结点，先移动N+1步</li><li>慢指针起点设为哑结点，快慢指针同时前进，每次前进一步</li><li>当快指针到达null时，慢指针正好到达倒数第N+1个节点</li><li>将慢指针跳过下个节点即可</li><li>返回哑结点的下个节点</li></ol><h5 id="注意点-6"><a href="#注意点-6" class="headerlink" title="注意点"></a>注意点</h5><ol><li>设定哑结点，防止删除节点为头结点</li><li>对于删除操作，基本都要达到目标节点的上个节点，所以快指针先走N+1步，而不是第N步</li></ol><h5 id="代码-6"><a href="#代码-6" class="headerlink" title="代码"></a>代码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> * public class ListNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     ListNode next;</span><br><span class="hljs-comment"> *     ListNode() &#123;&#125;</span><br><span class="hljs-comment"> *     ListNode(int val) &#123; this.val = val; &#125;</span><br><span class="hljs-comment"> *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title">removeNthFromEnd</span><span class="hljs-params">(ListNode head, <span class="hljs-keyword">int</span> n)</span> </span>&#123;<br>ListNode dum = <span class="hljs-keyword">new</span> ListNode(-<span class="hljs-number">1</span>);<br>        dum.next = head;<br>        ListNode fast = dum;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>; i&lt;n+<span class="hljs-number">1</span>; i++)&#123;<br>            fast = fast.next;<br>        &#125;<br>        ListNode slow = dum;<br>        <span class="hljs-keyword">while</span>(fast!=<span class="hljs-keyword">null</span>)&#123;<br>            fast = fast.next;<br>            slow = slow.next;<br>        &#125;<br>        slow.next = slow.next.next;<br>        <span class="hljs-keyword">return</span> dum.next;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>21天挑战，第一天写完所有题解花了2个多小时，很累，感觉全部写完工程量确实有点大，之后考虑当天先写一个题解，之后慢慢补</p><h2 id="渡何处"><a href="#渡何处" class="headerlink" title="渡何处"></a>渡何处</h2><blockquote><p>《卡萨布兰卡》</p><p>「你如今的气质里，藏着你走过的路，读过的书和热爱的人。」</p></blockquote><p>精简得好，路和书很明显，而对于人，不仅是你原生家庭的爱恨，还有恋人在你身上留下的痕迹，难呀~~</p>]]></content>
    
    
    <categories>
      
      <category>程序缘的内功修炼</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>labuladong</tag>
      
      <tag>链表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【唔】2022新年已至</title>
    <link href="/2022/01/01/2022-01-01-2022%E6%96%B0%E5%B9%B4%E5%B7%B2%E8%87%B3/"/>
    <url>/2022/01/01/2022-01-01-2022%E6%96%B0%E5%B9%B4%E5%B7%B2%E8%87%B3/</url>
    
    <content type="html"><![CDATA[<blockquote><p>2021已经过去，2022已经来临</p><p>在这看似仪式满满的时间点，其实也没有太大必要伤春悲秋，怒立旗帜（flag）~~</p><p>让我来记下些许小事，解构些隆重，冲淡些氛围</p><p>毕竟，每一天都是平等的，不能厚此薄彼，他们都是365分子中的一个呀</p></blockquote><h1 id="一只猫"><a href="#一只猫" class="headerlink" title="一只猫"></a>一只猫</h1><p>2021年的最后一天，本来是要在实验室写周报的，但是实验室的学长学姐可能要腻歪会儿，为了给他们创造些私人空间，我就回宿舍了</p><p>路上，看到一只猫，坐在老树根旁，跟我些许有些像，于是停下来和他唠会儿磕，他说他的猫语，我说我的人话</p><p><img src="/2022/01/01/2022-01-01-2022%E6%96%B0%E5%B9%B4%E5%B7%B2%E8%87%B3/%E7%8C%AB1.jpg" alt="猫1"></p><p>在掏出手机给他拍拍照留作新年礼物时，他倒挺心大，径直走到我脚旁坐下来，可能以为我也是个老树根吧，毕竟我不说猫话</p><p><img src="/2022/01/01/2022-01-01-2022%E6%96%B0%E5%B9%B4%E5%B7%B2%E8%87%B3/%E7%8C%AB2.jpg" alt="猫2"></p><p><img src="/2022/01/01/2022-01-01-2022%E6%96%B0%E5%B9%B4%E5%B7%B2%E8%87%B3/%E7%8C%AB3.jpg" alt="猫3"></p><p>在我脚边坐了会儿，挠了会儿痒，之后又自顾自地走了，对我也不留念，挺潇洒，既可以跟你亲近，又表现出不寄人篱下的骨气，猫中豪杰，respect！</p><p><img src="/2022/01/01/2022-01-01-2022%E6%96%B0%E5%B9%B4%E5%B7%B2%E8%87%B3/%E7%8C%AB4.jpg" alt="猫4"></p><p>看着猫哥在一旁舔自己，跟竹林隐士一般如入无人之境，而且这是隐于市的大隐境界，不得不肃然起敬</p><p><img src="/2022/01/01/2022-01-01-2022%E6%96%B0%E5%B9%B4%E5%B7%B2%E8%87%B3/%E7%8C%AB5.jpg" alt="猫5"></p><blockquote><p>他不留恋周围闲人，我也自不必留恋</p></blockquote><h1 id="往前走，莫回头"><a href="#往前走，莫回头" class="headerlink" title="往前走，莫回头"></a>往前走，莫回头</h1>]]></content>
    
    
    <categories>
      
      <category>我与我，周旋久</category>
      
    </categories>
    
    
    <tags>
      
      <tag>个人总结</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【苦】客户端嵌套浏览器内核：C#+WinForm+Cefsharp</title>
    <link href="/2021/12/29/2021-12-29-%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%B5%8C%E5%A5%97%E6%B5%8F%E8%A7%88%E5%99%A8%E5%86%85%E6%A0%B8CSharp+WinForm+Cefsharp/"/>
    <url>/2021/12/29/2021-12-29-%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%B5%8C%E5%A5%97%E6%B5%8F%E8%A7%88%E5%99%A8%E5%86%85%E6%A0%B8CSharp+WinForm+Cefsharp/</url>
    
    <content type="html"><![CDATA[<p>老师要求把之前做的Mediasoup网页端，做个客户端出来，目测是不难，但是实现的过程里遇到了很多坎，记录下过程，也是吐槽宣泄下情绪~~</p><h1 id="前期调研"><a href="#前期调研" class="headerlink" title="前期调研"></a>前期调研</h1><p>因为实验室的工程项目都是用C#做的，再加上自己最近学的Java形式风格和C#很像，于是没怎么思考就以C#为前提搜索了</p><h3 id="老旧库"><a href="#老旧库" class="headerlink" title="老旧库"></a>老旧库</h3><p>一开始搜到的，都是十几年前的技术：</p><ul><li>WebKit</li><li>WebBrowser</li><li><a href="https://github.com/Erls-Corporation/open-webkit-sharp">Open-Webkit-Sharp（WebKit的升级版）</a></li></ul><p>这些库都是十年前最后一次更新，一看都不是很好的选择</p><h3 id="CefSharp"><a href="#CefSharp" class="headerlink" title="CefSharp"></a>CefSharp</h3><p>搜到3个老旧库之后，于是把搜索时间缩短到1年之内，果然搜到了目前的选择：CefSharp。看了它的 <a href="https://github.com/cefsharp/CefSharp/">github</a>，最近一直在更新，于是顺利确定</p><h1 id="搭建工程并测试"><a href="#搭建工程并测试" class="headerlink" title="搭建工程并测试"></a>搭建工程并测试</h1><p>一开始参考这些教程：<a href="https://www.eskysky.com/1645.html">网址1</a>、<a href="https://www.cnblogs.com/SavionZhang/p/15169863.html">网址2</a></p><p>确实能成功运行，访问一些静态网站，但是对于我的Mediasoup项目（有一些JavaScript交互的），画面却一直卡住</p><p>于是继续去官网索罗，发现官方提供一个最小化配置的<a href="https://github.com/cefsharp/CefSharp.MinimalExample">工程demo</a>，在这个基础上你可以继续搭建你要的东西，于是开心下载，直接运行并访问我的服务器地址，成功，贼开心</p><blockquote><p>注：</p><p>如果Visual Studio里打开工程文件，里面有很多报错提示，可以不用管，直接运行是成功的。</p><ul><li>如果实在看不顺眼，可以将 <code>Any CPU</code> 改成 <code>x64</code> 或者 <code>x86</code> ，报错就会消失</li></ul></blockquote><h1 id="坎坷的插曲"><a href="#坎坷的插曲" class="headerlink" title="坎坷的插曲"></a>坎坷的插曲</h1><p>成功运行之后，第一件想做的事就是让软件初始化的时候，直接访问我的服务器地址，而不是 Google，想当然以为把代码里所有涉及到 <code>www.google.com</code> 的地方直接改成我的服务器IP地址， 结果跑下来并不对</p><p>于是想当然以为应该需要更深层次的修改，于是搜索关键词 <code>&quot;cefsharp网址&quot;</code> ，结果当时跳出来的都是关于“重定向”的，一开始没多细想，觉得重定向也行，判断当前访问的google网址的话，重定向到我的服务器就行。结果一顿搜，一顿试，一顿失败，整个人都丧了起来</p><blockquote><p>记录下对于“重定向”而言有用的网址，基本都提到要重写一个接口函数：</p><ul><li>个人博客类<ul><li><a href="https://blog.csdn.net/little_code/article/details/105515747">网址1</a></li><li><a href="http://www.cocoachina.com/articles/103105">网址2</a></li><li><a href="https://magpcss.org/ceforum/viewtopic.php?f=10&t=13320#p27200">网址3</a></li></ul></li><li>官方文档类<ul><li><a href="%5Bhttps://github.com/cefsharp/CefSharp/wiki/CefSharp%E4%B8%AD%E6%96%87%E5%B8%AE%E5%8A%A9%E6%96%87%E6%A1%A3#a1%5D(https://github.com/cefsharp/CefSharp/wiki/CefSharp%E4%B8%AD%E6%96%87%E5%B8%AE%E5%8A%A9%E6%96%87%E6%A1%A3#a1)">网址1</a></li><li><a href="https://github.com/cefsharp/CefSharp/wiki/General-Usage#request-handling">网址2</a></li></ul></li><li>可能不对口类<ul><li><a href="https://www.yesdotnet.com/archive/post/1619002218.html">网址1</a></li><li><a href="https://www.codebye.com/chromiumwebbrowser-loadpageasync.html">网址2</a></li></ul></li></ul></blockquote><p>后来准备放弃了，盯着界面发呆，突然发现我界面没有按钮，但是代码是写了按钮，这才发现我运行的不是我改的程序，惊呼WC~~</p><h4 id="所以教训来了"><a href="#所以教训来了" class="headerlink" title="所以教训来了~~"></a>所以教训来了~~</h4><p>Visual Studio里的解决方案可能包含多个工程文件，而你运行只会运行其中一个（粗体名字的那个），所以当你想运行另外一个文件时，就需要右键那个工程文件，点击 <code>设为启动项目</code> </p><blockquote><p>所以改初始化的地址，就只需要把初始化browser的网址换掉就行</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C#">browser = new ChromiumWebBrowser(&quot;www.google.com&quot;);<br>// 换成服务器IP即可<br>browser = new ChromiumWebBrowser(&quot;服务器IP&quot;)<br></code></pre></td></tr></table></figure><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>咋说呢，感觉这种很蠢的问题，真正要解决，都是在突然驻足的无意间发现的，不可复制</p><p>所以累了的时候，被打击了的时候，歇歇也不是坏事，说不定发个呆就发现问题在哪儿了hhh</p><h2 id="渡何处"><a href="#渡何处" class="headerlink" title="渡何处"></a>渡何处</h2><blockquote><p>《在人间》张子选</p><p>“你承诺过的月亮，还是没有出现；而我无眠，或者，我只是衣单天寒地，替你多爱了一夜人间。”</p></blockquote><p>写得好，我艳羡过这样的诗意和文笔，但对于现在的我而言，倒没有太大波澜了，人生还有太多要追寻的东西，不必留念~~</p>]]></content>
    
    
    <categories>
      
      <category>程序猿的技能栽树</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C#</tag>
      
      <tag>WinForm</tag>
      
      <tag>CefSharp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【嘿】关于代理的那些事儿</title>
    <link href="/2021/12/26/2021-12-26-%E5%85%B3%E4%BA%8E%E4%BB%A3%E7%90%86%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/"/>
    <url>/2021/12/26/2021-12-26-%E5%85%B3%E4%BA%8E%E4%BB%A3%E7%90%86%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/</url>
    
    <content type="html"><![CDATA[<p>对于科学上网这件事，都是我的舍友们给我开启了门，而之后的事情，便是我自己的一些摸索</p><h1 id="浏览器等普通上网"><a href="#浏览器等普通上网" class="headerlink" title="浏览器等普通上网"></a>浏览器等普通上网</h1><p>最开始是SSR（酸酸乳），后来是Clash。这些都是代理的工具，而具体用的服务器，就是要各凭本事找了，目前用的是渡口</p><div class="note note-info">            <p>渡口提供了各个系统的版本，我自己在Windows，Ubuntu，Android都实验成功，用到现在还挺好</p>          </div><blockquote><p>注：一些小问题</p><p>在安装了渡口以后，如果不开软件，可能就上不了网，暂时没研究出怎么改回去</p></blockquote><h1 id="CMD命令行"><a href="#CMD命令行" class="headerlink" title="CMD命令行"></a>CMD命令行</h1><p>在配各种环境的时候，常常是在CMD中敲命令行下载的:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh">pip install xxxx<br>conda install xxxx<br>npm install xxxx<br>.<br>.<br>.<br></code></pre></td></tr></table></figure><p>而这种情况下，即使你开了Clash也是不能代理的，需要额外执行下面语句：</p><div class="note note-info">            <p>Windows</p>          </div><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">set</span> http_proxy=http://127.0.0.1:7890<br><span class="hljs-built_in">set</span> https_proxy=http://127.0.0.1:7890<br></code></pre></td></tr></table></figure><div class="note note-info">            <p>Ubuntu</p>          </div><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">export</span> http_proxy=http://127.0.0.1:7890<br><span class="hljs-built_in">export</span> https_proxy=http://127.0.0.1:7890<br></code></pre></td></tr></table></figure><blockquote><p>注：</p><p>7890是Clash的默认代理端口</p><p>另外有个很奇怪的事没弄明白，即使我关闭Clash中的开关按钮，命令行里依然可以代理下载东西，感觉这个按钮只能管控浏览器的代理</p></blockquote><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>上述的两种代理方式，已经满足一个程序猿的大部分需求了</p><div class="note note-secondary">            <p>特别是CMD，之前配环境要用各种镜像源设置，而且可能不是最新的，现在直接去官方下，解决所有根本问题</p>          </div><p>翻过这座山，遍是烂漫花开</p><h2 id="渡何处"><a href="#渡何处" class="headerlink" title="渡何处"></a>渡何处</h2><blockquote><p>鲁迅</p><p>人一旦悟透了就会变得沉默，不是没有与人相处的能力，而是没有了逢人作戏的兴趣</p></blockquote><p>上学时只觉得鲁迅的文章晦涩难懂，等到了大学没了语文课，却每每被生活里的突现所惊艳。细细想来，并不是我成长成熟，而只是枯燥的理工世界让这亮色过于耀眼</p>]]></content>
    
    
    <categories>
      
      <category>程序猿的技能栽树</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Proxy</tag>
      
      <tag>CMD</tag>
      
      <tag>Clash</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【豁】重搭博客：Hexo+Fluid主题</title>
    <link href="/2021/12/25/2021-12-25-%E9%87%8D%E6%90%AD%E5%8D%9A%E5%AE%A2_Hexo_fluid/"/>
    <url>/2021/12/25/2021-12-25-%E9%87%8D%E6%90%AD%E5%8D%9A%E5%AE%A2_Hexo_fluid/</url>
    
    <content type="html"><![CDATA[<p>之前搭博客的时候，有很多小问题没有解决（网页显示有出入，Github也提示有安全漏洞），于是乎准备重搭下博客~~</p><h1 id="正确流程"><a href="#正确流程" class="headerlink" title="正确流程"></a>正确流程</h1><blockquote><p>以下流程针对Windows系统，已正确复现好几遍，放心食用~~</p></blockquote><h3 id="前期环境准备"><a href="#前期环境准备" class="headerlink" title="前期环境准备"></a>前期环境准备</h3><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript">因为最近成功在各个系统的网页+cmd上代理成功，所以现在偏向于用<span class="hljs-built_in">npm</span>安装所有环境~~<br></code></pre></td></tr></table></figure><ol><li>nvm</li></ol><blockquote><p>nvm是一种node版本管理器，可以兼容不同node版本并来回切换，强烈推荐~~</p></blockquote><p>去<a href="https://github.com/coreybutler/nvm-windows/releases">官网</a>下载 <code>nvm-setup.zip</code>，解压安装即可（装之前切记卸载所有node版本）</p><p>（另外参考：<a href="https://juejin.cn/post/6867816303025979399">网址</a>）</p><ol start="2"><li>node+npm</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 常用指令</span><br><span class="hljs-comment"># 1.显示系统已有的node版本</span><br>nvm list<br><span class="hljs-comment"># 2.安装指定版本的node+npm</span><br>nvm install x.x.x<br><span class="hljs-comment"># 3.使用指定版本的node_npm</span><br>nvm use x.x.x<br></code></pre></td></tr></table></figure><p>执行指令2+3即可</p><blockquote><p>注：</p><p>如果有安装乱码报错啥的，是因为cmd没有管理员权限，用管理员身份打开即可</p></blockquote><h3 id="Hexo搭建"><a href="#Hexo搭建" class="headerlink" title="Hexo搭建"></a>Hexo搭建</h3><blockquote><p>参考：<a href="https://blog.csdn.net/yaorongke/article/details/119089190">博客网址</a>，<a href="https://hexo.io/zh-cn/docs/">Hexo官网</a></p></blockquote><ol><li><p>安装Hexo</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">npm install -g hexo-cli<br></code></pre></td></tr></table></figure></li><li><p>新建项目并初始化</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># xxx如果省略，则不单独创建文件夹</span><br>hexo init xxx<br><span class="hljs-built_in">cd</span> xxx<br>npm install<br></code></pre></td></tr></table></figure></li><li><p>启动并测试</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># g: generate，编译生成可执行文件</span><br>hexo g<br><span class="hljs-comment"># s: server，本地测试</span><br>hexo s<br></code></pre></td></tr></table></figure></li><li><p>访问：<a href="http://localhost:4000，会看到如下图所示，即为测试成功">http://localhost:4000，会看到如下图所示，即为测试成功</a>~~</p></li></ol><p><img src="/2021/12/25/2021-12-25-%E9%87%8D%E6%90%AD%E5%8D%9A%E5%AE%A2_Hexo_fluid/Hexo%E5%88%9D%E5%A7%8B%E5%8C%96%E7%9A%84%E7%BD%91%E7%AB%99%E7%95%8C%E9%9D%A2.png" alt="Hexo初始化的网站界面"></p><h3 id="Fluid主题安装"><a href="#Fluid主题安装" class="headerlink" title="Fluid主题安装"></a>Fluid主题安装</h3><blockquote><p>参考：<a href="https://hexo.fluid-dev.com/docs/start/">Fluid官网</a></p></blockquote><ol><li><p>博客目录里执行命令，下载Fluid</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">npm install --save hexo-theme-fluid<br></code></pre></td></tr></table></figure></li><li><p>复制 <code>./themes/fluid/_config.yml</code> 到博客根目录下，并改名为 <code>_config.fluid.yml</code> </p></li><li><p>修改 <code>_config_yml</code> 中的 <code> theme</code> 和 <code>language</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">theme:</span> <span class="hljs-string">fluid</span>  <span class="hljs-comment"># 指定主题</span><br><span class="hljs-attr">language:</span> <span class="hljs-string">zh-CN</span>  <span class="hljs-comment"># 指定语言，会影响主题显示的语言，按需修改</span><br></code></pre></td></tr></table></figure></li><li><p>启动并测试，同样访问：<a href="http://localhost:4000，测试成功">http://localhost:4000，测试成功</a>~~</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># g: generate，编译生成可执行文件</span><br>hexo g<br><span class="hljs-comment"># s: server，本地测试</span><br>hexo s<br></code></pre></td></tr></table></figure></li></ol><h1 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h1><p>记录些基本操作：</p><h3 id="“关于”-页面"><a href="#“关于”-页面" class="headerlink" title="“关于” 页面"></a>“关于” 页面</h3><ol><li><p>生成 “关于” 页面</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">hexo new page about<br></code></pre></td></tr></table></figure></li><li><p>修改关于页面内容：<code>/source/about/index.md</code></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs markdown">---<br>title: about<br>date: 2020-02-23 19:20:33<br><span class="hljs-section">layout: about</span><br><span class="hljs-section">---</span><br><br>这里写关于页的正文，支持 Markdown, HTML<br></code></pre></td></tr></table></figure></li></ol><h3 id="普通日志"><a href="#普通日志" class="headerlink" title="普通日志"></a>普通日志</h3><ol><li><p>修改 Hexo 博客目录中的 <code>_config.yml</code>，打开这个配置是为了在生成文章的时候生成一个同名的资源目录用于存放图片文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">post_asset_folder:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure></li><li><p>生成普通日志</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">hexo new post xxxx-xx-xx-xxxxxxxxxx<br></code></pre></td></tr></table></figure><p>执行完即可在<code>source/_posts</code>目录下生成了一个md文件和一个同名的资源目录(用于存放图片)</p></li></ol><h3 id="Hexo的专属小语法"><a href="#Hexo的专属小语法" class="headerlink" title="Hexo的专属小语法"></a>Hexo的专属小语法</h3><h5 id="普通标签"><a href="#普通标签" class="headerlink" title="普通标签"></a>普通标签</h5><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs django"><span class="xml">#格式，其中xxx可选：primary secondary success danger info light </span><br><span class="xml"></span><span class="hljs-template-tag">&#123;% <span class="hljs-name">note</span> xxx %&#125;</span><span class="xml"></span><br><span class="xml">xxxx(文字和 markdown 语法皆可)</span><br><span class="xml"></span><span class="hljs-template-tag">&#123;% <span class="hljs-name">endnote</span> %&#125;</span><br></code></pre></td></tr></table></figure><p>例如：</p><ol><li></li></ol><div class="note note-primary">            <p>primary</p>          </div><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs django"><span class="hljs-template-tag">&#123;% <span class="hljs-name">note</span> primary %&#125;</span><span class="xml"></span><br><span class="xml">primary</span><br><span class="xml"></span><span class="hljs-template-tag">&#123;% <span class="hljs-name">endnote</span> %&#125;</span><br></code></pre></td></tr></table></figure><ol start="2"><li></li></ol><div class="note note-secondary">            <p>secondary</p>          </div><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs django"><span class="hljs-template-tag">&#123;% <span class="hljs-name">note</span> secondary %&#125;</span><span class="xml"></span><br><span class="xml">secondary</span><br><span class="xml"></span><span class="hljs-template-tag">&#123;% <span class="hljs-name">endnote</span> %&#125;</span><br></code></pre></td></tr></table></figure><ol start="3"><li></li></ol><div class="note note-success">            <p>success</p>          </div><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs subunit">&#123;% note success %&#125;<br><span class="hljs-keyword">success</span><br><span class="hljs-keyword"></span>&#123;% endnote %&#125;<br></code></pre></td></tr></table></figure><ol start="4"><li></li></ol><div class="note note-danger">            <p>danger</p>          </div><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs django"><span class="hljs-template-tag">&#123;% <span class="hljs-name">note</span> danger %&#125;</span><span class="xml"></span><br><span class="xml">danger</span><br><span class="xml"></span><span class="hljs-template-tag">&#123;% <span class="hljs-name">endnote</span> %&#125;</span><br></code></pre></td></tr></table></figure><ol start="5"><li></li></ol><div class="note note-info">            <p>info</p>          </div><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&#123;%<span class="hljs-built_in"> note </span><span class="hljs-builtin-name">info</span> %&#125;<br><span class="hljs-builtin-name">info</span><br>&#123;% endnote %&#125;<br></code></pre></td></tr></table></figure><p>6.</p><div class="note note-light">            <p>light</p>          </div><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs django"><span class="hljs-template-tag">&#123;% <span class="hljs-name">note</span> light %&#125;</span><span class="xml"></span><br><span class="xml">light</span><br><span class="xml"></span><span class="hljs-template-tag">&#123;% <span class="hljs-name">endnote</span> %&#125;</span><br></code></pre></td></tr></table></figure><h5 id="行内标签"><a href="#行内标签" class="headerlink" title="行内标签"></a>行内标签</h5><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mel">#格式，其中xxx可选：primary <span class="hljs-keyword">default</span> info success <span class="hljs-keyword">warning</span> danger<br>&#123;% label xxx @文字 %&#125;<br></code></pre></td></tr></table></figure><ol><li></li></ol><span class="label label-primary">文字</span><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs django"><span class="hljs-template-tag">&#123;% <span class="hljs-name">label</span> primary @文字 %&#125;</span><br></code></pre></td></tr></table></figure><ol start="2"><li></li></ol><span class="label label-default">文字</span><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mel">&#123;% label <span class="hljs-keyword">default</span> @文字 %&#125;<br></code></pre></td></tr></table></figure><ol start="3"><li></li></ol><span class="label label-info">文字</span><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs django"><span class="hljs-template-tag">&#123;% <span class="hljs-name">label</span> info @文字 %&#125;</span><br></code></pre></td></tr></table></figure><ol start="4"><li></li></ol><span class="label label-success">文字</span><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs django"><span class="hljs-template-tag">&#123;% <span class="hljs-name">label</span> success @文字 %&#125;</span><br></code></pre></td></tr></table></figure><ol start="5"><li></li></ol><span class="label label-warning">文字</span><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mel">&#123;% label <span class="hljs-keyword">warning</span> @文字 %&#125;<br></code></pre></td></tr></table></figure><ol start="6"><li></li></ol><span class="label label-danger">文字</span><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs django"><span class="hljs-template-tag">&#123;% <span class="hljs-name">label</span> danger @文字 %&#125;</span><br></code></pre></td></tr></table></figure><h3 id="Github-gitee发布"><a href="#Github-gitee发布" class="headerlink" title="Github+gitee发布"></a>Github+gitee发布</h3><blockquote><p>参考：<a href="https://blog.csdn.net/yakuaback/article/details/104513748">网址</a></p></blockquote><ol><li><p>安装 <code>hexo-deployer-git</code> </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">npm install hexo-deployer-git --save<br></code></pre></td></tr></table></figure></li><li><p>Github 和 Gitee 中新建仓库</p><blockquote><p>Github 仓库名称为：xxxxx.github.io</p><p>Gitee 仓库名称为：xxxxx</p></blockquote></li><li><p>修改根目录下的 <code>_config.yml</code>，配置 <code>deploy</code> 相关信息</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>  <span class="hljs-attr">repo:</span> <br>    <span class="hljs-attr">github:</span> <span class="hljs-string">git@github.com:oldsandyoungman/oldsandyoungman.github.io.git</span><br>    <span class="hljs-attr">gitee:</span> <span class="hljs-string">git@gitee.com:oldsandyoungman/oldsandyoungman.git</span><br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">main</span><br>  <span class="hljs-comment"># token: xxxxxxxxxxxxxx</span><br></code></pre></td></tr></table></figure><div class="note note-info">            <p>注：</p><p>因为我之前配置git时配置了SSH密钥，所以不需要最后一行token（token是用https链接访问时要用到的，获取方式： <code>GitHub</code>  -  <code>Settings</code> - <code>Developer settings</code> - <code>Personal access tokens</code> - <code>Generate new token</code>）</p>          </div></li><li><p>部署到 <code>Github</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">hexo g -d<br></code></pre></td></tr></table></figure></li><li><p>访问 <code>https://oldsandyoungman.github.io</code> 或者 <code>https://oldsandyoungman.gitee.io</code> 即可</p></li></ol><div class="note note-success">            <p>基本内容就这些惹，还有很多细节可以之后再补充（基本都在 <code>_config.fluid.yml</code> 里，而且是中文注释，没啥大问题的）</p>          </div><h1 id="其它一些小记"><a href="#其它一些小记" class="headerlink" title="其它一些小记"></a>其它一些小记</h1><p>一开始找教程的时候，想的还是原来的next主题，参考了官网和其它一些网址：<a href="https://github.com/next-theme/hexo-theme-next">网址1</a>、<a href="https://theme-next.js.org/">网址2</a></p><p>但是部署到Github上时，总是加载不全，最后不得不放弃next主题。后来看看Fluid主题也很顺眼，甚至觉得高级感也有，于是就换成Fluid的了</p><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>搭完了，也累了，洗洗睡了</p><h2 id="渡何处"><a href="#渡何处" class="headerlink" title="渡何处"></a>渡何处</h2><blockquote><p>《言叶之庭》</p><p>隐约雷鸣，阴霾天空，但盼风雨来，能留你在此</p><p>隐约雷鸣，即使天无雨，我亦留此地</p></blockquote><p>看了<a href="https://www.bilibili.com/video/BV1MY411W78X">木鱼水心的《言叶之庭》拉片</a>，第一次看拉片，对于拉片这个类型的视频真的由衷敬佩，也对电影本身以及导演的考虑respect。觉得新海诚这个导演可以再了解了解，刻画得这么细腻，要么本身有类似经历，要么就是感官的敏锐成为某种程度的天才</p>]]></content>
    
    
    <categories>
      
      <category>程序员的优雅之路</category>
      
    </categories>
    
    
    <tags>
      
      <tag>GitHub / Gitee</tag>
      
      <tag>Blog</tag>
      
      <tag>Fluid主题</tag>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【嗯】装Ubuntu系统</title>
    <link href="/2021/12/21/2021-12-21-%E8%A3%85Ubuntu%E7%B3%BB%E7%BB%9F/"/>
    <url>/2021/12/21/2021-12-21-%E8%A3%85Ubuntu%E7%B3%BB%E7%BB%9F/</url>
    
    <content type="html"><![CDATA[<p>因为要做毕设的开题报告，准备稍微copy点别人的代码跑通找找自信（嘿嘿）。然后大部分人深度学习的环境都是建在ubuntu上，吃过太多windows配环境的苦的我，决定重装下ubuntu系统从头开始（配环境总让人觉得电脑深处有太多奇怪的环境配置残留，重启大法总是让人舒畅，遇事不决重装就对了~~）</p><p>在笔记本和台式机上都重装成功之后，记录下过程，留给未来作参考~~</p><h1 id="系统盘制作"><a href="#系统盘制作" class="headerlink" title="系统盘制作"></a>系统盘制作</h1><h3 id="清单"><a href="#清单" class="headerlink" title="清单"></a>清单</h3><ul><li><p>U盘</p><p>一个8G的U盘应该足够应付任何版本的Ubuntu系统了</p></li><li><p><a href="https://rufus.ie/zh/">rufus</a>（免费）/ UltralSO（要想办法，易破解之类）</p><p>两个软件都行，感觉rufus操作更简单些</p></li><li><p><a href="https://ubuntu.com/download/alternative-downloads">Ubuntu镜像文件</a></p></li></ul><p><img src="/2021/12/21/2021-12-21-%E8%A3%85Ubuntu%E7%B3%BB%E7%BB%9F/ubuntu%E5%8E%86%E5%8F%B2%E9%95%9C%E5%83%8F%E4%B8%8B%E8%BD%BD.png" alt="ubuntu历史镜像下载"></p><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><p>下载好镜像文件，插入U盘，打开rufus，选择好U盘和镜像文件，其它都是默认，点开始就行（好像也不用格式化233）</p><p><img src="/2021/12/21/2021-12-21-%E8%A3%85Ubuntu%E7%B3%BB%E7%BB%9F/rufus%E5%88%B6%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9B%98.png" alt="ubuntu历史镜像下载"></p><h1 id="Ubuntu系统安装"><a href="#Ubuntu系统安装" class="headerlink" title="Ubuntu系统安装"></a>Ubuntu系统安装</h1><h3 id="步骤-1"><a href="#步骤-1" class="headerlink" title="步骤"></a>步骤</h3><ol><li>重启电脑，疯狂按键弹出BIOS</li></ol><blockquote><p>笔记本（暗影精灵）：ESC</p><p>台式电脑：F12</p></blockquote><ol start="2"><li><p>选择U盘启动（可以不用UEFI）</p></li><li><p>进入Ubuntu安装界面，一次选择：</p></li></ol><ul><li>语言：中文</li><li>键盘布局：英文（美）</li><li>有跳wifi界面就连wifi</li><li>不安装第三方的东西</li><li>清空整个磁盘安装（个人倾向的强迫症，分配空间总是会失败）</li><li>时间：上海</li><li>设置用户名和密码</li></ul><ol start="4"><li>关机，拔掉U盘重启，进入安装好的Ubuntu系统</li></ol><blockquote><p>注：</p><p>如果是18.04版本，进入系统有可能出现屏幕倒置的问题：</p><p>解决办法：右上角的设置旁边的按钮，是禁用自动翻转，禁用后重启即可</p></blockquote><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>暂时就这些内容，关于Ubuntu系统装哪些软件，准备开另外一篇文章写写</p><p>然后想额外设置个小栏目《渡何处》，每篇文章都加一些最近看到的有意思的话做结~~</p><h2 id="渡何处"><a href="#渡何处" class="headerlink" title="渡何处"></a>渡何处</h2><blockquote><p>任何过于先进的科技对普通人来说都像是魔法一样。你们觉得那可能是魔法，但那只是你未曾企及的科技而已</p></blockquote><p>来自采访稚晖君的<a href="https://b23.tv/z2T7Fnr">视频</a>，有时候学累了，看看大佬们的人文性质的思考，确实能补充点鸡血。</p><p>愿我也有对技术最纯粹的追求和热爱，来抵抗未来的所有迷茫坎坷~~</p>]]></content>
    
    
    <categories>
      
      <category>天下苦配环境久矣</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Ubuntu</tag>
      
      <tag>装系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【省】重启博客</title>
    <link href="/2021/12/20/2021-12-20-%E9%87%8D%E5%90%AF%E5%8D%9A%E5%AE%A2/"/>
    <url>/2021/12/20/2021-12-20-%E9%87%8D%E5%90%AF%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>好久不见，甚是想念~~</p><p>大四心血来潮，想建一个博客，结果3分钟热度，写了搭建博客的过程+鬼畜学习之路，就停更了。</p><p>因为我自己每天在有道云上写日记，所以也并没有输出需求的问题，所以博客目前对我而言的意义其实是一个展示平台。</p><p>但最近，因为我的日记愈显纷繁杂乱，在找之前一些配置工程的笔记时，花了很长时间甚至没找到（有道云的搜索功能感觉不是那么靠谱），再加上最近再填微软的暑期实习报名时提到了一条个人博客，所以综上两条原因，我想重启下我的博客，在最后找工作前，丰富下我的github内容，看起来更高级些~~</p><h1 id="博客的内容规整"><a href="#博客的内容规整" class="headerlink" title="博客的内容规整"></a>博客的内容规整</h1><p>重启还是需要一些仪式感滴，于是把博客的分类稍作细化规整~~</p><p>暂时分成了下面几个栏目：</p><blockquote><ul><li>程序媛的优雅之路<ul><li>一些可视化的工作，例如博客的配置，网页的制作</li></ul></li><li>天下苦配环境久矣<ul><li>各种配环境的过程记录，报错梳理</li></ul></li><li>程序猿的技能栽树<ul><li>各种项目所用的框架学习，记录些基本指令</li></ul></li><li>程序缘的内功修炼<ul><li>各种基本功，例如数据结构与算法、计算机网络</li></ul></li><li>另一个我之鬼畜求索<ul><li>学习鬼畜制作的工作手册</li></ul></li><li>另一个我之摄影<ul><li>学习摄影的点滴记录</li></ul></li><li>我与我，周旋久<ul><li>写点随笔，随想</li></ul></li></ul></blockquote><p>然后最近也在学摄影，所以首页和文章的配图就用最近觉得拍得好看的皂片~~</p><h1 id="寄语"><a href="#寄语" class="headerlink" title="寄语"></a>寄语</h1><p>定个小目标，希望自己一周能更新一篇文章，这样就能在找工作之前丰满起来~~</p><p>其实现在我已经积累了很多素材了，比如配各种环境，webrtc的学习笔记，所以其实即使这周没什么素材，也可以整理之前的内容</p><p>加油，冲冲冲~~</p>]]></content>
    
    
    <categories>
      
      <category>我与我，周旋久</category>
      
    </categories>
    
    
    <tags>
      
      <tag>个人总结</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【记】博客进阶_小功能1</title>
    <link href="/2020/04/04/2020-04-04-%E5%8D%9A%E5%AE%A2%E8%BF%9B%E9%98%B6_%E5%B0%8F%E5%8A%9F%E8%83%BD1/"/>
    <url>/2020/04/04/2020-04-04-%E5%8D%9A%E5%AE%A2%E8%BF%9B%E9%98%B6_%E5%B0%8F%E5%8A%9F%E8%83%BD1/</url>
    
    <content type="html"><![CDATA[<p>不想学习~~</p><p>然后就在摸索一些博客的小功能，看到别人的评论区和访客统计很羡慕，所以用了一些时间把这些功能摸索出来，整理如下：</p><br><h1 id="添加评论区"><a href="#添加评论区" class="headerlink" title="添加评论区"></a>添加评论区</h1><p>这个借鉴的也就是原来搭博客教程的那位<a href="http://logos23333.top/other/2018/02/12/%E4%BA%94%E5%88%86%E9%92%9F%E5%BB%BA%E5%A5%BD%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/">仁兄</a>，用的是<a href="https://livere.com/">来必力</a>。</p><h3 id="注册账号"><a href="#注册账号" class="headerlink" title="注册账号"></a>注册账号</h3><p>这步其实没什么困难，但是因为是韩国网站，在填写发到邮箱的验证码时，它的页面是不自动跳转的，然后提示信息是韩文我也没看，所以我一直以为是没反应，点了3、4次发送验证码，后来去百度翻译了一下才懂，很尴尬hh~</p><h3 id="生成代码"><a href="#生成代码" class="headerlink" title="生成代码"></a>生成代码</h3><p>填写你的网站域名（xxx.github.io），就可以生成代码：</p><p><img src="/2020/04/04/2020-04-04-%E5%8D%9A%E5%AE%A2%E8%BF%9B%E9%98%B6_%E5%B0%8F%E5%8A%9F%E8%83%BD1/1.jpg" alt="代码示例"><br>重要的信息是图中的 <code>uid</code> ，即黄色部分的一串代码。</p><h3 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><p>打开 <code>_config.yml</code> 文件，搜索 “livere” ，将上面的那串 <code>uid</code> 代码填入相应位置即可</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># Support for LiveRe comments system.</span><br><span class="hljs-comment"># You can get your uid from https://livere.com/insight/myCode (General web site)</span><br><span class="hljs-attr">livere_uid:</span> <span class="hljs-string">xxxxxxxx</span><br></code></pre></td></tr></table></figure><br><br><h1 id="添加访客统计"><a href="#添加访客统计" class="headerlink" title="添加访客统计"></a>添加访客统计</h1><p>使用的是 <a href="https://leancloud.cn/">leancloud</a> ，参考自 <a href="https://blog.csdn.net/laugh12321/article/details/85232176">博客</a> (里面也有其他很多小功能，以后有时间再研究)</p><h3 id="注册账号-1"><a href="#注册账号-1" class="headerlink" title="注册账号"></a>注册账号</h3><p>进入 <code>控制台</code> 注册，需要实名认证，不然不能创建应用</p><h3 id="创建应用，生成Keys"><a href="#创建应用，生成Keys" class="headerlink" title="创建应用，生成Keys"></a>创建应用，生成Keys</h3><p>起一个名字，单击创建即可<img src="/2020/04/04/2020-04-04-%E5%8D%9A%E5%AE%A2%E8%BF%9B%E9%98%B6_%E5%B0%8F%E5%8A%9F%E8%83%BD1/2.jpg" alt="代码示例"></p><p>点击上图的 <code>设置</code> 按钮，并进入 <code>应用Keys</code><img src="/2020/04/04/2020-04-04-%E5%8D%9A%E5%AE%A2%E8%BF%9B%E9%98%B6_%E5%B0%8F%E5%8A%9F%E8%83%BD1/3.jpg" alt="代码示例"></p><p>复制上面的 <code>AppID</code> 和 <code>AppKey</code> </p><h3 id="修改配置文件-1"><a href="#修改配置文件-1" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><p>打开 <code>_config.yml</code> 文件，搜索 “leancloud” ，将上面的 <code>AppID</code> 和 <code>AppKey</code> 分别填入相应位置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># Show number of visitors to each article.</span><br><span class="hljs-comment"># You can visit https://leancloud.cn get AppID and AppKey.</span><br><span class="hljs-attr">leancloud_visitors:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">app_id:</span> <span class="hljs-string">xxxxxxx</span> <span class="hljs-comment">#&lt;app_id&gt;</span><br>  <span class="hljs-attr">app_key:</span> <span class="hljs-string">xxxxxxx</span> <span class="hljs-comment">#&lt;app_key&gt;</span><br></code></pre></td></tr></table></figure><p>打开 <code>_includes/_partials/footer.html</code> 文件</p><ul><li><p>在 <code>&lt;div class=&quot;copyright&quot; &gt;</code> 之前加入下面的代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">async</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>在 <code> &#123;沙% if site.copyright %哥&#125; </code> 之后加入下面的代码：</p><p>（上面的“沙”“哥”是为了防止报错，不加的话在编译过程中会误认为是logic tag，自己没有好好学过这些知识，以后看看能不能有更好的办法美化一下）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;powered-by&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;fa fa-user-md&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;busuanzi_container_site_uv&quot;</span>&gt;</span><br>  本站访客数:<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;busuanzi_value_site_uv&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><p>然后就ok啦~~</p>]]></content>
    
    
    <categories>
      
      <category>程序员的优雅之路</category>
      
    </categories>
    
    
    <tags>
      
      <tag>GitHub / Gitee</tag>
      
      <tag>Blog</tag>
      
      <tag>Next主题</tag>
      
      <tag>Jekyll</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【记】鬼畜沙哥成长记</title>
    <link href="/2020/03/28/2020-03-28-%E5%88%9D%E9%81%87%E9%AC%BC%E7%95%9C/"/>
    <url>/2020/03/28/2020-03-28-%E5%88%9D%E9%81%87%E9%AC%BC%E7%95%9C/</url>
    
    <content type="html"><![CDATA[<p>从搭建博客到现在写了两三篇博文，自己花了很多时间成本，试验出一些能在Github上正确显示的写法，但依然有很多小问题没能解决（现在的状态是勉强让我的审美强迫症安分下来，hia）</p><p>大一的时候（也就是2016年），自己才真正意义上接触B站，接触鬼畜，当时被几个视频震撼了，觉得卧槽还能这样，牛逼牛逼~~</p><blockquote><p><a href="https://www.bilibili.com/video/BV1Zs411X7N9">【康熙说唱王朝】部落到帝国·怒斥群臣</a></p><p><a href="https://www.bilibili.com/video/BV12s411S7w8">【三国笑传】你见过这么魔性的曹操吗？</a></p></blockquote><br><p>之后便立下一个flag，要自己做一个鬼畜视频。</p><p>结果这一立，就是3年过去了，自己学习、思想上都迷茫了一阵子，大四才侥幸有了时间，在毕业设计的间隙中，抽了一个礼拜学习做了一下，拙作如下，请君莫笑~~：</p><blockquote><p><a href="https://www.bilibili.com/video/BV1LE411c7o5">【半鬼畜+半剪辑】罗翔老师之圆圈正义论</a></p></blockquote><br><p>过程很艰难，可能不是鬼畜的料，略作小叙，给未来的自己留下些笑料~~</p><br><br><h1 id="鬼畜分类"><a href="#鬼畜分类" class="headerlink" title="鬼畜分类"></a>鬼畜分类</h1><p>觉得这个挺有必要聊聊的，因为一开始没有分清些概念，一通瞎学，学了很多我不喜欢类型的鬼畜制作方法，时间成本有些多~~</p><p>下面是我的认知分类</p><blockquote><p>鬼畜调教：视频的剪辑拼凑（画面+声音）。没有调音（改变声音的音调）</p><ul><li>工具：视频软件即可，如：Vegas，Pr 等。</li></ul><p>音MAD：视频的剪辑拼凑（画面+声音）。会单独对声音进行调音，并且声音往往选择一个片段（乐器或者人声），调节出不同时间长短不同音高，来拼接成完整的曲目。</p><ul><li>工具：视频软件（如 Vegas，Pr 等），调音工具（如 UTAU，Melody，FL studio ，Au等）。</li></ul><p>人力VOCALOID：视频的剪辑拼凑（画面+声音）。会单独对声音进行调音，并且在此基础上，进行填词（这个是大手笔）。</p><ul><li>工具：视频软件（如 Vegas，Pr 等），调音工具（如 UTAU，Melody，FL studio ，Au等）。</li></ul></blockquote><p>在B站上找资源学习的时候，大部分其实都是关于后两者的教程，但我目前其实更想做鬼畜调教（更有鬼畜的那种通过反复倒放的原始趣味性，也更容易些 hia~~），音MAD 和 人力VOCALOID 可能要等我好好学习积累点内功才行（一不小心就会让声音失真，听不出来是谁的声音，所以调音是一门很大的学问）。</p><br><br><h1 id="鬼畜调教之How-to-play"><a href="#鬼畜调教之How-to-play" class="headerlink" title="鬼畜调教之How to play"></a>鬼畜调教之How to play</h1><p>鬼畜调教的教程其实少的可怜，因为使用软件之类的虽然可以出教程比较显式，但是会用之后，更复杂的，如何反复如何踩点如何调词序，有太多细节和无法成文成系统的东西，不大好出教程，感觉只能靠自己摸索和看大佬的教程去感受，有些小僵硬。</p><blockquote><p>关于踩点和调词序，这些除了鬼畜方面的技巧，个人感觉其实很大程度上还是跟乐理音律的硬知识有关（鬼畜也要音乐人的基本素养，诶~~）</p></blockquote><p>所以这里给出一些我搜刮下来比较好的教程，慢慢铺垫，我自己有时间也可以从头好好学学。</p><br><h3 id="视频软件教程——Vegas"><a href="#视频软件教程——Vegas" class="headerlink" title="视频软件教程——Vegas"></a>视频软件教程——Vegas</h3><p>对于鬼畜，其实视频软件更推荐Vegas（个人的经验是，因为鬼畜需要大量的伸缩音频的时间长短，这个在Pr等软件里较为僵硬，自己要手动取输入，而在Vegas里只要拖一下鼠标就行）。</p><blockquote><p>觉得讲得最详细最耐心的教程：<a href="https://www.bilibili.com/video/BV16E411d7rD">Vegas-从零基础到大神视频教程</a></p></blockquote><br><h3 id="关于节奏打点"><a href="#关于节奏打点" class="headerlink" title="关于节奏打点"></a>关于节奏打点</h3><p>其实本质上学了视频软件后，基本没啥可以再学的，之后就是自己瞎玩玩 ~~ 不过有一个视频觉得对我帮助很大，就是如何将一个BGM的节拍可视化出来，这个对于后期调词序踩点啥的都很有用，非常推荐。</p><blockquote><p>卡点推荐：<a href="https://www.bilibili.com/video/BV1qb411K74x">100%卡点教学</a></p></blockquote><br><br><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>是的，这么快就到结语了，因为真的没啥可以系统学习了，全靠后期的积累和一时的灵感。就多看大佬的作品，自己也多练习，两者结合并重复，必将大成~~</p><blockquote><p> 祝你成为超人！</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>鬼畜的求索之路</category>
      
    </categories>
    
    
    <tags>
      
      <tag>鬼畜</tag>
      
      <tag>Vegas</tag>
      
      <tag>FL studio</tag>
      
      <tag>B站</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【待】博客进阶手册</title>
    <link href="/2020/03/28/2020-03-28-%E5%8D%9A%E5%AE%A2%E8%BF%9B%E9%98%B6%E6%89%8B%E5%86%8C/"/>
    <url>/2020/03/28/2020-03-28-%E5%8D%9A%E5%AE%A2%E8%BF%9B%E9%98%B6%E6%89%8B%E5%86%8C/</url>
    
    <content type="html"><![CDATA[<p>从搭建博客到现在写了两三篇博文，自己花了很多时间成本，试验出一些能在Github上正确显示的写法，但依然有很多小问题没能解决（现在的状态是勉强让我的审美强迫症安分下来，hia）</p><p>之后的进阶或是小问题的解决，其实就是不断地学习基础知识了，路漫漫修远哉 ~~</p><p>先列出以后要学的东西，至于实不实现，可能要到好久以后bia ~~</p><blockquote><ul><li>HTML语言</li><li>CSS</li><li>Jekyll（<a href="http://jekyllcn.com/docs/home/">官方文档</a>）</li><li>Typora（<a href="https://sspai.com/post/54912">大佬的博客</a>，<a href="http://support.typora.io/">官方文档（有太多细节）</a>）</li></ul></blockquote><br><p>要忙一段时间学习啦，这个暂且丢下，来日再见~~</p>]]></content>
    
    
    <categories>
      
      <category>程序员的优雅之路</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Blog</tag>
      
      <tag>Jekyll</tag>
      
      <tag>markdown</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【记】markdown基本语法总结</title>
    <link href="/2020/03/27/2020-03-27-markdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95%E6%80%BB%E7%BB%93/"/>
    <url>/2020/03/27/2020-03-27-markdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<p>一条一条慢慢来 ~<br>&emsp;<br><br></p><br><h1 id="换行：-lt-br-gt"><a href="#换行：-lt-br-gt" class="headerlink" title="换行：&lt;br&gt;"></a>换行：<code>&lt;br&gt;</code></h1><br><br># 空格：```&emsp;xxx``` 在&emsp;很久很久&emsp;以前<br><br># 首行缩进：```&emsp;&emsp;xxx```&emsp;&emsp;在很久很久以前<br><br># 分割线：--- ---<br># 大小标题：前面加n个 “#”<h1 id="Heading-1"><a href="#Heading-1" class="headerlink" title="Heading 1"></a>Heading 1</h1><h2 id="Heading-2"><a href="#Heading-2" class="headerlink" title="Heading 2"></a>Heading 2</h2><h3 id="Heading-3"><a href="#Heading-3" class="headerlink" title="Heading 3"></a>Heading 3</h3><h4 id="Heading-4"><a href="#Heading-4" class="headerlink" title="Heading 4"></a>Heading 4</h4><h5 id="Heading-5"><a href="#Heading-5" class="headerlink" title="Heading 5"></a>Heading 5</h5><h6 id="Heading-6"><a href="#Heading-6" class="headerlink" title="Heading 6"></a>Heading 6</h6><br><br># 文字效果：## 超链接：```[域名](www.xxx.com)```效果： [百度](https://www.baidu.com)<br>## 加粗：```**xxx**```效果：**Strong text**<br>## 斜体：```*xxx*```效果：*Italic text*<br>## 下划线：```<u>xxxx</u>```效果：<u>Underline text</u><br><h2 id="删除线：-xxx"><a href="#删除线：-xxx" class="headerlink" title="删除线：~~xxx~~"></a>删除线：<code>~~xxx~~</code></h2><p>效果：<del>Deleted text</del><br><br></p><h2 id="小代码块：just-xxx-这样"><a href="#小代码块：just-xxx-这样" class="headerlink" title="小代码块：just` xxx `这样"></a>小代码块：<code>just` xxx `这样</code></h2><p>效果：<code>Sed erat diam</code><br><br></p><h2 id="大代码块："><a href="#大代码块：" class="headerlink" title="大代码块："></a>大代码块：</h2><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">按tab键（就像这一行）<br><span class="hljs-title">或者:</span><br>`沙`哥`C（去掉沙哥，仅演示）<br>xxx<br>`沙`哥`（去掉沙哥，仅演示）<br></code></pre></td></tr></table></figure><p>效果：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;Hello World!\n&quot;</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><br><h2 id="引用文章：-gt-xxx"><a href="#引用文章：-gt-xxx" class="headerlink" title="引用文章：&gt;xxx"></a>引用文章：<code>&gt;xxx</code></h2><p>效果：</p><blockquote><p>我可没说过。                ——鲁迅    </p></blockquote><br>## 上浮 & 下沉：<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml">上浮：<span class="hljs-tag">&lt;<span class="hljs-name">sup</span>&gt;</span>xxx<span class="hljs-tag">&lt;/<span class="hljs-name">sup</span>&gt;</span><br>下沉：<span class="hljs-tag">&lt;<span class="hljs-name">sub</span>&gt;</span>xxx<span class="hljs-tag">&lt;/<span class="hljs-name">sub</span>&gt;</span><br></code></pre></td></tr></table></figure>效果： <sup>上浮</sup> 正常 <sub>下沉</sub> <br><br><h1 id="编号"><a href="#编号" class="headerlink" title="编号"></a>编号</h1><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">a</span>.数字编号：<br></code></pre></td></tr></table></figure><ol><li>一</li><li>二</li><li>三<br></li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">b</span>.符号编号：- xxxx<br></code></pre></td></tr></table></figure><ul><li>一</li><li>二</li><li>三<br></li></ul><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">c.引用里编号：&gt;* <span class="hljs-comment">(空格)</span>xxx<br></code></pre></td></tr></table></figure><blockquote><p>沙哥牛逼（打了空格首行缩进，但木有显示，不知道咋解决，嘤嘤嘤）</p><ul><li>每日几句 </li><li>如果你发现一个事物很绚烂，要么真牛逼，要么快死掉了。</li><li>我的成长让我相信：人生最重要的东西，其实大都没有什么用：爱情，正义，自由，尊严，知识，文明，这些一再在灰黯时刻拯救我、安慰我的力量，对很多人来讲‘没有用’，我却坚持相信，这些才都是人生的珍宝，才经得起反复的追求。</li><li>世上有味之事，往往无用。吟无用之诗，醉无用之酒，读无用之书，钟无用之情，终于成一无所用之人，却因此活得有滋有味</li></ul></blockquote><br><h1 id="表格："><a href="#表格：" class="headerlink" title="表格：| --- | --- | --- |"></a>表格：<code>| --- | --- | --- |</code></h1><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">|<span class="hljs-string"> 学号          </span>|<span class="hljs-string"> 姓名      </span>|<span class="hljs-string">  备注     </span>|<br>|<span class="hljs-string"> --------      </span>|<span class="hljs-string"> -----:   </span>|<span class="hljs-string"> :----:   </span>|<br>|<span class="hljs-string"> 1             </span>|<span class="hljs-string"> 1号      </span>|<span class="hljs-string"> 牛逼      </span>|<br>|<span class="hljs-string"> 2             </span>|<span class="hljs-string"> 2号      </span>|<span class="hljs-string"> 牛逼      </span>|<br>|<span class="hljs-string"> 3             </span>|<span class="hljs-string"> 3号      </span>|<span class="hljs-string"> 牛逼      </span>|<br>|<span class="hljs-string"> （左起）       </span>|<span class="hljs-string"> （右起）   </span>|<span class="hljs-string"> （居中）  </span>|<br></code></pre></td></tr></table></figure><table><thead><tr><th>学号</th><th align="right">姓名</th><th align="center">备注</th></tr></thead><tbody><tr><td>1</td><td align="right">1号</td><td align="center">牛逼</td></tr><tr><td>2</td><td align="right">2号</td><td align="center">牛逼</td></tr><tr><td>3</td><td align="right">3号</td><td align="center">牛逼</td></tr><tr><td>（左起）</td><td align="right">（右起）</td><td align="center">（居中）</td></tr></tbody></table><br><h1 id="任务清单：-待办1；-x-待办2"><a href="#任务清单：-待办1；-x-待办2" class="headerlink" title="任务清单：- [ ] 待办1；- [x] 待办2"></a>任务清单：<code>- [ ] 待办1；- [x] 待办2</code></h1><ul><li><input disabled type="checkbox"> 练习markdown</li><li><input checked disabled type="checkbox"> 稍微熟练写法</li></ul><p>（难，清单的格式有编号的前缀，所以Github上两者同时出现，将就下bia ~ ~）</p><br><br><h1 id="公式：-G-m-g"><a href="#公式：-G-m-g" class="headerlink" title="公式：$ $  G=m*g  $ $"></a>公式：$ $  G=m*g  $ $</h1><p>$$ G=m*g $$</p><br><br><h1 id="插图片："><a href="#插图片：" class="headerlink" title="插图片："></a>插图片：</h1><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs less">本地：!<span class="hljs-selector-attr">[xxx]</span>(<span class="hljs-attribute">file</span>:<span class="hljs-comment">///C:\Users\xxx\xxx.jpg)</span><br>网络：![xxx](<span class="hljs-attribute">https</span>:<span class="hljs-comment">//www.github.com/username/username.github.io/_posts/image/xxx.jpg)</span><br></code></pre></td></tr></table></figure><p>全称网址：<br><img src="https://github.com/oldsandyoungman/oldsandyoungman.github.io/blob/master/assets/art_pig.jpg" alt="art_pig1"><br>相对网址：<br><img src="/assets/images_sha/art_pig.jpg" alt="art_pig2"></p><br><br><h1 id="流程图："><a href="#流程图：" class="headerlink" title="流程图："></a>流程图：</h1><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs livescript">沙`哥`傻`flow(<span class="hljs-string">\：使用前去掉沙哥傻，这里为了演示代码)</span><br>st=&gt;start: 大象和冰箱<br>op=&gt;operation: 将大象塞入冰箱<br>cond=&gt;condition: 塞得下吗?<br>e=&gt;end<br><br>st-&gt;op-&gt;cond<br>cond<span class="hljs-function"><span class="hljs-params">(<span class="hljs-literal">yes</span>)</span>-&gt;</span>e<br>cond<span class="hljs-function"><span class="hljs-params">(<span class="hljs-literal">no</span>)</span>-&gt;</span>op<br>沙`哥`傻`(<span class="hljs-string">\：使用前去掉沙哥傻，这里为了演示代码)</span><br></code></pre></td></tr></table></figure><hr><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs flow">st=&gt;start: 大象和冰箱<br>op=&gt;operation: 将大象塞入冰箱<br>cond=&gt;condition: 塞得下吗?<br>e=&gt;end<br><br>st-&gt;op-&gt;cond<br>cond(yes)-&gt;e<br>cond(no)-&gt;op<br><br></code></pre></td></tr></table></figure><p>（貌似显示不粗来，应该还不能用呀）</p>]]></content>
    
    
    <categories>
      
      <category>程序员的优雅之路</category>
      
    </categories>
    
    
    <tags>
      
      <tag>markdown</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【记】Github和Gitee上搭建博客</title>
    <link href="/2020/03/27/2020-03-27-Github%E5%92%8CGitee%E4%B8%8A%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    <url>/2020/03/27/2020-03-27-Github%E5%92%8CGitee%E4%B8%8A%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<p>折腾了可能有3、4天，才用  <a href="http://jekyllcn.com/">Jekyll</a> + <a href="https://github.com/Simpleyyt/jekyll-theme-next">Next</a> 搭建好个人博客（<code>Windows</code> 配置 <code>Jekyll</code> 挺不友好的），其中参考了很多教程和博客，最后正常运行，但是其中的原理还是没有太明白。<br><br><br><br>梳理下大概的流程，以后有时间在新系统上重新配置一遍：<br><br><br><br><br><br></p><h1 id="Windows下-Jekyll的Next主题搭建"><a href="#Windows下-Jekyll的Next主题搭建" class="headerlink" title="Windows下 Jekyll的Next主题搭建"></a>Windows下 Jekyll的Next主题搭建</h1><h3 id="安装Ruby"><a href="#安装Ruby" class="headerlink" title="安装Ruby"></a>安装Ruby</h3><ol><li><p>下载<a href="https://rubyinstaller.org/">Ruby官网的Windows版本exe</a>（菜菜的我爱着傻瓜式的exe）</p><ul><li><a href="http://jekyllcn.com/docs/windows/#installation">官方教程</a>上是用<a href="https://chocolatey.org/install">chocolatey</a>作为平台再安装Ruby的，但是后面的步骤遇到一些版本不匹配问题，所以我后来舍弃了。不同人的电脑配置不同，可以尝试。</li></ul></li><li><p>运行exe到最后一步，先不启动Windows PowerShell（不打勾），换下源（不然速度太慢，参考 <a href="https://blog.csdn.net/mscf/article/details/82627951">this blog</a>）</p></li><li><p>管理员身份运行cmd，输入“ridk install”并回车，安装1和3</p></li><li><p>看网上的说法2非必要，然后我自己装了2出现了点问题，卸载了单独装1+3才好的，我也解释不清楚</p></li></ol><br><h3 id="利用-gem-安装-nokogiri-（不确定是不是必要项）"><a href="#利用-gem-安装-nokogiri-（不确定是不是必要项）" class="headerlink" title="利用 gem 安装 nokogiri （不确定是不是必要项）"></a>利用 gem 安装 nokogiri （不确定是不是必要项）</h3><ol><li><p>先换源：（完事第一步）</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">gem sources -a http:<span class="hljs-regexp">//g</span>ems.ruby-china.com/<br></code></pre></td></tr></table></figure></li><li><p><a href="http://jekyllcn.com/docs/windows/#installation">官方教程</a>的说法是很多参数的命令行：</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript">gem install nokogiri --^<br>   --with-xml2-include=C:<span class="hljs-symbol">\C</span>hocolatey<span class="hljs-symbol">\l</span>ib<span class="hljs-symbol">\l</span>ibxml2.2.7.8.7<span class="hljs-symbol">\b</span>uild<span class="hljs-symbol">\n</span>ative<span class="hljs-symbol">\i</span>nclude^<br>   --with-xml2-lib=C:<span class="hljs-symbol">\C</span>hocolatey<span class="hljs-symbol">\l</span>ib<span class="hljs-symbol">\l</span>ibxml2.redist.2.7.8.7<span class="hljs-symbol">\b</span>uild<span class="hljs-symbol">\n</span>ative<span class="hljs-symbol">\b</span>in<span class="hljs-symbol">\v</span>110<span class="hljs-symbol">\x</span>64<span class="hljs-symbol">\R</span>elease<span class="hljs-symbol">\d</span>ynamic<span class="hljs-symbol">\c</span>decl^<br>   --with-iconv-include=C:<span class="hljs-symbol">\C</span>hocolatey<span class="hljs-symbol">\l</span>ib<span class="hljs-symbol">\l</span>ibiconv.1.14.0.11<span class="hljs-symbol">\b</span>uild<span class="hljs-symbol">\n</span>ative<span class="hljs-symbol">\i</span>nclude^<br>   --with-iconv-lib=C:<span class="hljs-symbol">\C</span>hocolatey<span class="hljs-symbol">\l</span>ib<span class="hljs-symbol">\l</span>ibiconv.redist.1.14.0.11<span class="hljs-symbol">\b</span>uild<span class="hljs-symbol">\n</span>ative<span class="hljs-symbol">\b</span>in<span class="hljs-symbol">\v</span>110<span class="hljs-symbol">\x</span>64<span class="hljs-symbol">\R</span>elease<span class="hljs-symbol">\d</span>ynamic<span class="hljs-symbol">\c</span>decl^<br>   --with-xslt-include=C:<span class="hljs-symbol">\C</span>hocolatey<span class="hljs-symbol">\l</span>ib<span class="hljs-symbol">\l</span>ibxslt.1.1.28.0<span class="hljs-symbol">\b</span>uild<span class="hljs-symbol">\n</span>ative<span class="hljs-symbol">\i</span>nclude^<br>   --with-xslt-lib=C:<span class="hljs-symbol">\C</span>hocolatey<span class="hljs-symbol">\l</span>ib<span class="hljs-symbol">\l</span>ibxslt.redist.1.1.28.0<span class="hljs-symbol">\b</span>uild<span class="hljs-symbol">\n</span>ative<span class="hljs-symbol">\b</span>in<span class="hljs-symbol">\v</span>110<span class="hljs-symbol">\x</span>64<span class="hljs-symbol">\R</span>elease<span class="hljs-symbol">\d</span>ynamic<br></code></pre></td></tr></table></figure><ul><li>这部分因为我反复卸载用了很多方法，不确定哪个奏效，留个坑</li></ul></li></ol><br><h3 id="利用gem安装Github-pages"><a href="#利用gem安装Github-pages" class="headerlink" title="利用gem安装Github-pages"></a>利用gem安装Github-pages</h3><ol><li><p>安装bundle，输入如下命令行：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">gem <span class="hljs-keyword">install</span> bundler<br></code></pre></td></tr></table></figure><ul><li>关于<a href="https://www.jianshu.com/p/bcbb278e9208">bundle的作用，和Gem的关系</a></li></ul></li><li><p>本地博客的根目录下，手动建立名为“Gemfile”的无后缀文件，在该文件中写入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">source</span> <span class="hljs-string">&#x27;http://rubygems.org&#x27;</span><br>gem <span class="hljs-string">&#x27;github-pages&#x27;</span><br></code></pre></td></tr></table></figure><ul><li>如果是用别人的模板（比如在下，git了<a href="https://github.com/Simpleyyt/jekyll-theme-next">Next主题</a>的模板，然后在上面改），那么就下载好文件到你的博客目录下，里面自带“Gemfile”文件的。</li></ul></li><li><p>命令行切换到本地博客的根目录，输入： </p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">bundle <span class="hljs-keyword">install</span><br></code></pre></td></tr></table></figure></li><li><p>按照道理，之后就可以正常运行了。启动：</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta">jekyll <span class="hljs-keyword">server</span><br></code></pre></td></tr></table></figure></li><li><p>如果出现“exec”啥的报错（具体不大记得了~~），就换下面的命令</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">bundle </span>exec <span class="hljs-keyword">jekyll </span>server<br></code></pre></td></tr></table></figure></li></ol><br><br><br># 修改配置 + 写博客### 修改配置这一部分就是在根目录下的_config.yml文件中进行修改，我列一些我用到的配置项（用文本编辑器打开，搜一个改一个 ~）<br>#### 网站的基本信息：<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># Site</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">沙沙响</span><br><span class="hljs-attr">subtitle:</span> <span class="hljs-string">Rustling</span><br><span class="hljs-attr">description:</span> <span class="hljs-string">佛曰：God</span> <span class="hljs-string">bless</span> <span class="hljs-string">you~</span> <br><span class="hljs-attr">author:</span> <span class="hljs-string">沙哥</span><br><span class="hljs-comment"># Support language: de, en, fr-FR, id, ja, ko, pt-BR, pt, ru, zh-Hans, zh-hk, zh-tw</span><br><span class="hljs-attr">language:</span> <span class="hljs-string">zh-Hans</span><br><span class="hljs-attr">date_format:</span> <span class="hljs-string">&#x27;%Y-%m-%d&#x27;</span><br></code></pre></td></tr></table></figure>注意：zh-Hans 即简体中文，名称的选取是源自 /_data/languages/ 目录下的文件名<br><h4 id="域名："><a href="#域名：" class="headerlink" title="域名："></a>域名：</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># URL</span><br><span class="hljs-comment">## If your site is put in a subdirectory, set url as &#x27;http://yoursite.com&#x27; and baseurl as &#x27;/child&#x27;</span><br><span class="hljs-attr">url:</span><br><span class="hljs-attr">baseurl:</span><br><span class="hljs-attr">permalink:</span> <span class="hljs-string">pretty</span><br><br></code></pre></td></tr></table></figure><p>如果之后挂载到 Gitee 上，那么需要配置（具体见 3.2 Gitee篇），Github实验下来貌似不需要。</p><br><h4 id="浏览器标签页的小标"><a href="#浏览器标签页的小标" class="headerlink" title="浏览器标签页的小标"></a>浏览器标签页的小标</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># Put your favicon.ico into `assets/` directory.</span><br><span class="hljs-attr">favicon:</span> <span class="hljs-string">/assets/art_pig.jpg</span><br><br></code></pre></td></tr></table></figure><p>即浏览器标签页的小图标，就像这样：</p><p><img src="/assets/images_sha/favicon.jpg" alt="favicon"></p><br><h4 id="菜单的内容和相应图标"><a href="#菜单的内容和相应图标" class="headerlink" title="菜单的内容和相应图标"></a>菜单的内容和相应图标</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># ---------------------------------------------------------------</span><br><span class="hljs-comment"># Menu Settings</span><br><span class="hljs-comment"># ---------------------------------------------------------------</span><br><br><span class="hljs-comment"># When running the site in a subdirectory (e.g. domain.tld/blog), remove the leading slash (/archives -&gt; archives)</span><br><span class="hljs-attr">menu:</span><br>  <span class="hljs-attr">home:</span> <span class="hljs-string">/</span><br>  <span class="hljs-attr">categories:</span> <span class="hljs-string">/categories/</span><br>  <span class="hljs-attr">about:</span> <span class="hljs-string">/about/</span><br>  <span class="hljs-attr">archives:</span> <span class="hljs-string">/archives/</span><br>  <span class="hljs-attr">tags:</span> <span class="hljs-string">/tags/</span><br>  <span class="hljs-comment">#sitemap: /sitemap.xml</span><br>  <span class="hljs-comment">#commonweal: /404.html</span><br><br><br><span class="hljs-comment"># Enable/Disable menu icons.</span><br><span class="hljs-comment"># Icon Mapping:</span><br><span class="hljs-comment">#   Map a menu item to a specific FontAwesome icon name.</span><br><span class="hljs-comment">#   Key is the name of menu item and value is the name of FontAwesome icon. Key is case-senstive.</span><br><span class="hljs-comment">#   When an question mask icon presenting up means that the item has no mapping icon.</span><br><span class="hljs-attr">menu_icons:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-comment">#KeyMapsToMenuItemKey: NameOfTheIconFromFontAwesome</span><br>  <span class="hljs-attr">home:</span> <span class="hljs-string">home</span><br>  <span class="hljs-attr">about:</span> <span class="hljs-string">user</span><br>  <span class="hljs-attr">categories:</span> <span class="hljs-string">th</span><br>  <span class="hljs-attr">schedule:</span> <span class="hljs-string">calendar</span><br>  <span class="hljs-attr">tags:</span> <span class="hljs-string">tags</span><br>  <span class="hljs-attr">archives:</span> <span class="hljs-string">archive</span><br>  <span class="hljs-attr">sitemap:</span> <span class="hljs-string">sitemap</span><br>  <span class="hljs-attr">commonweal:</span> <span class="hljs-string">heartbeat</span><br><br></code></pre></td></tr></table></figure><br><h4 id="Next主题的几大样式选择"><a href="#Next主题的几大样式选择" class="headerlink" title="Next主题的几大样式选择"></a>Next主题的几大样式选择</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><br><span class="hljs-comment"># ---------------------------------------------------------------</span><br><span class="hljs-comment"># Scheme Settings</span><br><span class="hljs-comment"># ---------------------------------------------------------------</span><br><br><span class="hljs-comment"># Schemes</span><br><span class="hljs-comment">#scheme: Muse</span><br><span class="hljs-comment">#scheme: Mist</span><br><span class="hljs-attr">scheme:</span> <span class="hljs-string">Pisces</span><br><br></code></pre></td></tr></table></figure><p>Pisces 是你当前看到的样式，分为左右两栏</p><br><h4 id="菜单栏下方的联系方式及相应图标"><a href="#菜单栏下方的联系方式及相应图标" class="headerlink" title="菜单栏下方的联系方式及相应图标"></a>菜单栏下方的联系方式及相应图标</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># ---------------------------------------------------------------</span><br><span class="hljs-comment"># Sidebar Settings</span><br><span class="hljs-comment"># ---------------------------------------------------------------</span><br><br><br><span class="hljs-comment"># Social Links</span><br><span class="hljs-comment"># Key is the link label showing to end users.</span><br><span class="hljs-comment"># Value is the target link (E.g. GitHub: https://github.com/iissnan)</span><br><span class="hljs-attr">social:</span><br>  <span class="hljs-comment">#LinkLabel: Link</span><br>  <span class="hljs-attr">GitHub:</span> <span class="hljs-string">https://github.com/oldsandyoungman</span><br>  <span class="hljs-attr">School:</span> <span class="hljs-string">http://www.seu.edu.cn</span><br><br><br><span class="hljs-comment"># Social Links Icons</span><br><span class="hljs-comment"># Icon Mapping:</span><br><span class="hljs-comment">#   Map a menu item to a specific FontAwesome icon name.</span><br><span class="hljs-comment">#   Key is the name of the item and value is the name of FontAwesome icon. Key is case-senstive.</span><br><span class="hljs-comment">#   When an globe mask icon presenting up means that the item has no mapping icon.</span><br><span class="hljs-attr">social_icons:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-comment"># Icon Mappings.</span><br>  <span class="hljs-comment"># KeyMapsToSocialItemKey: NameOfTheIconFromFontAwesome</span><br>  <span class="hljs-attr">GitHub:</span> <span class="hljs-string">github</span><br>  <span class="hljs-attr">Twitter:</span> <span class="hljs-string">twitter</span><br>  <span class="hljs-attr">Weibo:</span> <span class="hljs-string">weibo</span><br>  <span class="hljs-attr">School:</span> <span class="hljs-string">university</span><br><br></code></pre></td></tr></table></figure><p>这里我借鉴别人的，也是设置了 Github 和我大学的官网，也可以添加其他链接</p><br><h4 id="你的头像"><a href="#你的头像" class="headerlink" title="你的头像"></a>你的头像</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># Sidebar Avatar</span><br><span class="hljs-comment"># in directory: /assets/images/avatar.gif</span><br><span class="hljs-comment">#avatar:</span><br><span class="hljs-attr">in directory:</span> <br><span class="hljs-attr">avatar:</span> <span class="hljs-string">assets/art_pig.jpg</span><br><br></code></pre></td></tr></table></figure><p>可以用动图gif，我没试验hiahia</p><br><h4 id="侧栏属性"><a href="#侧栏属性" class="headerlink" title="侧栏属性"></a>侧栏属性</h4><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">sidebar:</span><br>  <span class="hljs-comment"># Sidebar Position, available value: left | right</span><br>  <span class="hljs-attr">position:</span> <span class="hljs-string">left</span><br>  <span class="hljs-comment">#position: right</span><br><br>  <span class="hljs-comment"># Sidebar Display, available value:</span><br>  <span class="hljs-comment">#  - post    expand on posts automatically. Default.</span><br>  <span class="hljs-comment">#  - always  expand for all pages automatically</span><br>  <span class="hljs-comment">#  - hide    expand only when click on the sidebar toggle icon.</span><br>  <span class="hljs-comment">#  - remove  Totally remove sidebar including sidebar toggle.</span><br>  <span class="hljs-comment">#display: post</span><br>  <span class="hljs-attr">display:</span> <span class="hljs-string">always</span><br>  <span class="hljs-comment">#display: hide</span><br>  <span class="hljs-comment">#display: remove</span><br><br>  <span class="hljs-comment"># Sidebar offset from top menubar in pixels.</span><br>  <span class="hljs-attr">offset:</span> <span class="hljs-number">12</span><br>  <span class="hljs-attr">offset_float:</span> <span class="hljs-number">0</span><br><br>  <span class="hljs-comment"># Back to top in sidebar</span><br>  <span class="hljs-attr">b2t:</span> <span class="hljs-literal">false</span><br><br>  <span class="hljs-comment"># Scroll percent label in b2t button</span><br>  <span class="hljs-attr">scrollpercent:</span> <span class="hljs-literal">false</span><br><br></code></pre></td></tr></table></figure><p>我关注的是 <code>display: always</code>，就是无论浏览哪个页面和如何滚动，都不会省略侧边栏</p><br><h4 id="其他社交链接"><a href="#其他社交链接" class="headerlink" title="其他社交链接"></a>其他社交链接</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># Blog rolls</span><br><span class="hljs-attr">links_title:</span> <span class="hljs-string">Links</span><br><span class="hljs-comment">#links_layout: block</span><br><span class="hljs-comment">#links_layout: inline</span><br><span class="hljs-attr">links:</span><br>  <span class="hljs-comment">#Title: http://example.com/</span><br>  <span class="hljs-string">B站:</span> <span class="hljs-string">https://space.bilibili.com/129371092</span><br><br></code></pre></td></tr></table></figure><p>我挂了个B站作为例子</p><br><h4 id="背景动画"><a href="#背景动画" class="headerlink" title="背景动画"></a>背景动画</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># Canvas-nest</span><br><span class="hljs-attr">canvas_nest:</span> <span class="hljs-literal">true</span><br><br><span class="hljs-comment"># three_waves</span><br><span class="hljs-attr">three_waves:</span> <span class="hljs-literal">false</span><br><br><span class="hljs-comment"># canvas_lines</span><br><span class="hljs-attr">canvas_lines:</span> <span class="hljs-literal">false</span><br><br><span class="hljs-comment"># canvas_sphere</span><br><span class="hljs-attr">canvas_sphere:</span> <span class="hljs-literal">false</span><br><br><span class="hljs-comment"># Only fit scheme Pisces</span><br><span class="hljs-comment"># Canvas-ribbon</span><br><span class="hljs-attr">canvas_ribbon:</span> <span class="hljs-literal">false</span><br><br></code></pre></td></tr></table></figure><p>这个我玩得最起劲，觉得贼几把炫酷 ~~</p><br><br><hr><blockquote><p>其他一些高级功能我之后有时间再慢慢探索 ~~~</p></blockquote><hr><br><br><h3 id="写博客"><a href="#写博客" class="headerlink" title="写博客"></a>写博客</h3><h4 id="写文章"><a href="#写文章" class="headerlink" title="写文章"></a>写文章</h4><ol><li><p>在根目录的 _post 文件夹下，新建：年-月-日-标题（例如2020-03-27-我是标题）的md后缀文件</p></li><li><p>文件内容分为两部分。</p><ul><li><p>第一部分是一些配置信息，例如我这篇博客列出了一些基本信息，按照格式填写即可：</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs subunit">title: 【记】Github和Gitee上搭建博客<br>date: 2020<span class="hljs-string">-03</span><span class="hljs-string">-27</span> 14:32:20<br>category: 程序员的优雅之路<br><span class="hljs-keyword">tags:</span><br>- GitHub / Gitee<br>- Blog<br>- Next主题<br>description: 那些年我们走过的那些坑<br></code></pre></td></tr></table></figure></li><li><p>第二部分是正文，正常的markdown语言就行</p></li></ul></li></ol><ol start="3"><li>保存并且上传后，过一阵子刷新你的个人博客即可</li></ol><br><h4 id="加载图片"><a href="#加载图片" class="headerlink" title="加载图片"></a>加载图片</h4><p>正常的markdown语言的加载图片，用的是全称网址，例如我在本地博客下的 assets 文件夹下建立 images_sha 来存放我用到的图片，那么加载图片的格式应该是：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">![名字](https:<span class="hljs-regexp">//</span>www.github.com<span class="hljs-regexp">/xxxx/</span>xxxx.github.io<span class="hljs-regexp">/assets/im</span>ages_sha/xxx.jpg)<br></code></pre></td></tr></table></figure><p><img src="https://github.com/oldsandyoungman/oldsandyoungman.github.io/blob/master/assets/images_sha/art_pig.jpg" alt="art_pig"></p><p>但是我现在实验下来并没有成功（<strong>例如上面就是一个失败的案例，不知道阁下显示是否正常</strong>），后来在网上找到相对路径的方法倒是成功了，所以目前都用的相对路径来写博客。</p><br><p>用相对路劲的话，我的markdown是 Typora 编辑器，在“格式”-“图像”-“设置图像根目录…”，选中本地博客的根目录，之后加载图片就可以用如下指令：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">![名字](<span class="hljs-regexp">/assets/im</span>ages_sha/xxx.jpg)<br></code></pre></td></tr></table></figure><p><img src="/assets/images_sha/art_pig.jpg" alt="art_pig"></p><p>另外值得注意的是，当在 _post 文件夹下建立图片时，貌似 Github 上无法显示（知乎上 <a href="https://www.zhihu.com/question/31123165/answer/274501351">这篇回答</a> 提到），所以建议不要在 _post 文件夹下放置图片</p><br><br><br><h1 id="Github-和-Gitee-上的配置"><a href="#Github-和-Gitee-上的配置" class="headerlink" title="Github 和 Gitee 上的配置"></a>Github 和 Gitee 上的配置</h1><p>总体而言，Github配置较为简单，因为Github服务器的配置环境版本较新，我加载下来没有出现乱码啥的<sub>（当然速度较慢是必然的）</sub>；而Gitee的环境版本较为落后，所以有时候我加载下来不对，会让有些小烦躁。</p><ul><li>关于两者环境的具体说明：<a href="https://www.cnblogs.com/xjtu-blacksmith/p/jekyll-of-pages.html">this blog</a></li></ul><br><h3 id="Github篇"><a href="#Github篇" class="headerlink" title="Github篇"></a>Github篇</h3><ol><li><p>新建一个Repository，命名为 xxxxx.github.io（xxxxx为你的用户名）</p></li><li><p>将你本地的博客全部 push 上去（关于 git 的概念和操作，建议从头学一遍<a href="https://www.liaoxuefeng.com/wiki/896043488029600">廖雪峰大佬的博客</a>，毕竟作为程序员之后将与 git 常相伴随 ~~ ），具体而言</p><ul><li><p>安装好 git </p></li><li><p>在 git bash 中，进入你的博客所在的根目录</p></li><li><p>输入命令，初始化仓库：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp">git <span class="hljs-keyword">init</span><br></code></pre></td></tr></table></figure></li><li><p>输入命令，将仓库所有东西 add 到本地的暂存区</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">git <span class="hljs-builtin-name">add</span> .<br></code></pre></td></tr></table></figure></li><li><p>输入命令，将暂存区的东西提交，并且写一个备注”xxxx”</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">git</span> commit -m <span class="hljs-string">&quot;xxxx&quot;</span><br></code></pre></td></tr></table></figure></li><li><p>输入命令，查看本地仓库连接的远端服务器情况</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">git remote -v</span><br></code></pre></td></tr></table></figure></li><li><p>如果之前已经设定过，就跳过；没有的话添加账户：（origin是自己给远端起的名字，xxxx是用户名）</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">git remote add origin git@github<span class="hljs-selector-class">.com</span>:xxxx/xxxx<span class="hljs-selector-class">.github</span><span class="hljs-selector-class">.io</span>.git<br></code></pre></td></tr></table></figure></li><li><p>输入命令，把本地的master，提交给远端的origin</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">git <span class="hljs-built_in">push</span> <span class="hljs-built_in">origin</span> master<br></code></pre></td></tr></table></figure></li></ul></li><li><p>到这里其实就应该算结束了，如果不出意外，输入xxxxx.github.io就能看到你的博客了</p></li></ol><br><br><h3 id="Gitee篇"><a href="#Gitee篇" class="headerlink" title="Gitee篇"></a>Gitee篇</h3><ol><li><p>首先，将本地博客根目录下的 _config.yml 文件中，url 等字段进行修改。</p><p>例如我 Gitee 上个人博客的网址为：<a href="https://gitee.com/oldsandyoungman/blog%EF%BC%8C%E9%82%A3%E4%B9%88">https://gitee.com/oldsandyoungman/blog，那么</a> _config.yml 文件中部分内容则修改如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># URL</span><br><span class="hljs-comment">## If your site is put in a subdirectory, set url as &#x27;http://yoursite.com&#x27; and baseurl as &#x27;/child&#x27;</span><br><span class="hljs-attr">url:</span> <span class="hljs-string">http://oldsandyoungman.gitee.io/blog</span><br><span class="hljs-attr">baseurl:</span> <span class="hljs-string">/blog</span><br><span class="hljs-attr">permalink:</span> <span class="hljs-string">pretty</span><br></code></pre></td></tr></table></figure></li><li><p>之后的上传步骤同理，不过在添加远端名字时，需要将“Github”的网址，改成你Gitee上的相应网址，例如我 Gitee 上个人博客的网址为：<a href="https://gitee.com/oldsandyoungman/blog%EF%BC%8C">https://gitee.com/oldsandyoungman/blog，</a></p><p> 那么就将</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">git remote add origin git@github<span class="hljs-selector-class">.com</span>:oldsandyoungman/oldsandyoungman<span class="hljs-selector-class">.github</span><span class="hljs-selector-class">.io</span>.git<br></code></pre></td></tr></table></figure><p> 改为</p> <figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm">git remote <span class="hljs-keyword">add</span> origin git<span class="hljs-title">@gitee.com</span>:oldsandyoungman/blog.git<br></code></pre></td></tr></table></figure></li></ol><ol start="3"><li>最后，在Gitee的你的仓库页面，点击“服务”，选中“Gitee Pages”，然后就可以生成你的博客啦 ~~</li></ol>]]></content>
    
    
    <categories>
      
      <category>程序员的优雅之路</category>
      
    </categories>
    
    
    <tags>
      
      <tag>GitHub / Gitee</tag>
      
      <tag>Blog</tag>
      
      <tag>Next主题</tag>
      
      <tag>Jekyll</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
